
PotantiometerControl-ServoMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004474  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045ec  080045ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080045ec  080045ec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045ec  080045ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045f0  080045f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080045f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000010  08004604  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004604  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fa2  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001693  00000000  00000000  00029fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be8  00000000  00000000  0002b670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002c258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010536  00000000  00000000  0002cda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009751  00000000  00000000  0003d2de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000672c9  00000000  00000000  00046a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000adcf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d64  00000000  00000000  000add74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800451c 	.word	0x0800451c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800451c 	.word	0x0800451c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f001 f8fc 	bl	8001424 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fc9d 	bl	8000b70 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fad3 	bl	80007e8 <__aeabi_fsub>
 8000242:	f000 fc95 	bl	8000b70 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fadd>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	4647      	mov	r7, r8
 8000254:	46ce      	mov	lr, r9
 8000256:	0243      	lsls	r3, r0, #9
 8000258:	0a5b      	lsrs	r3, r3, #9
 800025a:	0044      	lsls	r4, r0, #1
 800025c:	0fc2      	lsrs	r2, r0, #31
 800025e:	469c      	mov	ip, r3
 8000260:	0048      	lsls	r0, r1, #1
 8000262:	00dd      	lsls	r5, r3, #3
 8000264:	024b      	lsls	r3, r1, #9
 8000266:	0e24      	lsrs	r4, r4, #24
 8000268:	0a5b      	lsrs	r3, r3, #9
 800026a:	0e00      	lsrs	r0, r0, #24
 800026c:	b580      	push	{r7, lr}
 800026e:	4698      	mov	r8, r3
 8000270:	0026      	movs	r6, r4
 8000272:	4691      	mov	r9, r2
 8000274:	0fc9      	lsrs	r1, r1, #31
 8000276:	00db      	lsls	r3, r3, #3
 8000278:	1a27      	subs	r7, r4, r0
 800027a:	428a      	cmp	r2, r1
 800027c:	d029      	beq.n	80002d2 <__aeabi_fadd+0x82>
 800027e:	2f00      	cmp	r7, #0
 8000280:	dd15      	ble.n	80002ae <__aeabi_fadd+0x5e>
 8000282:	2800      	cmp	r0, #0
 8000284:	d14a      	bne.n	800031c <__aeabi_fadd+0xcc>
 8000286:	2b00      	cmp	r3, #0
 8000288:	d000      	beq.n	800028c <__aeabi_fadd+0x3c>
 800028a:	e095      	b.n	80003b8 <__aeabi_fadd+0x168>
 800028c:	08ed      	lsrs	r5, r5, #3
 800028e:	2cff      	cmp	r4, #255	; 0xff
 8000290:	d100      	bne.n	8000294 <__aeabi_fadd+0x44>
 8000292:	e088      	b.n	80003a6 <__aeabi_fadd+0x156>
 8000294:	026b      	lsls	r3, r5, #9
 8000296:	0a5b      	lsrs	r3, r3, #9
 8000298:	b2e6      	uxtb	r6, r4
 800029a:	025b      	lsls	r3, r3, #9
 800029c:	05f6      	lsls	r6, r6, #23
 800029e:	0a58      	lsrs	r0, r3, #9
 80002a0:	4330      	orrs	r0, r6
 80002a2:	07d2      	lsls	r2, r2, #31
 80002a4:	4310      	orrs	r0, r2
 80002a6:	bc0c      	pop	{r2, r3}
 80002a8:	4690      	mov	r8, r2
 80002aa:	4699      	mov	r9, r3
 80002ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002ae:	2f00      	cmp	r7, #0
 80002b0:	d000      	beq.n	80002b4 <__aeabi_fadd+0x64>
 80002b2:	e087      	b.n	80003c4 <__aeabi_fadd+0x174>
 80002b4:	1c60      	adds	r0, r4, #1
 80002b6:	b2c0      	uxtb	r0, r0
 80002b8:	2801      	cmp	r0, #1
 80002ba:	dc00      	bgt.n	80002be <__aeabi_fadd+0x6e>
 80002bc:	e0b6      	b.n	800042c <__aeabi_fadd+0x1dc>
 80002be:	1aee      	subs	r6, r5, r3
 80002c0:	0172      	lsls	r2, r6, #5
 80002c2:	d500      	bpl.n	80002c6 <__aeabi_fadd+0x76>
 80002c4:	e0c5      	b.n	8000452 <__aeabi_fadd+0x202>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d13d      	bne.n	8000346 <__aeabi_fadd+0xf6>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2600      	movs	r6, #0
 80002ce:	2300      	movs	r3, #0
 80002d0:	e7e3      	b.n	800029a <__aeabi_fadd+0x4a>
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	dc00      	bgt.n	80002d8 <__aeabi_fadd+0x88>
 80002d6:	e096      	b.n	8000406 <__aeabi_fadd+0x1b6>
 80002d8:	2800      	cmp	r0, #0
 80002da:	d05d      	beq.n	8000398 <__aeabi_fadd+0x148>
 80002dc:	2cff      	cmp	r4, #255	; 0xff
 80002de:	d060      	beq.n	80003a2 <__aeabi_fadd+0x152>
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	04d2      	lsls	r2, r2, #19
 80002e4:	4313      	orrs	r3, r2
 80002e6:	2f1b      	cmp	r7, #27
 80002e8:	dd00      	ble.n	80002ec <__aeabi_fadd+0x9c>
 80002ea:	e0ec      	b.n	80004c6 <__aeabi_fadd+0x276>
 80002ec:	2220      	movs	r2, #32
 80002ee:	1bd2      	subs	r2, r2, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	4093      	lsls	r3, r2
 80002f4:	40f8      	lsrs	r0, r7
 80002f6:	1e5a      	subs	r2, r3, #1
 80002f8:	4193      	sbcs	r3, r2
 80002fa:	4303      	orrs	r3, r0
 80002fc:	18ed      	adds	r5, r5, r3
 80002fe:	016b      	lsls	r3, r5, #5
 8000300:	d57b      	bpl.n	80003fa <__aeabi_fadd+0x1aa>
 8000302:	3401      	adds	r4, #1
 8000304:	2cff      	cmp	r4, #255	; 0xff
 8000306:	d100      	bne.n	800030a <__aeabi_fadd+0xba>
 8000308:	e0b7      	b.n	800047a <__aeabi_fadd+0x22a>
 800030a:	2201      	movs	r2, #1
 800030c:	2607      	movs	r6, #7
 800030e:	402a      	ands	r2, r5
 8000310:	086b      	lsrs	r3, r5, #1
 8000312:	4d9a      	ldr	r5, [pc, #616]	; (800057c <__aeabi_fadd+0x32c>)
 8000314:	401d      	ands	r5, r3
 8000316:	4315      	orrs	r5, r2
 8000318:	402e      	ands	r6, r5
 800031a:	e029      	b.n	8000370 <__aeabi_fadd+0x120>
 800031c:	2cff      	cmp	r4, #255	; 0xff
 800031e:	d0b5      	beq.n	800028c <__aeabi_fadd+0x3c>
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	04d2      	lsls	r2, r2, #19
 8000324:	4313      	orrs	r3, r2
 8000326:	2f1b      	cmp	r7, #27
 8000328:	dd00      	ble.n	800032c <__aeabi_fadd+0xdc>
 800032a:	e0b2      	b.n	8000492 <__aeabi_fadd+0x242>
 800032c:	2220      	movs	r2, #32
 800032e:	1bd2      	subs	r2, r2, r7
 8000330:	0019      	movs	r1, r3
 8000332:	4093      	lsls	r3, r2
 8000334:	40f9      	lsrs	r1, r7
 8000336:	1e5a      	subs	r2, r3, #1
 8000338:	4193      	sbcs	r3, r2
 800033a:	430b      	orrs	r3, r1
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	016b      	lsls	r3, r5, #5
 8000340:	d55b      	bpl.n	80003fa <__aeabi_fadd+0x1aa>
 8000342:	01ad      	lsls	r5, r5, #6
 8000344:	09ae      	lsrs	r6, r5, #6
 8000346:	0030      	movs	r0, r6
 8000348:	f001 f876 	bl	8001438 <__clzsi2>
 800034c:	3805      	subs	r0, #5
 800034e:	4086      	lsls	r6, r0
 8000350:	4284      	cmp	r4, r0
 8000352:	dc65      	bgt.n	8000420 <__aeabi_fadd+0x1d0>
 8000354:	1b04      	subs	r4, r0, r4
 8000356:	0033      	movs	r3, r6
 8000358:	2020      	movs	r0, #32
 800035a:	3401      	adds	r4, #1
 800035c:	40e3      	lsrs	r3, r4
 800035e:	1b04      	subs	r4, r0, r4
 8000360:	40a6      	lsls	r6, r4
 8000362:	1e75      	subs	r5, r6, #1
 8000364:	41ae      	sbcs	r6, r5
 8000366:	4333      	orrs	r3, r6
 8000368:	2607      	movs	r6, #7
 800036a:	001d      	movs	r5, r3
 800036c:	2400      	movs	r4, #0
 800036e:	401e      	ands	r6, r3
 8000370:	2201      	movs	r2, #1
 8000372:	464b      	mov	r3, r9
 8000374:	401a      	ands	r2, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d004      	beq.n	8000384 <__aeabi_fadd+0x134>
 800037a:	230f      	movs	r3, #15
 800037c:	402b      	ands	r3, r5
 800037e:	2b04      	cmp	r3, #4
 8000380:	d000      	beq.n	8000384 <__aeabi_fadd+0x134>
 8000382:	3504      	adds	r5, #4
 8000384:	016b      	lsls	r3, r5, #5
 8000386:	d400      	bmi.n	800038a <__aeabi_fadd+0x13a>
 8000388:	e780      	b.n	800028c <__aeabi_fadd+0x3c>
 800038a:	3401      	adds	r4, #1
 800038c:	b2e6      	uxtb	r6, r4
 800038e:	2cff      	cmp	r4, #255	; 0xff
 8000390:	d12f      	bne.n	80003f2 <__aeabi_fadd+0x1a2>
 8000392:	26ff      	movs	r6, #255	; 0xff
 8000394:	2300      	movs	r3, #0
 8000396:	e780      	b.n	800029a <__aeabi_fadd+0x4a>
 8000398:	2b00      	cmp	r3, #0
 800039a:	d152      	bne.n	8000442 <__aeabi_fadd+0x1f2>
 800039c:	2cff      	cmp	r4, #255	; 0xff
 800039e:	d000      	beq.n	80003a2 <__aeabi_fadd+0x152>
 80003a0:	e774      	b.n	800028c <__aeabi_fadd+0x3c>
 80003a2:	000a      	movs	r2, r1
 80003a4:	08ed      	lsrs	r5, r5, #3
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0f3      	beq.n	8000392 <__aeabi_fadd+0x142>
 80003aa:	2380      	movs	r3, #128	; 0x80
 80003ac:	03db      	lsls	r3, r3, #15
 80003ae:	432b      	orrs	r3, r5
 80003b0:	025b      	lsls	r3, r3, #9
 80003b2:	0a5b      	lsrs	r3, r3, #9
 80003b4:	26ff      	movs	r6, #255	; 0xff
 80003b6:	e770      	b.n	800029a <__aeabi_fadd+0x4a>
 80003b8:	3f01      	subs	r7, #1
 80003ba:	2f00      	cmp	r7, #0
 80003bc:	d0be      	beq.n	800033c <__aeabi_fadd+0xec>
 80003be:	2cff      	cmp	r4, #255	; 0xff
 80003c0:	d1b1      	bne.n	8000326 <__aeabi_fadd+0xd6>
 80003c2:	e763      	b.n	800028c <__aeabi_fadd+0x3c>
 80003c4:	2c00      	cmp	r4, #0
 80003c6:	d047      	beq.n	8000458 <__aeabi_fadd+0x208>
 80003c8:	28ff      	cmp	r0, #255	; 0xff
 80003ca:	d069      	beq.n	80004a0 <__aeabi_fadd+0x250>
 80003cc:	2480      	movs	r4, #128	; 0x80
 80003ce:	04e4      	lsls	r4, r4, #19
 80003d0:	427a      	negs	r2, r7
 80003d2:	4325      	orrs	r5, r4
 80003d4:	2a1b      	cmp	r2, #27
 80003d6:	dd00      	ble.n	80003da <__aeabi_fadd+0x18a>
 80003d8:	e0c5      	b.n	8000566 <__aeabi_fadd+0x316>
 80003da:	002c      	movs	r4, r5
 80003dc:	2620      	movs	r6, #32
 80003de:	40d4      	lsrs	r4, r2
 80003e0:	1ab2      	subs	r2, r6, r2
 80003e2:	4095      	lsls	r5, r2
 80003e4:	1e6a      	subs	r2, r5, #1
 80003e6:	4195      	sbcs	r5, r2
 80003e8:	4325      	orrs	r5, r4
 80003ea:	1b5d      	subs	r5, r3, r5
 80003ec:	0004      	movs	r4, r0
 80003ee:	4689      	mov	r9, r1
 80003f0:	e7a5      	b.n	800033e <__aeabi_fadd+0xee>
 80003f2:	01ab      	lsls	r3, r5, #6
 80003f4:	0a5b      	lsrs	r3, r3, #9
 80003f6:	e750      	b.n	800029a <__aeabi_fadd+0x4a>
 80003f8:	2400      	movs	r4, #0
 80003fa:	2201      	movs	r2, #1
 80003fc:	464b      	mov	r3, r9
 80003fe:	401a      	ands	r2, r3
 8000400:	076b      	lsls	r3, r5, #29
 8000402:	d1ba      	bne.n	800037a <__aeabi_fadd+0x12a>
 8000404:	e742      	b.n	800028c <__aeabi_fadd+0x3c>
 8000406:	2f00      	cmp	r7, #0
 8000408:	d13b      	bne.n	8000482 <__aeabi_fadd+0x232>
 800040a:	3401      	adds	r4, #1
 800040c:	b2e0      	uxtb	r0, r4
 800040e:	2801      	cmp	r0, #1
 8000410:	dd4a      	ble.n	80004a8 <__aeabi_fadd+0x258>
 8000412:	2cff      	cmp	r4, #255	; 0xff
 8000414:	d0bd      	beq.n	8000392 <__aeabi_fadd+0x142>
 8000416:	2607      	movs	r6, #7
 8000418:	18ed      	adds	r5, r5, r3
 800041a:	086d      	lsrs	r5, r5, #1
 800041c:	402e      	ands	r6, r5
 800041e:	e7a7      	b.n	8000370 <__aeabi_fadd+0x120>
 8000420:	2307      	movs	r3, #7
 8000422:	4d57      	ldr	r5, [pc, #348]	; (8000580 <__aeabi_fadd+0x330>)
 8000424:	1a24      	subs	r4, r4, r0
 8000426:	4035      	ands	r5, r6
 8000428:	401e      	ands	r6, r3
 800042a:	e7a1      	b.n	8000370 <__aeabi_fadd+0x120>
 800042c:	2c00      	cmp	r4, #0
 800042e:	d11b      	bne.n	8000468 <__aeabi_fadd+0x218>
 8000430:	2d00      	cmp	r5, #0
 8000432:	d16e      	bne.n	8000512 <__aeabi_fadd+0x2c2>
 8000434:	2b00      	cmp	r3, #0
 8000436:	d100      	bne.n	800043a <__aeabi_fadd+0x1ea>
 8000438:	e09a      	b.n	8000570 <__aeabi_fadd+0x320>
 800043a:	000a      	movs	r2, r1
 800043c:	001d      	movs	r5, r3
 800043e:	003c      	movs	r4, r7
 8000440:	e724      	b.n	800028c <__aeabi_fadd+0x3c>
 8000442:	3f01      	subs	r7, #1
 8000444:	2f00      	cmp	r7, #0
 8000446:	d100      	bne.n	800044a <__aeabi_fadd+0x1fa>
 8000448:	e758      	b.n	80002fc <__aeabi_fadd+0xac>
 800044a:	2cff      	cmp	r4, #255	; 0xff
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x200>
 800044e:	e74a      	b.n	80002e6 <__aeabi_fadd+0x96>
 8000450:	e7a7      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000452:	1b5e      	subs	r6, r3, r5
 8000454:	4689      	mov	r9, r1
 8000456:	e776      	b.n	8000346 <__aeabi_fadd+0xf6>
 8000458:	2d00      	cmp	r5, #0
 800045a:	d11c      	bne.n	8000496 <__aeabi_fadd+0x246>
 800045c:	000a      	movs	r2, r1
 800045e:	28ff      	cmp	r0, #255	; 0xff
 8000460:	d01f      	beq.n	80004a2 <__aeabi_fadd+0x252>
 8000462:	0004      	movs	r4, r0
 8000464:	001d      	movs	r5, r3
 8000466:	e711      	b.n	800028c <__aeabi_fadd+0x3c>
 8000468:	2d00      	cmp	r5, #0
 800046a:	d15d      	bne.n	8000528 <__aeabi_fadd+0x2d8>
 800046c:	2b00      	cmp	r3, #0
 800046e:	d117      	bne.n	80004a0 <__aeabi_fadd+0x250>
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	2200      	movs	r2, #0
 8000474:	03db      	lsls	r3, r3, #15
 8000476:	26ff      	movs	r6, #255	; 0xff
 8000478:	e70f      	b.n	800029a <__aeabi_fadd+0x4a>
 800047a:	000a      	movs	r2, r1
 800047c:	26ff      	movs	r6, #255	; 0xff
 800047e:	2300      	movs	r3, #0
 8000480:	e70b      	b.n	800029a <__aeabi_fadd+0x4a>
 8000482:	2c00      	cmp	r4, #0
 8000484:	d121      	bne.n	80004ca <__aeabi_fadd+0x27a>
 8000486:	2d00      	cmp	r5, #0
 8000488:	d166      	bne.n	8000558 <__aeabi_fadd+0x308>
 800048a:	28ff      	cmp	r0, #255	; 0xff
 800048c:	d1e9      	bne.n	8000462 <__aeabi_fadd+0x212>
 800048e:	001d      	movs	r5, r3
 8000490:	e787      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000492:	2301      	movs	r3, #1
 8000494:	e752      	b.n	800033c <__aeabi_fadd+0xec>
 8000496:	1c7a      	adds	r2, r7, #1
 8000498:	d0a7      	beq.n	80003ea <__aeabi_fadd+0x19a>
 800049a:	43fa      	mvns	r2, r7
 800049c:	28ff      	cmp	r0, #255	; 0xff
 800049e:	d199      	bne.n	80003d4 <__aeabi_fadd+0x184>
 80004a0:	000a      	movs	r2, r1
 80004a2:	001d      	movs	r5, r3
 80004a4:	24ff      	movs	r4, #255	; 0xff
 80004a6:	e6f1      	b.n	800028c <__aeabi_fadd+0x3c>
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d121      	bne.n	80004f0 <__aeabi_fadd+0x2a0>
 80004ac:	2d00      	cmp	r5, #0
 80004ae:	d04f      	beq.n	8000550 <__aeabi_fadd+0x300>
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d04c      	beq.n	800054e <__aeabi_fadd+0x2fe>
 80004b4:	18ed      	adds	r5, r5, r3
 80004b6:	016b      	lsls	r3, r5, #5
 80004b8:	d59e      	bpl.n	80003f8 <__aeabi_fadd+0x1a8>
 80004ba:	4b31      	ldr	r3, [pc, #196]	; (8000580 <__aeabi_fadd+0x330>)
 80004bc:	3607      	adds	r6, #7
 80004be:	402e      	ands	r6, r5
 80004c0:	2401      	movs	r4, #1
 80004c2:	401d      	ands	r5, r3
 80004c4:	e754      	b.n	8000370 <__aeabi_fadd+0x120>
 80004c6:	2301      	movs	r3, #1
 80004c8:	e718      	b.n	80002fc <__aeabi_fadd+0xac>
 80004ca:	28ff      	cmp	r0, #255	; 0xff
 80004cc:	d0df      	beq.n	800048e <__aeabi_fadd+0x23e>
 80004ce:	2480      	movs	r4, #128	; 0x80
 80004d0:	04e4      	lsls	r4, r4, #19
 80004d2:	427f      	negs	r7, r7
 80004d4:	4325      	orrs	r5, r4
 80004d6:	2f1b      	cmp	r7, #27
 80004d8:	dc4d      	bgt.n	8000576 <__aeabi_fadd+0x326>
 80004da:	2620      	movs	r6, #32
 80004dc:	1bf6      	subs	r6, r6, r7
 80004de:	002c      	movs	r4, r5
 80004e0:	40b5      	lsls	r5, r6
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	1e6a      	subs	r2, r5, #1
 80004e6:	4195      	sbcs	r5, r2
 80004e8:	4325      	orrs	r5, r4
 80004ea:	18ed      	adds	r5, r5, r3
 80004ec:	0004      	movs	r4, r0
 80004ee:	e706      	b.n	80002fe <__aeabi_fadd+0xae>
 80004f0:	2d00      	cmp	r5, #0
 80004f2:	d0cc      	beq.n	800048e <__aeabi_fadd+0x23e>
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x2aa>
 80004f8:	e753      	b.n	80003a2 <__aeabi_fadd+0x152>
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	4660      	mov	r0, ip
 80004fe:	03c9      	lsls	r1, r1, #15
 8000500:	4208      	tst	r0, r1
 8000502:	d003      	beq.n	800050c <__aeabi_fadd+0x2bc>
 8000504:	4640      	mov	r0, r8
 8000506:	4208      	tst	r0, r1
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x2bc>
 800050a:	001d      	movs	r5, r3
 800050c:	2101      	movs	r1, #1
 800050e:	4011      	ands	r1, r2
 8000510:	e747      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d100      	bne.n	8000518 <__aeabi_fadd+0x2c8>
 8000516:	e6b9      	b.n	800028c <__aeabi_fadd+0x3c>
 8000518:	1aea      	subs	r2, r5, r3
 800051a:	0150      	lsls	r0, r2, #5
 800051c:	d525      	bpl.n	800056a <__aeabi_fadd+0x31a>
 800051e:	2607      	movs	r6, #7
 8000520:	1b5d      	subs	r5, r3, r5
 8000522:	402e      	ands	r6, r5
 8000524:	4689      	mov	r9, r1
 8000526:	e723      	b.n	8000370 <__aeabi_fadd+0x120>
 8000528:	24ff      	movs	r4, #255	; 0xff
 800052a:	2b00      	cmp	r3, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_fadd+0x2e0>
 800052e:	e6ad      	b.n	800028c <__aeabi_fadd+0x3c>
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	4660      	mov	r0, ip
 8000534:	03d2      	lsls	r2, r2, #15
 8000536:	4210      	tst	r0, r2
 8000538:	d004      	beq.n	8000544 <__aeabi_fadd+0x2f4>
 800053a:	4640      	mov	r0, r8
 800053c:	4210      	tst	r0, r2
 800053e:	d101      	bne.n	8000544 <__aeabi_fadd+0x2f4>
 8000540:	001d      	movs	r5, r3
 8000542:	4689      	mov	r9, r1
 8000544:	2201      	movs	r2, #1
 8000546:	464b      	mov	r3, r9
 8000548:	24ff      	movs	r4, #255	; 0xff
 800054a:	401a      	ands	r2, r3
 800054c:	e69e      	b.n	800028c <__aeabi_fadd+0x3c>
 800054e:	002b      	movs	r3, r5
 8000550:	08dd      	lsrs	r5, r3, #3
 8000552:	000a      	movs	r2, r1
 8000554:	2400      	movs	r4, #0
 8000556:	e69d      	b.n	8000294 <__aeabi_fadd+0x44>
 8000558:	1c7a      	adds	r2, r7, #1
 800055a:	d0c6      	beq.n	80004ea <__aeabi_fadd+0x29a>
 800055c:	43ff      	mvns	r7, r7
 800055e:	28ff      	cmp	r0, #255	; 0xff
 8000560:	d1b9      	bne.n	80004d6 <__aeabi_fadd+0x286>
 8000562:	001d      	movs	r5, r3
 8000564:	e71d      	b.n	80003a2 <__aeabi_fadd+0x152>
 8000566:	2501      	movs	r5, #1
 8000568:	e73f      	b.n	80003ea <__aeabi_fadd+0x19a>
 800056a:	1e15      	subs	r5, r2, #0
 800056c:	d000      	beq.n	8000570 <__aeabi_fadd+0x320>
 800056e:	e744      	b.n	80003fa <__aeabi_fadd+0x1aa>
 8000570:	2200      	movs	r2, #0
 8000572:	2300      	movs	r3, #0
 8000574:	e691      	b.n	800029a <__aeabi_fadd+0x4a>
 8000576:	2501      	movs	r5, #1
 8000578:	e7b7      	b.n	80004ea <__aeabi_fadd+0x29a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	7dffffff 	.word	0x7dffffff
 8000580:	fbffffff 	.word	0xfbffffff

08000584 <__aeabi_fmul>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464e      	mov	r6, r9
 8000588:	4657      	mov	r7, sl
 800058a:	4645      	mov	r5, r8
 800058c:	46de      	mov	lr, fp
 800058e:	b5e0      	push	{r5, r6, r7, lr}
 8000590:	0243      	lsls	r3, r0, #9
 8000592:	0a5b      	lsrs	r3, r3, #9
 8000594:	0045      	lsls	r5, r0, #1
 8000596:	b083      	sub	sp, #12
 8000598:	1c0f      	adds	r7, r1, #0
 800059a:	4699      	mov	r9, r3
 800059c:	0e2d      	lsrs	r5, r5, #24
 800059e:	0fc6      	lsrs	r6, r0, #31
 80005a0:	2d00      	cmp	r5, #0
 80005a2:	d057      	beq.n	8000654 <__aeabi_fmul+0xd0>
 80005a4:	2dff      	cmp	r5, #255	; 0xff
 80005a6:	d024      	beq.n	80005f2 <__aeabi_fmul+0x6e>
 80005a8:	2080      	movs	r0, #128	; 0x80
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	04c0      	lsls	r0, r0, #19
 80005ae:	4318      	orrs	r0, r3
 80005b0:	2300      	movs	r3, #0
 80005b2:	4681      	mov	r9, r0
 80005b4:	469a      	mov	sl, r3
 80005b6:	469b      	mov	fp, r3
 80005b8:	3d7f      	subs	r5, #127	; 0x7f
 80005ba:	027c      	lsls	r4, r7, #9
 80005bc:	007a      	lsls	r2, r7, #1
 80005be:	0ffb      	lsrs	r3, r7, #31
 80005c0:	0a64      	lsrs	r4, r4, #9
 80005c2:	0e12      	lsrs	r2, r2, #24
 80005c4:	4698      	mov	r8, r3
 80005c6:	d023      	beq.n	8000610 <__aeabi_fmul+0x8c>
 80005c8:	2aff      	cmp	r2, #255	; 0xff
 80005ca:	d04b      	beq.n	8000664 <__aeabi_fmul+0xe0>
 80005cc:	00e3      	lsls	r3, r4, #3
 80005ce:	2480      	movs	r4, #128	; 0x80
 80005d0:	2000      	movs	r0, #0
 80005d2:	04e4      	lsls	r4, r4, #19
 80005d4:	3a7f      	subs	r2, #127	; 0x7f
 80005d6:	431c      	orrs	r4, r3
 80005d8:	18ad      	adds	r5, r5, r2
 80005da:	1c6b      	adds	r3, r5, #1
 80005dc:	4647      	mov	r7, r8
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	4653      	mov	r3, sl
 80005e2:	4077      	eors	r7, r6
 80005e4:	003a      	movs	r2, r7
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d848      	bhi.n	800067c <__aeabi_fmul+0xf8>
 80005ea:	497d      	ldr	r1, [pc, #500]	; (80007e0 <__aeabi_fmul+0x25c>)
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	58cb      	ldr	r3, [r1, r3]
 80005f0:	469f      	mov	pc, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d000      	beq.n	80005f8 <__aeabi_fmul+0x74>
 80005f6:	e085      	b.n	8000704 <__aeabi_fmul+0x180>
 80005f8:	3308      	adds	r3, #8
 80005fa:	469a      	mov	sl, r3
 80005fc:	3b06      	subs	r3, #6
 80005fe:	469b      	mov	fp, r3
 8000600:	027c      	lsls	r4, r7, #9
 8000602:	007a      	lsls	r2, r7, #1
 8000604:	0ffb      	lsrs	r3, r7, #31
 8000606:	25ff      	movs	r5, #255	; 0xff
 8000608:	0a64      	lsrs	r4, r4, #9
 800060a:	0e12      	lsrs	r2, r2, #24
 800060c:	4698      	mov	r8, r3
 800060e:	d1db      	bne.n	80005c8 <__aeabi_fmul+0x44>
 8000610:	2c00      	cmp	r4, #0
 8000612:	d000      	beq.n	8000616 <__aeabi_fmul+0x92>
 8000614:	e090      	b.n	8000738 <__aeabi_fmul+0x1b4>
 8000616:	4652      	mov	r2, sl
 8000618:	2301      	movs	r3, #1
 800061a:	431a      	orrs	r2, r3
 800061c:	4692      	mov	sl, r2
 800061e:	2001      	movs	r0, #1
 8000620:	e7db      	b.n	80005da <__aeabi_fmul+0x56>
 8000622:	464c      	mov	r4, r9
 8000624:	4658      	mov	r0, fp
 8000626:	0017      	movs	r7, r2
 8000628:	2802      	cmp	r0, #2
 800062a:	d024      	beq.n	8000676 <__aeabi_fmul+0xf2>
 800062c:	2803      	cmp	r0, #3
 800062e:	d100      	bne.n	8000632 <__aeabi_fmul+0xae>
 8000630:	e0cf      	b.n	80007d2 <__aeabi_fmul+0x24e>
 8000632:	2200      	movs	r2, #0
 8000634:	2300      	movs	r3, #0
 8000636:	2801      	cmp	r0, #1
 8000638:	d14d      	bne.n	80006d6 <__aeabi_fmul+0x152>
 800063a:	0258      	lsls	r0, r3, #9
 800063c:	05d2      	lsls	r2, r2, #23
 800063e:	0a40      	lsrs	r0, r0, #9
 8000640:	07ff      	lsls	r7, r7, #31
 8000642:	4310      	orrs	r0, r2
 8000644:	4338      	orrs	r0, r7
 8000646:	b003      	add	sp, #12
 8000648:	bc3c      	pop	{r2, r3, r4, r5}
 800064a:	4690      	mov	r8, r2
 800064c:	4699      	mov	r9, r3
 800064e:	46a2      	mov	sl, r4
 8000650:	46ab      	mov	fp, r5
 8000652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000654:	2b00      	cmp	r3, #0
 8000656:	d15b      	bne.n	8000710 <__aeabi_fmul+0x18c>
 8000658:	2304      	movs	r3, #4
 800065a:	469a      	mov	sl, r3
 800065c:	3b03      	subs	r3, #3
 800065e:	2500      	movs	r5, #0
 8000660:	469b      	mov	fp, r3
 8000662:	e7aa      	b.n	80005ba <__aeabi_fmul+0x36>
 8000664:	35ff      	adds	r5, #255	; 0xff
 8000666:	2c00      	cmp	r4, #0
 8000668:	d160      	bne.n	800072c <__aeabi_fmul+0x1a8>
 800066a:	4652      	mov	r2, sl
 800066c:	2302      	movs	r3, #2
 800066e:	431a      	orrs	r2, r3
 8000670:	4692      	mov	sl, r2
 8000672:	2002      	movs	r0, #2
 8000674:	e7b1      	b.n	80005da <__aeabi_fmul+0x56>
 8000676:	22ff      	movs	r2, #255	; 0xff
 8000678:	2300      	movs	r3, #0
 800067a:	e7de      	b.n	800063a <__aeabi_fmul+0xb6>
 800067c:	464b      	mov	r3, r9
 800067e:	0c1b      	lsrs	r3, r3, #16
 8000680:	469c      	mov	ip, r3
 8000682:	464b      	mov	r3, r9
 8000684:	0426      	lsls	r6, r4, #16
 8000686:	0c36      	lsrs	r6, r6, #16
 8000688:	0418      	lsls	r0, r3, #16
 800068a:	4661      	mov	r1, ip
 800068c:	0033      	movs	r3, r6
 800068e:	0c22      	lsrs	r2, r4, #16
 8000690:	4664      	mov	r4, ip
 8000692:	0c00      	lsrs	r0, r0, #16
 8000694:	4343      	muls	r3, r0
 8000696:	434e      	muls	r6, r1
 8000698:	4350      	muls	r0, r2
 800069a:	4354      	muls	r4, r2
 800069c:	1980      	adds	r0, r0, r6
 800069e:	0c1a      	lsrs	r2, r3, #16
 80006a0:	1812      	adds	r2, r2, r0
 80006a2:	4296      	cmp	r6, r2
 80006a4:	d903      	bls.n	80006ae <__aeabi_fmul+0x12a>
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	0249      	lsls	r1, r1, #9
 80006aa:	468c      	mov	ip, r1
 80006ac:	4464      	add	r4, ip
 80006ae:	041b      	lsls	r3, r3, #16
 80006b0:	0c1b      	lsrs	r3, r3, #16
 80006b2:	0410      	lsls	r0, r2, #16
 80006b4:	18c0      	adds	r0, r0, r3
 80006b6:	0183      	lsls	r3, r0, #6
 80006b8:	1e5e      	subs	r6, r3, #1
 80006ba:	41b3      	sbcs	r3, r6
 80006bc:	0e80      	lsrs	r0, r0, #26
 80006be:	4318      	orrs	r0, r3
 80006c0:	0c13      	lsrs	r3, r2, #16
 80006c2:	191b      	adds	r3, r3, r4
 80006c4:	019b      	lsls	r3, r3, #6
 80006c6:	4303      	orrs	r3, r0
 80006c8:	001c      	movs	r4, r3
 80006ca:	0123      	lsls	r3, r4, #4
 80006cc:	d579      	bpl.n	80007c2 <__aeabi_fmul+0x23e>
 80006ce:	2301      	movs	r3, #1
 80006d0:	0862      	lsrs	r2, r4, #1
 80006d2:	401c      	ands	r4, r3
 80006d4:	4314      	orrs	r4, r2
 80006d6:	9a01      	ldr	r2, [sp, #4]
 80006d8:	327f      	adds	r2, #127	; 0x7f
 80006da:	2a00      	cmp	r2, #0
 80006dc:	dd4d      	ble.n	800077a <__aeabi_fmul+0x1f6>
 80006de:	0763      	lsls	r3, r4, #29
 80006e0:	d004      	beq.n	80006ec <__aeabi_fmul+0x168>
 80006e2:	230f      	movs	r3, #15
 80006e4:	4023      	ands	r3, r4
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d000      	beq.n	80006ec <__aeabi_fmul+0x168>
 80006ea:	3404      	adds	r4, #4
 80006ec:	0123      	lsls	r3, r4, #4
 80006ee:	d503      	bpl.n	80006f8 <__aeabi_fmul+0x174>
 80006f0:	4b3c      	ldr	r3, [pc, #240]	; (80007e4 <__aeabi_fmul+0x260>)
 80006f2:	9a01      	ldr	r2, [sp, #4]
 80006f4:	401c      	ands	r4, r3
 80006f6:	3280      	adds	r2, #128	; 0x80
 80006f8:	2afe      	cmp	r2, #254	; 0xfe
 80006fa:	dcbc      	bgt.n	8000676 <__aeabi_fmul+0xf2>
 80006fc:	01a3      	lsls	r3, r4, #6
 80006fe:	0a5b      	lsrs	r3, r3, #9
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	e79a      	b.n	800063a <__aeabi_fmul+0xb6>
 8000704:	230c      	movs	r3, #12
 8000706:	469a      	mov	sl, r3
 8000708:	3b09      	subs	r3, #9
 800070a:	25ff      	movs	r5, #255	; 0xff
 800070c:	469b      	mov	fp, r3
 800070e:	e754      	b.n	80005ba <__aeabi_fmul+0x36>
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fe91 	bl	8001438 <__clzsi2>
 8000716:	464a      	mov	r2, r9
 8000718:	1f43      	subs	r3, r0, #5
 800071a:	2576      	movs	r5, #118	; 0x76
 800071c:	409a      	lsls	r2, r3
 800071e:	2300      	movs	r3, #0
 8000720:	426d      	negs	r5, r5
 8000722:	4691      	mov	r9, r2
 8000724:	1a2d      	subs	r5, r5, r0
 8000726:	469a      	mov	sl, r3
 8000728:	469b      	mov	fp, r3
 800072a:	e746      	b.n	80005ba <__aeabi_fmul+0x36>
 800072c:	4652      	mov	r2, sl
 800072e:	2303      	movs	r3, #3
 8000730:	431a      	orrs	r2, r3
 8000732:	4692      	mov	sl, r2
 8000734:	2003      	movs	r0, #3
 8000736:	e750      	b.n	80005da <__aeabi_fmul+0x56>
 8000738:	0020      	movs	r0, r4
 800073a:	f000 fe7d 	bl	8001438 <__clzsi2>
 800073e:	1f43      	subs	r3, r0, #5
 8000740:	1a2d      	subs	r5, r5, r0
 8000742:	409c      	lsls	r4, r3
 8000744:	3d76      	subs	r5, #118	; 0x76
 8000746:	2000      	movs	r0, #0
 8000748:	e747      	b.n	80005da <__aeabi_fmul+0x56>
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	2700      	movs	r7, #0
 800074e:	03db      	lsls	r3, r3, #15
 8000750:	22ff      	movs	r2, #255	; 0xff
 8000752:	e772      	b.n	800063a <__aeabi_fmul+0xb6>
 8000754:	4642      	mov	r2, r8
 8000756:	e766      	b.n	8000626 <__aeabi_fmul+0xa2>
 8000758:	464c      	mov	r4, r9
 800075a:	0032      	movs	r2, r6
 800075c:	4658      	mov	r0, fp
 800075e:	e762      	b.n	8000626 <__aeabi_fmul+0xa2>
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	464a      	mov	r2, r9
 8000764:	03db      	lsls	r3, r3, #15
 8000766:	421a      	tst	r2, r3
 8000768:	d022      	beq.n	80007b0 <__aeabi_fmul+0x22c>
 800076a:	421c      	tst	r4, r3
 800076c:	d120      	bne.n	80007b0 <__aeabi_fmul+0x22c>
 800076e:	4323      	orrs	r3, r4
 8000770:	025b      	lsls	r3, r3, #9
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	4647      	mov	r7, r8
 8000776:	22ff      	movs	r2, #255	; 0xff
 8000778:	e75f      	b.n	800063a <__aeabi_fmul+0xb6>
 800077a:	2301      	movs	r3, #1
 800077c:	1a9a      	subs	r2, r3, r2
 800077e:	2a1b      	cmp	r2, #27
 8000780:	dc21      	bgt.n	80007c6 <__aeabi_fmul+0x242>
 8000782:	0023      	movs	r3, r4
 8000784:	9901      	ldr	r1, [sp, #4]
 8000786:	40d3      	lsrs	r3, r2
 8000788:	319e      	adds	r1, #158	; 0x9e
 800078a:	408c      	lsls	r4, r1
 800078c:	001a      	movs	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	1e5c      	subs	r4, r3, #1
 8000792:	41a3      	sbcs	r3, r4
 8000794:	4313      	orrs	r3, r2
 8000796:	075a      	lsls	r2, r3, #29
 8000798:	d004      	beq.n	80007a4 <__aeabi_fmul+0x220>
 800079a:	220f      	movs	r2, #15
 800079c:	401a      	ands	r2, r3
 800079e:	2a04      	cmp	r2, #4
 80007a0:	d000      	beq.n	80007a4 <__aeabi_fmul+0x220>
 80007a2:	3304      	adds	r3, #4
 80007a4:	015a      	lsls	r2, r3, #5
 80007a6:	d411      	bmi.n	80007cc <__aeabi_fmul+0x248>
 80007a8:	019b      	lsls	r3, r3, #6
 80007aa:	0a5b      	lsrs	r3, r3, #9
 80007ac:	2200      	movs	r2, #0
 80007ae:	e744      	b.n	800063a <__aeabi_fmul+0xb6>
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	464a      	mov	r2, r9
 80007b4:	03db      	lsls	r3, r3, #15
 80007b6:	4313      	orrs	r3, r2
 80007b8:	025b      	lsls	r3, r3, #9
 80007ba:	0a5b      	lsrs	r3, r3, #9
 80007bc:	0037      	movs	r7, r6
 80007be:	22ff      	movs	r2, #255	; 0xff
 80007c0:	e73b      	b.n	800063a <__aeabi_fmul+0xb6>
 80007c2:	9501      	str	r5, [sp, #4]
 80007c4:	e787      	b.n	80006d6 <__aeabi_fmul+0x152>
 80007c6:	2200      	movs	r2, #0
 80007c8:	2300      	movs	r3, #0
 80007ca:	e736      	b.n	800063a <__aeabi_fmul+0xb6>
 80007cc:	2201      	movs	r2, #1
 80007ce:	2300      	movs	r3, #0
 80007d0:	e733      	b.n	800063a <__aeabi_fmul+0xb6>
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	03db      	lsls	r3, r3, #15
 80007d6:	4323      	orrs	r3, r4
 80007d8:	025b      	lsls	r3, r3, #9
 80007da:	0a5b      	lsrs	r3, r3, #9
 80007dc:	22ff      	movs	r2, #255	; 0xff
 80007de:	e72c      	b.n	800063a <__aeabi_fmul+0xb6>
 80007e0:	08004554 	.word	0x08004554
 80007e4:	f7ffffff 	.word	0xf7ffffff

080007e8 <__aeabi_fsub>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	4647      	mov	r7, r8
 80007ec:	46ce      	mov	lr, r9
 80007ee:	0044      	lsls	r4, r0, #1
 80007f0:	0fc2      	lsrs	r2, r0, #31
 80007f2:	b580      	push	{r7, lr}
 80007f4:	0247      	lsls	r7, r0, #9
 80007f6:	0248      	lsls	r0, r1, #9
 80007f8:	0a40      	lsrs	r0, r0, #9
 80007fa:	4684      	mov	ip, r0
 80007fc:	4666      	mov	r6, ip
 80007fe:	0048      	lsls	r0, r1, #1
 8000800:	0a7f      	lsrs	r7, r7, #9
 8000802:	0e24      	lsrs	r4, r4, #24
 8000804:	00f6      	lsls	r6, r6, #3
 8000806:	0025      	movs	r5, r4
 8000808:	4690      	mov	r8, r2
 800080a:	00fb      	lsls	r3, r7, #3
 800080c:	0e00      	lsrs	r0, r0, #24
 800080e:	0fc9      	lsrs	r1, r1, #31
 8000810:	46b1      	mov	r9, r6
 8000812:	28ff      	cmp	r0, #255	; 0xff
 8000814:	d100      	bne.n	8000818 <__aeabi_fsub+0x30>
 8000816:	e085      	b.n	8000924 <__aeabi_fsub+0x13c>
 8000818:	2601      	movs	r6, #1
 800081a:	4071      	eors	r1, r6
 800081c:	1a26      	subs	r6, r4, r0
 800081e:	4291      	cmp	r1, r2
 8000820:	d057      	beq.n	80008d2 <__aeabi_fsub+0xea>
 8000822:	2e00      	cmp	r6, #0
 8000824:	dd43      	ble.n	80008ae <__aeabi_fsub+0xc6>
 8000826:	2800      	cmp	r0, #0
 8000828:	d000      	beq.n	800082c <__aeabi_fsub+0x44>
 800082a:	e07f      	b.n	800092c <__aeabi_fsub+0x144>
 800082c:	4649      	mov	r1, r9
 800082e:	2900      	cmp	r1, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_fsub+0x4c>
 8000832:	e0aa      	b.n	800098a <__aeabi_fsub+0x1a2>
 8000834:	3e01      	subs	r6, #1
 8000836:	2e00      	cmp	r6, #0
 8000838:	d000      	beq.n	800083c <__aeabi_fsub+0x54>
 800083a:	e0f7      	b.n	8000a2c <__aeabi_fsub+0x244>
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	015a      	lsls	r2, r3, #5
 8000840:	d400      	bmi.n	8000844 <__aeabi_fsub+0x5c>
 8000842:	e08b      	b.n	800095c <__aeabi_fsub+0x174>
 8000844:	019b      	lsls	r3, r3, #6
 8000846:	099c      	lsrs	r4, r3, #6
 8000848:	0020      	movs	r0, r4
 800084a:	f000 fdf5 	bl	8001438 <__clzsi2>
 800084e:	3805      	subs	r0, #5
 8000850:	4084      	lsls	r4, r0
 8000852:	4285      	cmp	r5, r0
 8000854:	dd00      	ble.n	8000858 <__aeabi_fsub+0x70>
 8000856:	e0d3      	b.n	8000a00 <__aeabi_fsub+0x218>
 8000858:	1b45      	subs	r5, r0, r5
 800085a:	0023      	movs	r3, r4
 800085c:	2020      	movs	r0, #32
 800085e:	3501      	adds	r5, #1
 8000860:	40eb      	lsrs	r3, r5
 8000862:	1b45      	subs	r5, r0, r5
 8000864:	40ac      	lsls	r4, r5
 8000866:	1e62      	subs	r2, r4, #1
 8000868:	4194      	sbcs	r4, r2
 800086a:	4323      	orrs	r3, r4
 800086c:	2407      	movs	r4, #7
 800086e:	2500      	movs	r5, #0
 8000870:	401c      	ands	r4, r3
 8000872:	2201      	movs	r2, #1
 8000874:	4641      	mov	r1, r8
 8000876:	400a      	ands	r2, r1
 8000878:	2c00      	cmp	r4, #0
 800087a:	d004      	beq.n	8000886 <__aeabi_fsub+0x9e>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fsub+0x9e>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d400      	bmi.n	800088c <__aeabi_fsub+0xa4>
 800088a:	e080      	b.n	800098e <__aeabi_fsub+0x1a6>
 800088c:	3501      	adds	r5, #1
 800088e:	b2ec      	uxtb	r4, r5
 8000890:	2dff      	cmp	r5, #255	; 0xff
 8000892:	d000      	beq.n	8000896 <__aeabi_fsub+0xae>
 8000894:	e0a3      	b.n	80009de <__aeabi_fsub+0x1f6>
 8000896:	24ff      	movs	r4, #255	; 0xff
 8000898:	2300      	movs	r3, #0
 800089a:	025b      	lsls	r3, r3, #9
 800089c:	05e4      	lsls	r4, r4, #23
 800089e:	0a58      	lsrs	r0, r3, #9
 80008a0:	07d2      	lsls	r2, r2, #31
 80008a2:	4320      	orrs	r0, r4
 80008a4:	4310      	orrs	r0, r2
 80008a6:	bc0c      	pop	{r2, r3}
 80008a8:	4690      	mov	r8, r2
 80008aa:	4699      	mov	r9, r3
 80008ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	d174      	bne.n	800099c <__aeabi_fsub+0x1b4>
 80008b2:	1c60      	adds	r0, r4, #1
 80008b4:	b2c0      	uxtb	r0, r0
 80008b6:	2801      	cmp	r0, #1
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_fsub+0xd4>
 80008ba:	e0a7      	b.n	8000a0c <__aeabi_fsub+0x224>
 80008bc:	464a      	mov	r2, r9
 80008be:	1a9c      	subs	r4, r3, r2
 80008c0:	0162      	lsls	r2, r4, #5
 80008c2:	d500      	bpl.n	80008c6 <__aeabi_fsub+0xde>
 80008c4:	e0b6      	b.n	8000a34 <__aeabi_fsub+0x24c>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d1be      	bne.n	8000848 <__aeabi_fsub+0x60>
 80008ca:	2200      	movs	r2, #0
 80008cc:	2400      	movs	r4, #0
 80008ce:	2300      	movs	r3, #0
 80008d0:	e7e3      	b.n	800089a <__aeabi_fsub+0xb2>
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	dc00      	bgt.n	80008d8 <__aeabi_fsub+0xf0>
 80008d6:	e085      	b.n	80009e4 <__aeabi_fsub+0x1fc>
 80008d8:	2800      	cmp	r0, #0
 80008da:	d046      	beq.n	800096a <__aeabi_fsub+0x182>
 80008dc:	2cff      	cmp	r4, #255	; 0xff
 80008de:	d049      	beq.n	8000974 <__aeabi_fsub+0x18c>
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	4648      	mov	r0, r9
 80008e4:	04d2      	lsls	r2, r2, #19
 80008e6:	4310      	orrs	r0, r2
 80008e8:	4681      	mov	r9, r0
 80008ea:	2201      	movs	r2, #1
 80008ec:	2e1b      	cmp	r6, #27
 80008ee:	dc09      	bgt.n	8000904 <__aeabi_fsub+0x11c>
 80008f0:	2020      	movs	r0, #32
 80008f2:	464c      	mov	r4, r9
 80008f4:	1b80      	subs	r0, r0, r6
 80008f6:	4084      	lsls	r4, r0
 80008f8:	464a      	mov	r2, r9
 80008fa:	0020      	movs	r0, r4
 80008fc:	40f2      	lsrs	r2, r6
 80008fe:	1e44      	subs	r4, r0, #1
 8000900:	41a0      	sbcs	r0, r4
 8000902:	4302      	orrs	r2, r0
 8000904:	189b      	adds	r3, r3, r2
 8000906:	015a      	lsls	r2, r3, #5
 8000908:	d528      	bpl.n	800095c <__aeabi_fsub+0x174>
 800090a:	3501      	adds	r5, #1
 800090c:	2dff      	cmp	r5, #255	; 0xff
 800090e:	d100      	bne.n	8000912 <__aeabi_fsub+0x12a>
 8000910:	e0a8      	b.n	8000a64 <__aeabi_fsub+0x27c>
 8000912:	2201      	movs	r2, #1
 8000914:	2407      	movs	r4, #7
 8000916:	4994      	ldr	r1, [pc, #592]	; (8000b68 <__aeabi_fsub+0x380>)
 8000918:	401a      	ands	r2, r3
 800091a:	085b      	lsrs	r3, r3, #1
 800091c:	400b      	ands	r3, r1
 800091e:	4313      	orrs	r3, r2
 8000920:	401c      	ands	r4, r3
 8000922:	e7a6      	b.n	8000872 <__aeabi_fsub+0x8a>
 8000924:	2e00      	cmp	r6, #0
 8000926:	d000      	beq.n	800092a <__aeabi_fsub+0x142>
 8000928:	e778      	b.n	800081c <__aeabi_fsub+0x34>
 800092a:	e775      	b.n	8000818 <__aeabi_fsub+0x30>
 800092c:	2cff      	cmp	r4, #255	; 0xff
 800092e:	d054      	beq.n	80009da <__aeabi_fsub+0x1f2>
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	4649      	mov	r1, r9
 8000934:	04d2      	lsls	r2, r2, #19
 8000936:	4311      	orrs	r1, r2
 8000938:	4689      	mov	r9, r1
 800093a:	2201      	movs	r2, #1
 800093c:	2e1b      	cmp	r6, #27
 800093e:	dc09      	bgt.n	8000954 <__aeabi_fsub+0x16c>
 8000940:	2120      	movs	r1, #32
 8000942:	4648      	mov	r0, r9
 8000944:	1b89      	subs	r1, r1, r6
 8000946:	4088      	lsls	r0, r1
 8000948:	464a      	mov	r2, r9
 800094a:	0001      	movs	r1, r0
 800094c:	40f2      	lsrs	r2, r6
 800094e:	1e48      	subs	r0, r1, #1
 8000950:	4181      	sbcs	r1, r0
 8000952:	430a      	orrs	r2, r1
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	015a      	lsls	r2, r3, #5
 8000958:	d500      	bpl.n	800095c <__aeabi_fsub+0x174>
 800095a:	e773      	b.n	8000844 <__aeabi_fsub+0x5c>
 800095c:	2201      	movs	r2, #1
 800095e:	4641      	mov	r1, r8
 8000960:	400a      	ands	r2, r1
 8000962:	0759      	lsls	r1, r3, #29
 8000964:	d000      	beq.n	8000968 <__aeabi_fsub+0x180>
 8000966:	e789      	b.n	800087c <__aeabi_fsub+0x94>
 8000968:	e011      	b.n	800098e <__aeabi_fsub+0x1a6>
 800096a:	4648      	mov	r0, r9
 800096c:	2800      	cmp	r0, #0
 800096e:	d158      	bne.n	8000a22 <__aeabi_fsub+0x23a>
 8000970:	2cff      	cmp	r4, #255	; 0xff
 8000972:	d10c      	bne.n	800098e <__aeabi_fsub+0x1a6>
 8000974:	08db      	lsrs	r3, r3, #3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d100      	bne.n	800097c <__aeabi_fsub+0x194>
 800097a:	e78c      	b.n	8000896 <__aeabi_fsub+0xae>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	03c0      	lsls	r0, r0, #15
 8000980:	4303      	orrs	r3, r0
 8000982:	025b      	lsls	r3, r3, #9
 8000984:	0a5b      	lsrs	r3, r3, #9
 8000986:	24ff      	movs	r4, #255	; 0xff
 8000988:	e787      	b.n	800089a <__aeabi_fsub+0xb2>
 800098a:	2cff      	cmp	r4, #255	; 0xff
 800098c:	d025      	beq.n	80009da <__aeabi_fsub+0x1f2>
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	2dff      	cmp	r5, #255	; 0xff
 8000992:	d0f0      	beq.n	8000976 <__aeabi_fsub+0x18e>
 8000994:	025b      	lsls	r3, r3, #9
 8000996:	0a5b      	lsrs	r3, r3, #9
 8000998:	b2ec      	uxtb	r4, r5
 800099a:	e77e      	b.n	800089a <__aeabi_fsub+0xb2>
 800099c:	2c00      	cmp	r4, #0
 800099e:	d04d      	beq.n	8000a3c <__aeabi_fsub+0x254>
 80009a0:	28ff      	cmp	r0, #255	; 0xff
 80009a2:	d018      	beq.n	80009d6 <__aeabi_fsub+0x1ee>
 80009a4:	2480      	movs	r4, #128	; 0x80
 80009a6:	04e4      	lsls	r4, r4, #19
 80009a8:	4272      	negs	r2, r6
 80009aa:	4323      	orrs	r3, r4
 80009ac:	2a1b      	cmp	r2, #27
 80009ae:	dd00      	ble.n	80009b2 <__aeabi_fsub+0x1ca>
 80009b0:	e0c4      	b.n	8000b3c <__aeabi_fsub+0x354>
 80009b2:	001c      	movs	r4, r3
 80009b4:	2520      	movs	r5, #32
 80009b6:	40d4      	lsrs	r4, r2
 80009b8:	1aaa      	subs	r2, r5, r2
 80009ba:	4093      	lsls	r3, r2
 80009bc:	1e5a      	subs	r2, r3, #1
 80009be:	4193      	sbcs	r3, r2
 80009c0:	4323      	orrs	r3, r4
 80009c2:	464a      	mov	r2, r9
 80009c4:	0005      	movs	r5, r0
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	4688      	mov	r8, r1
 80009ca:	e738      	b.n	800083e <__aeabi_fsub+0x56>
 80009cc:	1c72      	adds	r2, r6, #1
 80009ce:	d0f8      	beq.n	80009c2 <__aeabi_fsub+0x1da>
 80009d0:	43f2      	mvns	r2, r6
 80009d2:	28ff      	cmp	r0, #255	; 0xff
 80009d4:	d1ea      	bne.n	80009ac <__aeabi_fsub+0x1c4>
 80009d6:	000a      	movs	r2, r1
 80009d8:	464b      	mov	r3, r9
 80009da:	25ff      	movs	r5, #255	; 0xff
 80009dc:	e7d7      	b.n	800098e <__aeabi_fsub+0x1a6>
 80009de:	019b      	lsls	r3, r3, #6
 80009e0:	0a5b      	lsrs	r3, r3, #9
 80009e2:	e75a      	b.n	800089a <__aeabi_fsub+0xb2>
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	d141      	bne.n	8000a6c <__aeabi_fsub+0x284>
 80009e8:	1c65      	adds	r5, r4, #1
 80009ea:	b2e9      	uxtb	r1, r5
 80009ec:	2901      	cmp	r1, #1
 80009ee:	dd45      	ble.n	8000a7c <__aeabi_fsub+0x294>
 80009f0:	2dff      	cmp	r5, #255	; 0xff
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fsub+0x20e>
 80009f4:	e74f      	b.n	8000896 <__aeabi_fsub+0xae>
 80009f6:	2407      	movs	r4, #7
 80009f8:	444b      	add	r3, r9
 80009fa:	085b      	lsrs	r3, r3, #1
 80009fc:	401c      	ands	r4, r3
 80009fe:	e738      	b.n	8000872 <__aeabi_fsub+0x8a>
 8000a00:	2207      	movs	r2, #7
 8000a02:	4b5a      	ldr	r3, [pc, #360]	; (8000b6c <__aeabi_fsub+0x384>)
 8000a04:	1a2d      	subs	r5, r5, r0
 8000a06:	4023      	ands	r3, r4
 8000a08:	4014      	ands	r4, r2
 8000a0a:	e732      	b.n	8000872 <__aeabi_fsub+0x8a>
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d11d      	bne.n	8000a4c <__aeabi_fsub+0x264>
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d17a      	bne.n	8000b0a <__aeabi_fsub+0x322>
 8000a14:	464b      	mov	r3, r9
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fsub+0x234>
 8000a1a:	e091      	b.n	8000b40 <__aeabi_fsub+0x358>
 8000a1c:	000a      	movs	r2, r1
 8000a1e:	2500      	movs	r5, #0
 8000a20:	e7b5      	b.n	800098e <__aeabi_fsub+0x1a6>
 8000a22:	3e01      	subs	r6, #1
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d119      	bne.n	8000a5c <__aeabi_fsub+0x274>
 8000a28:	444b      	add	r3, r9
 8000a2a:	e76c      	b.n	8000906 <__aeabi_fsub+0x11e>
 8000a2c:	2cff      	cmp	r4, #255	; 0xff
 8000a2e:	d184      	bne.n	800093a <__aeabi_fsub+0x152>
 8000a30:	25ff      	movs	r5, #255	; 0xff
 8000a32:	e7ac      	b.n	800098e <__aeabi_fsub+0x1a6>
 8000a34:	464a      	mov	r2, r9
 8000a36:	4688      	mov	r8, r1
 8000a38:	1ad4      	subs	r4, r2, r3
 8000a3a:	e705      	b.n	8000848 <__aeabi_fsub+0x60>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1c5      	bne.n	80009cc <__aeabi_fsub+0x1e4>
 8000a40:	000a      	movs	r2, r1
 8000a42:	28ff      	cmp	r0, #255	; 0xff
 8000a44:	d0c8      	beq.n	80009d8 <__aeabi_fsub+0x1f0>
 8000a46:	0005      	movs	r5, r0
 8000a48:	464b      	mov	r3, r9
 8000a4a:	e7a0      	b.n	800098e <__aeabi_fsub+0x1a6>
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d149      	bne.n	8000ae4 <__aeabi_fsub+0x2fc>
 8000a50:	464b      	mov	r3, r9
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d077      	beq.n	8000b46 <__aeabi_fsub+0x35e>
 8000a56:	000a      	movs	r2, r1
 8000a58:	25ff      	movs	r5, #255	; 0xff
 8000a5a:	e798      	b.n	800098e <__aeabi_fsub+0x1a6>
 8000a5c:	2cff      	cmp	r4, #255	; 0xff
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fsub+0x27a>
 8000a60:	e743      	b.n	80008ea <__aeabi_fsub+0x102>
 8000a62:	e787      	b.n	8000974 <__aeabi_fsub+0x18c>
 8000a64:	000a      	movs	r2, r1
 8000a66:	24ff      	movs	r4, #255	; 0xff
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e716      	b.n	800089a <__aeabi_fsub+0xb2>
 8000a6c:	2c00      	cmp	r4, #0
 8000a6e:	d115      	bne.n	8000a9c <__aeabi_fsub+0x2b4>
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d157      	bne.n	8000b24 <__aeabi_fsub+0x33c>
 8000a74:	28ff      	cmp	r0, #255	; 0xff
 8000a76:	d1e6      	bne.n	8000a46 <__aeabi_fsub+0x25e>
 8000a78:	464b      	mov	r3, r9
 8000a7a:	e77b      	b.n	8000974 <__aeabi_fsub+0x18c>
 8000a7c:	2c00      	cmp	r4, #0
 8000a7e:	d120      	bne.n	8000ac2 <__aeabi_fsub+0x2da>
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d057      	beq.n	8000b34 <__aeabi_fsub+0x34c>
 8000a84:	4649      	mov	r1, r9
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d053      	beq.n	8000b32 <__aeabi_fsub+0x34a>
 8000a8a:	444b      	add	r3, r9
 8000a8c:	015a      	lsls	r2, r3, #5
 8000a8e:	d568      	bpl.n	8000b62 <__aeabi_fsub+0x37a>
 8000a90:	2407      	movs	r4, #7
 8000a92:	4a36      	ldr	r2, [pc, #216]	; (8000b6c <__aeabi_fsub+0x384>)
 8000a94:	401c      	ands	r4, r3
 8000a96:	2501      	movs	r5, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	e6ea      	b.n	8000872 <__aeabi_fsub+0x8a>
 8000a9c:	28ff      	cmp	r0, #255	; 0xff
 8000a9e:	d0eb      	beq.n	8000a78 <__aeabi_fsub+0x290>
 8000aa0:	2280      	movs	r2, #128	; 0x80
 8000aa2:	04d2      	lsls	r2, r2, #19
 8000aa4:	4276      	negs	r6, r6
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	2e1b      	cmp	r6, #27
 8000aaa:	dc53      	bgt.n	8000b54 <__aeabi_fsub+0x36c>
 8000aac:	2520      	movs	r5, #32
 8000aae:	1bad      	subs	r5, r5, r6
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	40ab      	lsls	r3, r5
 8000ab4:	40f2      	lsrs	r2, r6
 8000ab6:	1e5c      	subs	r4, r3, #1
 8000ab8:	41a3      	sbcs	r3, r4
 8000aba:	4313      	orrs	r3, r2
 8000abc:	444b      	add	r3, r9
 8000abe:	0005      	movs	r5, r0
 8000ac0:	e721      	b.n	8000906 <__aeabi_fsub+0x11e>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0d8      	beq.n	8000a78 <__aeabi_fsub+0x290>
 8000ac6:	4649      	mov	r1, r9
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_fsub+0x2e6>
 8000acc:	e752      	b.n	8000974 <__aeabi_fsub+0x18c>
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	03c9      	lsls	r1, r1, #15
 8000ad2:	420f      	tst	r7, r1
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fsub+0x2f0>
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fsub+0x18c>
 8000ad8:	4660      	mov	r0, ip
 8000ada:	4208      	tst	r0, r1
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_fsub+0x2f8>
 8000ade:	e749      	b.n	8000974 <__aeabi_fsub+0x18c>
 8000ae0:	464b      	mov	r3, r9
 8000ae2:	e747      	b.n	8000974 <__aeabi_fsub+0x18c>
 8000ae4:	4648      	mov	r0, r9
 8000ae6:	25ff      	movs	r5, #255	; 0xff
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d100      	bne.n	8000aee <__aeabi_fsub+0x306>
 8000aec:	e74f      	b.n	800098e <__aeabi_fsub+0x1a6>
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	03d2      	lsls	r2, r2, #15
 8000af2:	4217      	tst	r7, r2
 8000af4:	d004      	beq.n	8000b00 <__aeabi_fsub+0x318>
 8000af6:	4660      	mov	r0, ip
 8000af8:	4210      	tst	r0, r2
 8000afa:	d101      	bne.n	8000b00 <__aeabi_fsub+0x318>
 8000afc:	464b      	mov	r3, r9
 8000afe:	4688      	mov	r8, r1
 8000b00:	2201      	movs	r2, #1
 8000b02:	4641      	mov	r1, r8
 8000b04:	25ff      	movs	r5, #255	; 0xff
 8000b06:	400a      	ands	r2, r1
 8000b08:	e741      	b.n	800098e <__aeabi_fsub+0x1a6>
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d01f      	beq.n	8000b50 <__aeabi_fsub+0x368>
 8000b10:	1a1a      	subs	r2, r3, r0
 8000b12:	0150      	lsls	r0, r2, #5
 8000b14:	d520      	bpl.n	8000b58 <__aeabi_fsub+0x370>
 8000b16:	464a      	mov	r2, r9
 8000b18:	2407      	movs	r4, #7
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	401c      	ands	r4, r3
 8000b1e:	4688      	mov	r8, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	e6a6      	b.n	8000872 <__aeabi_fsub+0x8a>
 8000b24:	1c74      	adds	r4, r6, #1
 8000b26:	d0c9      	beq.n	8000abc <__aeabi_fsub+0x2d4>
 8000b28:	43f6      	mvns	r6, r6
 8000b2a:	28ff      	cmp	r0, #255	; 0xff
 8000b2c:	d1bc      	bne.n	8000aa8 <__aeabi_fsub+0x2c0>
 8000b2e:	464b      	mov	r3, r9
 8000b30:	e720      	b.n	8000974 <__aeabi_fsub+0x18c>
 8000b32:	4699      	mov	r9, r3
 8000b34:	464b      	mov	r3, r9
 8000b36:	2500      	movs	r5, #0
 8000b38:	08db      	lsrs	r3, r3, #3
 8000b3a:	e72b      	b.n	8000994 <__aeabi_fsub+0x1ac>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e740      	b.n	80009c2 <__aeabi_fsub+0x1da>
 8000b40:	2200      	movs	r2, #0
 8000b42:	2300      	movs	r3, #0
 8000b44:	e6a9      	b.n	800089a <__aeabi_fsub+0xb2>
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	2200      	movs	r2, #0
 8000b4a:	03db      	lsls	r3, r3, #15
 8000b4c:	24ff      	movs	r4, #255	; 0xff
 8000b4e:	e6a4      	b.n	800089a <__aeabi_fsub+0xb2>
 8000b50:	2500      	movs	r5, #0
 8000b52:	e71c      	b.n	800098e <__aeabi_fsub+0x1a6>
 8000b54:	2301      	movs	r3, #1
 8000b56:	e7b1      	b.n	8000abc <__aeabi_fsub+0x2d4>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d0f1      	beq.n	8000b40 <__aeabi_fsub+0x358>
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	2500      	movs	r5, #0
 8000b60:	e6fc      	b.n	800095c <__aeabi_fsub+0x174>
 8000b62:	2500      	movs	r5, #0
 8000b64:	e6fa      	b.n	800095c <__aeabi_fsub+0x174>
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	7dffffff 	.word	0x7dffffff
 8000b6c:	fbffffff 	.word	0xfbffffff

08000b70 <__aeabi_f2iz>:
 8000b70:	0241      	lsls	r1, r0, #9
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0fc3      	lsrs	r3, r0, #31
 8000b76:	0a49      	lsrs	r1, r1, #9
 8000b78:	0e12      	lsrs	r2, r2, #24
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	2a7e      	cmp	r2, #126	; 0x7e
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_f2iz+0x2c>
 8000b80:	2a9d      	cmp	r2, #157	; 0x9d
 8000b82:	d80c      	bhi.n	8000b9e <__aeabi_f2iz+0x2e>
 8000b84:	2080      	movs	r0, #128	; 0x80
 8000b86:	0400      	lsls	r0, r0, #16
 8000b88:	4301      	orrs	r1, r0
 8000b8a:	2a95      	cmp	r2, #149	; 0x95
 8000b8c:	dc0a      	bgt.n	8000ba4 <__aeabi_f2iz+0x34>
 8000b8e:	2096      	movs	r0, #150	; 0x96
 8000b90:	1a82      	subs	r2, r0, r2
 8000b92:	40d1      	lsrs	r1, r2
 8000b94:	4248      	negs	r0, r1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_f2iz+0x2c>
 8000b9a:	0008      	movs	r0, r1
 8000b9c:	4770      	bx	lr
 8000b9e:	4a03      	ldr	r2, [pc, #12]	; (8000bac <__aeabi_f2iz+0x3c>)
 8000ba0:	1898      	adds	r0, r3, r2
 8000ba2:	e7fb      	b.n	8000b9c <__aeabi_f2iz+0x2c>
 8000ba4:	3a96      	subs	r2, #150	; 0x96
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	e7f4      	b.n	8000b94 <__aeabi_f2iz+0x24>
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	7fffffff 	.word	0x7fffffff

08000bb0 <__aeabi_i2f>:
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d03d      	beq.n	8000c32 <__aeabi_i2f+0x82>
 8000bb6:	17c3      	asrs	r3, r0, #31
 8000bb8:	18c5      	adds	r5, r0, r3
 8000bba:	405d      	eors	r5, r3
 8000bbc:	0fc4      	lsrs	r4, r0, #31
 8000bbe:	0028      	movs	r0, r5
 8000bc0:	f000 fc3a 	bl	8001438 <__clzsi2>
 8000bc4:	229e      	movs	r2, #158	; 0x9e
 8000bc6:	1a12      	subs	r2, r2, r0
 8000bc8:	2a96      	cmp	r2, #150	; 0x96
 8000bca:	dc07      	bgt.n	8000bdc <__aeabi_i2f+0x2c>
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	2808      	cmp	r0, #8
 8000bd0:	dd33      	ble.n	8000c3a <__aeabi_i2f+0x8a>
 8000bd2:	3808      	subs	r0, #8
 8000bd4:	4085      	lsls	r5, r0
 8000bd6:	0268      	lsls	r0, r5, #9
 8000bd8:	0a40      	lsrs	r0, r0, #9
 8000bda:	e023      	b.n	8000c24 <__aeabi_i2f+0x74>
 8000bdc:	2a99      	cmp	r2, #153	; 0x99
 8000bde:	dd0b      	ble.n	8000bf8 <__aeabi_i2f+0x48>
 8000be0:	2305      	movs	r3, #5
 8000be2:	0029      	movs	r1, r5
 8000be4:	1a1b      	subs	r3, r3, r0
 8000be6:	40d9      	lsrs	r1, r3
 8000be8:	0003      	movs	r3, r0
 8000bea:	331b      	adds	r3, #27
 8000bec:	409d      	lsls	r5, r3
 8000bee:	002b      	movs	r3, r5
 8000bf0:	1e5d      	subs	r5, r3, #1
 8000bf2:	41ab      	sbcs	r3, r5
 8000bf4:	4319      	orrs	r1, r3
 8000bf6:	000d      	movs	r5, r1
 8000bf8:	2805      	cmp	r0, #5
 8000bfa:	dd01      	ble.n	8000c00 <__aeabi_i2f+0x50>
 8000bfc:	1f43      	subs	r3, r0, #5
 8000bfe:	409d      	lsls	r5, r3
 8000c00:	002b      	movs	r3, r5
 8000c02:	490f      	ldr	r1, [pc, #60]	; (8000c40 <__aeabi_i2f+0x90>)
 8000c04:	400b      	ands	r3, r1
 8000c06:	076e      	lsls	r6, r5, #29
 8000c08:	d009      	beq.n	8000c1e <__aeabi_i2f+0x6e>
 8000c0a:	260f      	movs	r6, #15
 8000c0c:	4035      	ands	r5, r6
 8000c0e:	2d04      	cmp	r5, #4
 8000c10:	d005      	beq.n	8000c1e <__aeabi_i2f+0x6e>
 8000c12:	3304      	adds	r3, #4
 8000c14:	015d      	lsls	r5, r3, #5
 8000c16:	d502      	bpl.n	8000c1e <__aeabi_i2f+0x6e>
 8000c18:	229f      	movs	r2, #159	; 0x9f
 8000c1a:	400b      	ands	r3, r1
 8000c1c:	1a12      	subs	r2, r2, r0
 8000c1e:	019b      	lsls	r3, r3, #6
 8000c20:	0a58      	lsrs	r0, r3, #9
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	0240      	lsls	r0, r0, #9
 8000c26:	05d2      	lsls	r2, r2, #23
 8000c28:	0a40      	lsrs	r0, r0, #9
 8000c2a:	07e4      	lsls	r4, r4, #31
 8000c2c:	4310      	orrs	r0, r2
 8000c2e:	4320      	orrs	r0, r4
 8000c30:	bd70      	pop	{r4, r5, r6, pc}
 8000c32:	2400      	movs	r4, #0
 8000c34:	2200      	movs	r2, #0
 8000c36:	2000      	movs	r0, #0
 8000c38:	e7f4      	b.n	8000c24 <__aeabi_i2f+0x74>
 8000c3a:	0268      	lsls	r0, r5, #9
 8000c3c:	0a40      	lsrs	r0, r0, #9
 8000c3e:	e7f1      	b.n	8000c24 <__aeabi_i2f+0x74>
 8000c40:	fbffffff 	.word	0xfbffffff

08000c44 <__aeabi_ddiv>:
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c46:	4657      	mov	r7, sl
 8000c48:	46de      	mov	lr, fp
 8000c4a:	464e      	mov	r6, r9
 8000c4c:	4645      	mov	r5, r8
 8000c4e:	b5e0      	push	{r5, r6, r7, lr}
 8000c50:	4683      	mov	fp, r0
 8000c52:	0007      	movs	r7, r0
 8000c54:	030e      	lsls	r6, r1, #12
 8000c56:	0048      	lsls	r0, r1, #1
 8000c58:	b085      	sub	sp, #20
 8000c5a:	4692      	mov	sl, r2
 8000c5c:	001c      	movs	r4, r3
 8000c5e:	0b36      	lsrs	r6, r6, #12
 8000c60:	0d40      	lsrs	r0, r0, #21
 8000c62:	0fcd      	lsrs	r5, r1, #31
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d100      	bne.n	8000c6a <__aeabi_ddiv+0x26>
 8000c68:	e09d      	b.n	8000da6 <__aeabi_ddiv+0x162>
 8000c6a:	4b95      	ldr	r3, [pc, #596]	; (8000ec0 <__aeabi_ddiv+0x27c>)
 8000c6c:	4298      	cmp	r0, r3
 8000c6e:	d039      	beq.n	8000ce4 <__aeabi_ddiv+0xa0>
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	00f6      	lsls	r6, r6, #3
 8000c74:	041b      	lsls	r3, r3, #16
 8000c76:	431e      	orrs	r6, r3
 8000c78:	4a92      	ldr	r2, [pc, #584]	; (8000ec4 <__aeabi_ddiv+0x280>)
 8000c7a:	0f7b      	lsrs	r3, r7, #29
 8000c7c:	4333      	orrs	r3, r6
 8000c7e:	4699      	mov	r9, r3
 8000c80:	4694      	mov	ip, r2
 8000c82:	0003      	movs	r3, r0
 8000c84:	4463      	add	r3, ip
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	00ff      	lsls	r7, r7, #3
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	0323      	lsls	r3, r4, #12
 8000c92:	0b1b      	lsrs	r3, r3, #12
 8000c94:	4698      	mov	r8, r3
 8000c96:	0063      	lsls	r3, r4, #1
 8000c98:	0fe4      	lsrs	r4, r4, #31
 8000c9a:	4652      	mov	r2, sl
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	9401      	str	r4, [sp, #4]
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x60>
 8000ca2:	e0b3      	b.n	8000e0c <__aeabi_ddiv+0x1c8>
 8000ca4:	4986      	ldr	r1, [pc, #536]	; (8000ec0 <__aeabi_ddiv+0x27c>)
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d100      	bne.n	8000cac <__aeabi_ddiv+0x68>
 8000caa:	e09e      	b.n	8000dea <__aeabi_ddiv+0x1a6>
 8000cac:	4642      	mov	r2, r8
 8000cae:	00d1      	lsls	r1, r2, #3
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0412      	lsls	r2, r2, #16
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	4651      	mov	r1, sl
 8000cb8:	0f49      	lsrs	r1, r1, #29
 8000cba:	4311      	orrs	r1, r2
 8000cbc:	468b      	mov	fp, r1
 8000cbe:	4981      	ldr	r1, [pc, #516]	; (8000ec4 <__aeabi_ddiv+0x280>)
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	468c      	mov	ip, r1
 8000cc4:	9900      	ldr	r1, [sp, #0]
 8000cc6:	4463      	add	r3, ip
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	2100      	movs	r1, #0
 8000ccc:	00d2      	lsls	r2, r2, #3
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	002b      	movs	r3, r5
 8000cd2:	4063      	eors	r3, r4
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	2e0f      	cmp	r6, #15
 8000cd8:	d900      	bls.n	8000cdc <__aeabi_ddiv+0x98>
 8000cda:	e105      	b.n	8000ee8 <__aeabi_ddiv+0x2a4>
 8000cdc:	4b7a      	ldr	r3, [pc, #488]	; (8000ec8 <__aeabi_ddiv+0x284>)
 8000cde:	00b6      	lsls	r6, r6, #2
 8000ce0:	599b      	ldr	r3, [r3, r6]
 8000ce2:	469f      	mov	pc, r3
 8000ce4:	465b      	mov	r3, fp
 8000ce6:	4333      	orrs	r3, r6
 8000ce8:	4699      	mov	r9, r3
 8000cea:	d000      	beq.n	8000cee <__aeabi_ddiv+0xaa>
 8000cec:	e0b8      	b.n	8000e60 <__aeabi_ddiv+0x21c>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	2608      	movs	r6, #8
 8000cf2:	2700      	movs	r7, #0
 8000cf4:	9000      	str	r0, [sp, #0]
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	e7ca      	b.n	8000c90 <__aeabi_ddiv+0x4c>
 8000cfa:	46cb      	mov	fp, r9
 8000cfc:	003a      	movs	r2, r7
 8000cfe:	9902      	ldr	r1, [sp, #8]
 8000d00:	9501      	str	r5, [sp, #4]
 8000d02:	9b01      	ldr	r3, [sp, #4]
 8000d04:	469a      	mov	sl, r3
 8000d06:	2902      	cmp	r1, #2
 8000d08:	d027      	beq.n	8000d5a <__aeabi_ddiv+0x116>
 8000d0a:	2903      	cmp	r1, #3
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_ddiv+0xcc>
 8000d0e:	e280      	b.n	8001212 <__aeabi_ddiv+0x5ce>
 8000d10:	2901      	cmp	r1, #1
 8000d12:	d044      	beq.n	8000d9e <__aeabi_ddiv+0x15a>
 8000d14:	496d      	ldr	r1, [pc, #436]	; (8000ecc <__aeabi_ddiv+0x288>)
 8000d16:	9b00      	ldr	r3, [sp, #0]
 8000d18:	468c      	mov	ip, r1
 8000d1a:	4463      	add	r3, ip
 8000d1c:	001c      	movs	r4, r3
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	dd38      	ble.n	8000d94 <__aeabi_ddiv+0x150>
 8000d22:	0753      	lsls	r3, r2, #29
 8000d24:	d000      	beq.n	8000d28 <__aeabi_ddiv+0xe4>
 8000d26:	e213      	b.n	8001150 <__aeabi_ddiv+0x50c>
 8000d28:	08d2      	lsrs	r2, r2, #3
 8000d2a:	465b      	mov	r3, fp
 8000d2c:	01db      	lsls	r3, r3, #7
 8000d2e:	d509      	bpl.n	8000d44 <__aeabi_ddiv+0x100>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4b67      	ldr	r3, [pc, #412]	; (8000ed0 <__aeabi_ddiv+0x28c>)
 8000d34:	4019      	ands	r1, r3
 8000d36:	468b      	mov	fp, r1
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	00c9      	lsls	r1, r1, #3
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	9b00      	ldr	r3, [sp, #0]
 8000d40:	4463      	add	r3, ip
 8000d42:	001c      	movs	r4, r3
 8000d44:	4b63      	ldr	r3, [pc, #396]	; (8000ed4 <__aeabi_ddiv+0x290>)
 8000d46:	429c      	cmp	r4, r3
 8000d48:	dc07      	bgt.n	8000d5a <__aeabi_ddiv+0x116>
 8000d4a:	465b      	mov	r3, fp
 8000d4c:	0564      	lsls	r4, r4, #21
 8000d4e:	075f      	lsls	r7, r3, #29
 8000d50:	025b      	lsls	r3, r3, #9
 8000d52:	4317      	orrs	r7, r2
 8000d54:	0b1b      	lsrs	r3, r3, #12
 8000d56:	0d62      	lsrs	r2, r4, #21
 8000d58:	e002      	b.n	8000d60 <__aeabi_ddiv+0x11c>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	4a58      	ldr	r2, [pc, #352]	; (8000ec0 <__aeabi_ddiv+0x27c>)
 8000d60:	2100      	movs	r1, #0
 8000d62:	031b      	lsls	r3, r3, #12
 8000d64:	0b1c      	lsrs	r4, r3, #12
 8000d66:	0d0b      	lsrs	r3, r1, #20
 8000d68:	051b      	lsls	r3, r3, #20
 8000d6a:	4323      	orrs	r3, r4
 8000d6c:	0514      	lsls	r4, r2, #20
 8000d6e:	4a5a      	ldr	r2, [pc, #360]	; (8000ed8 <__aeabi_ddiv+0x294>)
 8000d70:	0038      	movs	r0, r7
 8000d72:	4013      	ands	r3, r2
 8000d74:	431c      	orrs	r4, r3
 8000d76:	4653      	mov	r3, sl
 8000d78:	0064      	lsls	r4, r4, #1
 8000d7a:	07db      	lsls	r3, r3, #31
 8000d7c:	0864      	lsrs	r4, r4, #1
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	0021      	movs	r1, r4
 8000d82:	b005      	add	sp, #20
 8000d84:	bc3c      	pop	{r2, r3, r4, r5}
 8000d86:	4690      	mov	r8, r2
 8000d88:	4699      	mov	r9, r3
 8000d8a:	46a2      	mov	sl, r4
 8000d8c:	46ab      	mov	fp, r5
 8000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d90:	2201      	movs	r2, #1
 8000d92:	4252      	negs	r2, r2
 8000d94:	2301      	movs	r3, #1
 8000d96:	1b1b      	subs	r3, r3, r4
 8000d98:	2b38      	cmp	r3, #56	; 0x38
 8000d9a:	dc00      	bgt.n	8000d9e <__aeabi_ddiv+0x15a>
 8000d9c:	e1ad      	b.n	80010fa <__aeabi_ddiv+0x4b6>
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2300      	movs	r3, #0
 8000da2:	2700      	movs	r7, #0
 8000da4:	e7dc      	b.n	8000d60 <__aeabi_ddiv+0x11c>
 8000da6:	465b      	mov	r3, fp
 8000da8:	4333      	orrs	r3, r6
 8000daa:	4699      	mov	r9, r3
 8000dac:	d05e      	beq.n	8000e6c <__aeabi_ddiv+0x228>
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_ddiv+0x170>
 8000db2:	e18a      	b.n	80010ca <__aeabi_ddiv+0x486>
 8000db4:	0030      	movs	r0, r6
 8000db6:	f000 fb3f 	bl	8001438 <__clzsi2>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	3b0b      	subs	r3, #11
 8000dbe:	2b1c      	cmp	r3, #28
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_ddiv+0x180>
 8000dc2:	e17b      	b.n	80010bc <__aeabi_ddiv+0x478>
 8000dc4:	221d      	movs	r2, #29
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	465a      	mov	r2, fp
 8000dca:	0001      	movs	r1, r0
 8000dcc:	40da      	lsrs	r2, r3
 8000dce:	3908      	subs	r1, #8
 8000dd0:	408e      	lsls	r6, r1
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	465f      	mov	r7, fp
 8000dd6:	4333      	orrs	r3, r6
 8000dd8:	4699      	mov	r9, r3
 8000dda:	408f      	lsls	r7, r1
 8000ddc:	4b3f      	ldr	r3, [pc, #252]	; (8000edc <__aeabi_ddiv+0x298>)
 8000dde:	2600      	movs	r6, #0
 8000de0:	1a1b      	subs	r3, r3, r0
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2300      	movs	r3, #0
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	e752      	b.n	8000c90 <__aeabi_ddiv+0x4c>
 8000dea:	4641      	mov	r1, r8
 8000dec:	4653      	mov	r3, sl
 8000dee:	430b      	orrs	r3, r1
 8000df0:	493b      	ldr	r1, [pc, #236]	; (8000ee0 <__aeabi_ddiv+0x29c>)
 8000df2:	469b      	mov	fp, r3
 8000df4:	468c      	mov	ip, r1
 8000df6:	9b00      	ldr	r3, [sp, #0]
 8000df8:	4463      	add	r3, ip
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	465b      	mov	r3, fp
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d13b      	bne.n	8000e7a <__aeabi_ddiv+0x236>
 8000e02:	2302      	movs	r3, #2
 8000e04:	2200      	movs	r2, #0
 8000e06:	431e      	orrs	r6, r3
 8000e08:	2102      	movs	r1, #2
 8000e0a:	e761      	b.n	8000cd0 <__aeabi_ddiv+0x8c>
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	469b      	mov	fp, r3
 8000e12:	d037      	beq.n	8000e84 <__aeabi_ddiv+0x240>
 8000e14:	4643      	mov	r3, r8
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_ddiv+0x1d8>
 8000e1a:	e162      	b.n	80010e2 <__aeabi_ddiv+0x49e>
 8000e1c:	4640      	mov	r0, r8
 8000e1e:	f000 fb0b 	bl	8001438 <__clzsi2>
 8000e22:	0003      	movs	r3, r0
 8000e24:	3b0b      	subs	r3, #11
 8000e26:	2b1c      	cmp	r3, #28
 8000e28:	dd00      	ble.n	8000e2c <__aeabi_ddiv+0x1e8>
 8000e2a:	e153      	b.n	80010d4 <__aeabi_ddiv+0x490>
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	4641      	mov	r1, r8
 8000e30:	3a08      	subs	r2, #8
 8000e32:	4091      	lsls	r1, r2
 8000e34:	4688      	mov	r8, r1
 8000e36:	211d      	movs	r1, #29
 8000e38:	1acb      	subs	r3, r1, r3
 8000e3a:	4651      	mov	r1, sl
 8000e3c:	40d9      	lsrs	r1, r3
 8000e3e:	000b      	movs	r3, r1
 8000e40:	4641      	mov	r1, r8
 8000e42:	430b      	orrs	r3, r1
 8000e44:	469b      	mov	fp, r3
 8000e46:	4653      	mov	r3, sl
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	9b00      	ldr	r3, [sp, #0]
 8000e4e:	4925      	ldr	r1, [pc, #148]	; (8000ee4 <__aeabi_ddiv+0x2a0>)
 8000e50:	469c      	mov	ip, r3
 8000e52:	4460      	add	r0, ip
 8000e54:	0003      	movs	r3, r0
 8000e56:	468c      	mov	ip, r1
 8000e58:	4463      	add	r3, ip
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	e737      	b.n	8000cd0 <__aeabi_ddiv+0x8c>
 8000e60:	2303      	movs	r3, #3
 8000e62:	46b1      	mov	r9, r6
 8000e64:	9000      	str	r0, [sp, #0]
 8000e66:	260c      	movs	r6, #12
 8000e68:	9302      	str	r3, [sp, #8]
 8000e6a:	e711      	b.n	8000c90 <__aeabi_ddiv+0x4c>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	2604      	movs	r6, #4
 8000e74:	2700      	movs	r7, #0
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	e70a      	b.n	8000c90 <__aeabi_ddiv+0x4c>
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	46c3      	mov	fp, r8
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	2103      	movs	r1, #3
 8000e82:	e725      	b.n	8000cd0 <__aeabi_ddiv+0x8c>
 8000e84:	3301      	adds	r3, #1
 8000e86:	431e      	orrs	r6, r3
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	e720      	b.n	8000cd0 <__aeabi_ddiv+0x8c>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	469a      	mov	sl, r3
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	2700      	movs	r7, #0
 8000e96:	031b      	lsls	r3, r3, #12
 8000e98:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <__aeabi_ddiv+0x27c>)
 8000e9a:	e761      	b.n	8000d60 <__aeabi_ddiv+0x11c>
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	4649      	mov	r1, r9
 8000ea0:	031b      	lsls	r3, r3, #12
 8000ea2:	4219      	tst	r1, r3
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_ddiv+0x264>
 8000ea6:	e0e2      	b.n	800106e <__aeabi_ddiv+0x42a>
 8000ea8:	4659      	mov	r1, fp
 8000eaa:	4219      	tst	r1, r3
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_ddiv+0x26c>
 8000eae:	e0de      	b.n	800106e <__aeabi_ddiv+0x42a>
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	031b      	lsls	r3, r3, #12
 8000eb4:	0017      	movs	r7, r2
 8000eb6:	0b1b      	lsrs	r3, r3, #12
 8000eb8:	46a2      	mov	sl, r4
 8000eba:	4a01      	ldr	r2, [pc, #4]	; (8000ec0 <__aeabi_ddiv+0x27c>)
 8000ebc:	e750      	b.n	8000d60 <__aeabi_ddiv+0x11c>
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	000007ff 	.word	0x000007ff
 8000ec4:	fffffc01 	.word	0xfffffc01
 8000ec8:	08004594 	.word	0x08004594
 8000ecc:	000003ff 	.word	0x000003ff
 8000ed0:	feffffff 	.word	0xfeffffff
 8000ed4:	000007fe 	.word	0x000007fe
 8000ed8:	800fffff 	.word	0x800fffff
 8000edc:	fffffc0d 	.word	0xfffffc0d
 8000ee0:	fffff801 	.word	0xfffff801
 8000ee4:	000003f3 	.word	0x000003f3
 8000ee8:	45d9      	cmp	r9, fp
 8000eea:	d900      	bls.n	8000eee <__aeabi_ddiv+0x2aa>
 8000eec:	e0cb      	b.n	8001086 <__aeabi_ddiv+0x442>
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_ddiv+0x2ae>
 8000ef0:	e0c6      	b.n	8001080 <__aeabi_ddiv+0x43c>
 8000ef2:	003c      	movs	r4, r7
 8000ef4:	4648      	mov	r0, r9
 8000ef6:	2700      	movs	r7, #0
 8000ef8:	9b00      	ldr	r3, [sp, #0]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	465b      	mov	r3, fp
 8000f00:	0e16      	lsrs	r6, r2, #24
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	431e      	orrs	r6, r3
 8000f06:	0213      	lsls	r3, r2, #8
 8000f08:	4698      	mov	r8, r3
 8000f0a:	0433      	lsls	r3, r6, #16
 8000f0c:	0c1b      	lsrs	r3, r3, #16
 8000f0e:	4699      	mov	r9, r3
 8000f10:	0c31      	lsrs	r1, r6, #16
 8000f12:	9101      	str	r1, [sp, #4]
 8000f14:	f7ff f97e 	bl	8000214 <__aeabi_uidivmod>
 8000f18:	464a      	mov	r2, r9
 8000f1a:	4342      	muls	r2, r0
 8000f1c:	040b      	lsls	r3, r1, #16
 8000f1e:	0c21      	lsrs	r1, r4, #16
 8000f20:	0005      	movs	r5, r0
 8000f22:	4319      	orrs	r1, r3
 8000f24:	428a      	cmp	r2, r1
 8000f26:	d907      	bls.n	8000f38 <__aeabi_ddiv+0x2f4>
 8000f28:	1989      	adds	r1, r1, r6
 8000f2a:	3d01      	subs	r5, #1
 8000f2c:	428e      	cmp	r6, r1
 8000f2e:	d803      	bhi.n	8000f38 <__aeabi_ddiv+0x2f4>
 8000f30:	428a      	cmp	r2, r1
 8000f32:	d901      	bls.n	8000f38 <__aeabi_ddiv+0x2f4>
 8000f34:	1e85      	subs	r5, r0, #2
 8000f36:	1989      	adds	r1, r1, r6
 8000f38:	1a88      	subs	r0, r1, r2
 8000f3a:	9901      	ldr	r1, [sp, #4]
 8000f3c:	f7ff f96a 	bl	8000214 <__aeabi_uidivmod>
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	468c      	mov	ip, r1
 8000f44:	464a      	mov	r2, r9
 8000f46:	0421      	lsls	r1, r4, #16
 8000f48:	4664      	mov	r4, ip
 8000f4a:	4342      	muls	r2, r0
 8000f4c:	0c09      	lsrs	r1, r1, #16
 8000f4e:	0003      	movs	r3, r0
 8000f50:	4321      	orrs	r1, r4
 8000f52:	428a      	cmp	r2, r1
 8000f54:	d904      	bls.n	8000f60 <__aeabi_ddiv+0x31c>
 8000f56:	1989      	adds	r1, r1, r6
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	428e      	cmp	r6, r1
 8000f5c:	d800      	bhi.n	8000f60 <__aeabi_ddiv+0x31c>
 8000f5e:	e0f1      	b.n	8001144 <__aeabi_ddiv+0x500>
 8000f60:	042d      	lsls	r5, r5, #16
 8000f62:	431d      	orrs	r5, r3
 8000f64:	46ab      	mov	fp, r5
 8000f66:	4643      	mov	r3, r8
 8000f68:	1a89      	subs	r1, r1, r2
 8000f6a:	4642      	mov	r2, r8
 8000f6c:	0c28      	lsrs	r0, r5, #16
 8000f6e:	0412      	lsls	r2, r2, #16
 8000f70:	0c1d      	lsrs	r5, r3, #16
 8000f72:	465b      	mov	r3, fp
 8000f74:	0c14      	lsrs	r4, r2, #16
 8000f76:	0022      	movs	r2, r4
 8000f78:	041b      	lsls	r3, r3, #16
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	435a      	muls	r2, r3
 8000f7e:	9403      	str	r4, [sp, #12]
 8000f80:	436b      	muls	r3, r5
 8000f82:	4344      	muls	r4, r0
 8000f84:	9502      	str	r5, [sp, #8]
 8000f86:	4368      	muls	r0, r5
 8000f88:	191b      	adds	r3, r3, r4
 8000f8a:	0c15      	lsrs	r5, r2, #16
 8000f8c:	18eb      	adds	r3, r5, r3
 8000f8e:	429c      	cmp	r4, r3
 8000f90:	d903      	bls.n	8000f9a <__aeabi_ddiv+0x356>
 8000f92:	2480      	movs	r4, #128	; 0x80
 8000f94:	0264      	lsls	r4, r4, #9
 8000f96:	46a4      	mov	ip, r4
 8000f98:	4460      	add	r0, ip
 8000f9a:	0c1c      	lsrs	r4, r3, #16
 8000f9c:	0415      	lsls	r5, r2, #16
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	0c2d      	lsrs	r5, r5, #16
 8000fa2:	1820      	adds	r0, r4, r0
 8000fa4:	195d      	adds	r5, r3, r5
 8000fa6:	4281      	cmp	r1, r0
 8000fa8:	d377      	bcc.n	800109a <__aeabi_ddiv+0x456>
 8000faa:	d073      	beq.n	8001094 <__aeabi_ddiv+0x450>
 8000fac:	1a0c      	subs	r4, r1, r0
 8000fae:	4aa2      	ldr	r2, [pc, #648]	; (8001238 <__aeabi_ddiv+0x5f4>)
 8000fb0:	1b7d      	subs	r5, r7, r5
 8000fb2:	42af      	cmp	r7, r5
 8000fb4:	41bf      	sbcs	r7, r7
 8000fb6:	4694      	mov	ip, r2
 8000fb8:	9b00      	ldr	r3, [sp, #0]
 8000fba:	427f      	negs	r7, r7
 8000fbc:	4463      	add	r3, ip
 8000fbe:	1be0      	subs	r0, r4, r7
 8000fc0:	001c      	movs	r4, r3
 8000fc2:	4286      	cmp	r6, r0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_ddiv+0x384>
 8000fc6:	e0db      	b.n	8001180 <__aeabi_ddiv+0x53c>
 8000fc8:	9901      	ldr	r1, [sp, #4]
 8000fca:	f7ff f923 	bl	8000214 <__aeabi_uidivmod>
 8000fce:	464a      	mov	r2, r9
 8000fd0:	4342      	muls	r2, r0
 8000fd2:	040b      	lsls	r3, r1, #16
 8000fd4:	0c29      	lsrs	r1, r5, #16
 8000fd6:	0007      	movs	r7, r0
 8000fd8:	4319      	orrs	r1, r3
 8000fda:	428a      	cmp	r2, r1
 8000fdc:	d907      	bls.n	8000fee <__aeabi_ddiv+0x3aa>
 8000fde:	1989      	adds	r1, r1, r6
 8000fe0:	3f01      	subs	r7, #1
 8000fe2:	428e      	cmp	r6, r1
 8000fe4:	d803      	bhi.n	8000fee <__aeabi_ddiv+0x3aa>
 8000fe6:	428a      	cmp	r2, r1
 8000fe8:	d901      	bls.n	8000fee <__aeabi_ddiv+0x3aa>
 8000fea:	1e87      	subs	r7, r0, #2
 8000fec:	1989      	adds	r1, r1, r6
 8000fee:	1a88      	subs	r0, r1, r2
 8000ff0:	9901      	ldr	r1, [sp, #4]
 8000ff2:	f7ff f90f 	bl	8000214 <__aeabi_uidivmod>
 8000ff6:	0409      	lsls	r1, r1, #16
 8000ff8:	464a      	mov	r2, r9
 8000ffa:	4689      	mov	r9, r1
 8000ffc:	0429      	lsls	r1, r5, #16
 8000ffe:	464d      	mov	r5, r9
 8001000:	4342      	muls	r2, r0
 8001002:	0c09      	lsrs	r1, r1, #16
 8001004:	0003      	movs	r3, r0
 8001006:	4329      	orrs	r1, r5
 8001008:	428a      	cmp	r2, r1
 800100a:	d907      	bls.n	800101c <__aeabi_ddiv+0x3d8>
 800100c:	1989      	adds	r1, r1, r6
 800100e:	3b01      	subs	r3, #1
 8001010:	428e      	cmp	r6, r1
 8001012:	d803      	bhi.n	800101c <__aeabi_ddiv+0x3d8>
 8001014:	428a      	cmp	r2, r1
 8001016:	d901      	bls.n	800101c <__aeabi_ddiv+0x3d8>
 8001018:	1e83      	subs	r3, r0, #2
 800101a:	1989      	adds	r1, r1, r6
 800101c:	043f      	lsls	r7, r7, #16
 800101e:	1a89      	subs	r1, r1, r2
 8001020:	003a      	movs	r2, r7
 8001022:	9f03      	ldr	r7, [sp, #12]
 8001024:	431a      	orrs	r2, r3
 8001026:	0038      	movs	r0, r7
 8001028:	0413      	lsls	r3, r2, #16
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	4358      	muls	r0, r3
 800102e:	4681      	mov	r9, r0
 8001030:	9802      	ldr	r0, [sp, #8]
 8001032:	0c15      	lsrs	r5, r2, #16
 8001034:	436f      	muls	r7, r5
 8001036:	4343      	muls	r3, r0
 8001038:	4345      	muls	r5, r0
 800103a:	4648      	mov	r0, r9
 800103c:	0c00      	lsrs	r0, r0, #16
 800103e:	4684      	mov	ip, r0
 8001040:	19db      	adds	r3, r3, r7
 8001042:	4463      	add	r3, ip
 8001044:	429f      	cmp	r7, r3
 8001046:	d903      	bls.n	8001050 <__aeabi_ddiv+0x40c>
 8001048:	2080      	movs	r0, #128	; 0x80
 800104a:	0240      	lsls	r0, r0, #9
 800104c:	4684      	mov	ip, r0
 800104e:	4465      	add	r5, ip
 8001050:	4648      	mov	r0, r9
 8001052:	0c1f      	lsrs	r7, r3, #16
 8001054:	0400      	lsls	r0, r0, #16
 8001056:	041b      	lsls	r3, r3, #16
 8001058:	0c00      	lsrs	r0, r0, #16
 800105a:	197d      	adds	r5, r7, r5
 800105c:	1818      	adds	r0, r3, r0
 800105e:	42a9      	cmp	r1, r5
 8001060:	d200      	bcs.n	8001064 <__aeabi_ddiv+0x420>
 8001062:	e084      	b.n	800116e <__aeabi_ddiv+0x52a>
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x424>
 8001066:	e07f      	b.n	8001168 <__aeabi_ddiv+0x524>
 8001068:	2301      	movs	r3, #1
 800106a:	431a      	orrs	r2, r3
 800106c:	e657      	b.n	8000d1e <__aeabi_ddiv+0xda>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	464a      	mov	r2, r9
 8001072:	031b      	lsls	r3, r3, #12
 8001074:	4313      	orrs	r3, r2
 8001076:	031b      	lsls	r3, r3, #12
 8001078:	0b1b      	lsrs	r3, r3, #12
 800107a:	46aa      	mov	sl, r5
 800107c:	4a6f      	ldr	r2, [pc, #444]	; (800123c <__aeabi_ddiv+0x5f8>)
 800107e:	e66f      	b.n	8000d60 <__aeabi_ddiv+0x11c>
 8001080:	42ba      	cmp	r2, r7
 8001082:	d900      	bls.n	8001086 <__aeabi_ddiv+0x442>
 8001084:	e735      	b.n	8000ef2 <__aeabi_ddiv+0x2ae>
 8001086:	464b      	mov	r3, r9
 8001088:	07dc      	lsls	r4, r3, #31
 800108a:	0858      	lsrs	r0, r3, #1
 800108c:	087b      	lsrs	r3, r7, #1
 800108e:	431c      	orrs	r4, r3
 8001090:	07ff      	lsls	r7, r7, #31
 8001092:	e734      	b.n	8000efe <__aeabi_ddiv+0x2ba>
 8001094:	2400      	movs	r4, #0
 8001096:	42af      	cmp	r7, r5
 8001098:	d289      	bcs.n	8000fae <__aeabi_ddiv+0x36a>
 800109a:	4447      	add	r7, r8
 800109c:	4547      	cmp	r7, r8
 800109e:	41a4      	sbcs	r4, r4
 80010a0:	465b      	mov	r3, fp
 80010a2:	4264      	negs	r4, r4
 80010a4:	19a4      	adds	r4, r4, r6
 80010a6:	1864      	adds	r4, r4, r1
 80010a8:	3b01      	subs	r3, #1
 80010aa:	42a6      	cmp	r6, r4
 80010ac:	d21e      	bcs.n	80010ec <__aeabi_ddiv+0x4a8>
 80010ae:	42a0      	cmp	r0, r4
 80010b0:	d86d      	bhi.n	800118e <__aeabi_ddiv+0x54a>
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x472>
 80010b4:	e0b6      	b.n	8001224 <__aeabi_ddiv+0x5e0>
 80010b6:	1a24      	subs	r4, r4, r0
 80010b8:	469b      	mov	fp, r3
 80010ba:	e778      	b.n	8000fae <__aeabi_ddiv+0x36a>
 80010bc:	0003      	movs	r3, r0
 80010be:	465a      	mov	r2, fp
 80010c0:	3b28      	subs	r3, #40	; 0x28
 80010c2:	409a      	lsls	r2, r3
 80010c4:	2700      	movs	r7, #0
 80010c6:	4691      	mov	r9, r2
 80010c8:	e688      	b.n	8000ddc <__aeabi_ddiv+0x198>
 80010ca:	4658      	mov	r0, fp
 80010cc:	f000 f9b4 	bl	8001438 <__clzsi2>
 80010d0:	3020      	adds	r0, #32
 80010d2:	e672      	b.n	8000dba <__aeabi_ddiv+0x176>
 80010d4:	0003      	movs	r3, r0
 80010d6:	4652      	mov	r2, sl
 80010d8:	3b28      	subs	r3, #40	; 0x28
 80010da:	409a      	lsls	r2, r3
 80010dc:	4693      	mov	fp, r2
 80010de:	2200      	movs	r2, #0
 80010e0:	e6b4      	b.n	8000e4c <__aeabi_ddiv+0x208>
 80010e2:	4650      	mov	r0, sl
 80010e4:	f000 f9a8 	bl	8001438 <__clzsi2>
 80010e8:	3020      	adds	r0, #32
 80010ea:	e69a      	b.n	8000e22 <__aeabi_ddiv+0x1de>
 80010ec:	42a6      	cmp	r6, r4
 80010ee:	d1e2      	bne.n	80010b6 <__aeabi_ddiv+0x472>
 80010f0:	45b8      	cmp	r8, r7
 80010f2:	d9dc      	bls.n	80010ae <__aeabi_ddiv+0x46a>
 80010f4:	1a34      	subs	r4, r6, r0
 80010f6:	469b      	mov	fp, r3
 80010f8:	e759      	b.n	8000fae <__aeabi_ddiv+0x36a>
 80010fa:	2b1f      	cmp	r3, #31
 80010fc:	dc65      	bgt.n	80011ca <__aeabi_ddiv+0x586>
 80010fe:	4c50      	ldr	r4, [pc, #320]	; (8001240 <__aeabi_ddiv+0x5fc>)
 8001100:	9900      	ldr	r1, [sp, #0]
 8001102:	46a4      	mov	ip, r4
 8001104:	465c      	mov	r4, fp
 8001106:	4461      	add	r1, ip
 8001108:	0008      	movs	r0, r1
 800110a:	408c      	lsls	r4, r1
 800110c:	0011      	movs	r1, r2
 800110e:	4082      	lsls	r2, r0
 8001110:	40d9      	lsrs	r1, r3
 8001112:	1e50      	subs	r0, r2, #1
 8001114:	4182      	sbcs	r2, r0
 8001116:	430c      	orrs	r4, r1
 8001118:	4314      	orrs	r4, r2
 800111a:	465a      	mov	r2, fp
 800111c:	40da      	lsrs	r2, r3
 800111e:	0013      	movs	r3, r2
 8001120:	0762      	lsls	r2, r4, #29
 8001122:	d009      	beq.n	8001138 <__aeabi_ddiv+0x4f4>
 8001124:	220f      	movs	r2, #15
 8001126:	4022      	ands	r2, r4
 8001128:	2a04      	cmp	r2, #4
 800112a:	d005      	beq.n	8001138 <__aeabi_ddiv+0x4f4>
 800112c:	0022      	movs	r2, r4
 800112e:	1d14      	adds	r4, r2, #4
 8001130:	4294      	cmp	r4, r2
 8001132:	4189      	sbcs	r1, r1
 8001134:	4249      	negs	r1, r1
 8001136:	185b      	adds	r3, r3, r1
 8001138:	021a      	lsls	r2, r3, #8
 800113a:	d562      	bpl.n	8001202 <__aeabi_ddiv+0x5be>
 800113c:	2201      	movs	r2, #1
 800113e:	2300      	movs	r3, #0
 8001140:	2700      	movs	r7, #0
 8001142:	e60d      	b.n	8000d60 <__aeabi_ddiv+0x11c>
 8001144:	428a      	cmp	r2, r1
 8001146:	d800      	bhi.n	800114a <__aeabi_ddiv+0x506>
 8001148:	e70a      	b.n	8000f60 <__aeabi_ddiv+0x31c>
 800114a:	1e83      	subs	r3, r0, #2
 800114c:	1989      	adds	r1, r1, r6
 800114e:	e707      	b.n	8000f60 <__aeabi_ddiv+0x31c>
 8001150:	230f      	movs	r3, #15
 8001152:	4013      	ands	r3, r2
 8001154:	2b04      	cmp	r3, #4
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x516>
 8001158:	e5e6      	b.n	8000d28 <__aeabi_ddiv+0xe4>
 800115a:	1d17      	adds	r7, r2, #4
 800115c:	4297      	cmp	r7, r2
 800115e:	4192      	sbcs	r2, r2
 8001160:	4253      	negs	r3, r2
 8001162:	449b      	add	fp, r3
 8001164:	08fa      	lsrs	r2, r7, #3
 8001166:	e5e0      	b.n	8000d2a <__aeabi_ddiv+0xe6>
 8001168:	2800      	cmp	r0, #0
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x52a>
 800116c:	e5d7      	b.n	8000d1e <__aeabi_ddiv+0xda>
 800116e:	1871      	adds	r1, r6, r1
 8001170:	1e53      	subs	r3, r2, #1
 8001172:	42b1      	cmp	r1, r6
 8001174:	d327      	bcc.n	80011c6 <__aeabi_ddiv+0x582>
 8001176:	42a9      	cmp	r1, r5
 8001178:	d315      	bcc.n	80011a6 <__aeabi_ddiv+0x562>
 800117a:	d058      	beq.n	800122e <__aeabi_ddiv+0x5ea>
 800117c:	001a      	movs	r2, r3
 800117e:	e773      	b.n	8001068 <__aeabi_ddiv+0x424>
 8001180:	2b00      	cmp	r3, #0
 8001182:	dc00      	bgt.n	8001186 <__aeabi_ddiv+0x542>
 8001184:	e604      	b.n	8000d90 <__aeabi_ddiv+0x14c>
 8001186:	2301      	movs	r3, #1
 8001188:	2200      	movs	r2, #0
 800118a:	449b      	add	fp, r3
 800118c:	e5cd      	b.n	8000d2a <__aeabi_ddiv+0xe6>
 800118e:	2302      	movs	r3, #2
 8001190:	4447      	add	r7, r8
 8001192:	4547      	cmp	r7, r8
 8001194:	4189      	sbcs	r1, r1
 8001196:	425b      	negs	r3, r3
 8001198:	469c      	mov	ip, r3
 800119a:	4249      	negs	r1, r1
 800119c:	1989      	adds	r1, r1, r6
 800119e:	190c      	adds	r4, r1, r4
 80011a0:	44e3      	add	fp, ip
 80011a2:	1a24      	subs	r4, r4, r0
 80011a4:	e703      	b.n	8000fae <__aeabi_ddiv+0x36a>
 80011a6:	4643      	mov	r3, r8
 80011a8:	005f      	lsls	r7, r3, #1
 80011aa:	4547      	cmp	r7, r8
 80011ac:	419b      	sbcs	r3, r3
 80011ae:	46b8      	mov	r8, r7
 80011b0:	425b      	negs	r3, r3
 80011b2:	199e      	adds	r6, r3, r6
 80011b4:	3a02      	subs	r2, #2
 80011b6:	1989      	adds	r1, r1, r6
 80011b8:	42a9      	cmp	r1, r5
 80011ba:	d000      	beq.n	80011be <__aeabi_ddiv+0x57a>
 80011bc:	e754      	b.n	8001068 <__aeabi_ddiv+0x424>
 80011be:	4540      	cmp	r0, r8
 80011c0:	d000      	beq.n	80011c4 <__aeabi_ddiv+0x580>
 80011c2:	e751      	b.n	8001068 <__aeabi_ddiv+0x424>
 80011c4:	e5ab      	b.n	8000d1e <__aeabi_ddiv+0xda>
 80011c6:	001a      	movs	r2, r3
 80011c8:	e7f6      	b.n	80011b8 <__aeabi_ddiv+0x574>
 80011ca:	211f      	movs	r1, #31
 80011cc:	465f      	mov	r7, fp
 80011ce:	4249      	negs	r1, r1
 80011d0:	1b0c      	subs	r4, r1, r4
 80011d2:	40e7      	lsrs	r7, r4
 80011d4:	2b20      	cmp	r3, #32
 80011d6:	d007      	beq.n	80011e8 <__aeabi_ddiv+0x5a4>
 80011d8:	491a      	ldr	r1, [pc, #104]	; (8001244 <__aeabi_ddiv+0x600>)
 80011da:	9b00      	ldr	r3, [sp, #0]
 80011dc:	468c      	mov	ip, r1
 80011de:	4463      	add	r3, ip
 80011e0:	0018      	movs	r0, r3
 80011e2:	465b      	mov	r3, fp
 80011e4:	4083      	lsls	r3, r0
 80011e6:	431a      	orrs	r2, r3
 80011e8:	1e50      	subs	r0, r2, #1
 80011ea:	4182      	sbcs	r2, r0
 80011ec:	433a      	orrs	r2, r7
 80011ee:	2707      	movs	r7, #7
 80011f0:	2300      	movs	r3, #0
 80011f2:	4017      	ands	r7, r2
 80011f4:	d009      	beq.n	800120a <__aeabi_ddiv+0x5c6>
 80011f6:	210f      	movs	r1, #15
 80011f8:	2300      	movs	r3, #0
 80011fa:	4011      	ands	r1, r2
 80011fc:	0014      	movs	r4, r2
 80011fe:	2904      	cmp	r1, #4
 8001200:	d195      	bne.n	800112e <__aeabi_ddiv+0x4ea>
 8001202:	0022      	movs	r2, r4
 8001204:	075f      	lsls	r7, r3, #29
 8001206:	025b      	lsls	r3, r3, #9
 8001208:	0b1b      	lsrs	r3, r3, #12
 800120a:	08d2      	lsrs	r2, r2, #3
 800120c:	4317      	orrs	r7, r2
 800120e:	2200      	movs	r2, #0
 8001210:	e5a6      	b.n	8000d60 <__aeabi_ddiv+0x11c>
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	4659      	mov	r1, fp
 8001216:	031b      	lsls	r3, r3, #12
 8001218:	430b      	orrs	r3, r1
 800121a:	031b      	lsls	r3, r3, #12
 800121c:	0017      	movs	r7, r2
 800121e:	0b1b      	lsrs	r3, r3, #12
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <__aeabi_ddiv+0x5f8>)
 8001222:	e59d      	b.n	8000d60 <__aeabi_ddiv+0x11c>
 8001224:	42bd      	cmp	r5, r7
 8001226:	d8b2      	bhi.n	800118e <__aeabi_ddiv+0x54a>
 8001228:	469b      	mov	fp, r3
 800122a:	2400      	movs	r4, #0
 800122c:	e6bf      	b.n	8000fae <__aeabi_ddiv+0x36a>
 800122e:	4580      	cmp	r8, r0
 8001230:	d3b9      	bcc.n	80011a6 <__aeabi_ddiv+0x562>
 8001232:	001a      	movs	r2, r3
 8001234:	e7c3      	b.n	80011be <__aeabi_ddiv+0x57a>
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	000003ff 	.word	0x000003ff
 800123c:	000007ff 	.word	0x000007ff
 8001240:	0000041e 	.word	0x0000041e
 8001244:	0000043e 	.word	0x0000043e

08001248 <__aeabi_i2d>:
 8001248:	b570      	push	{r4, r5, r6, lr}
 800124a:	2800      	cmp	r0, #0
 800124c:	d02d      	beq.n	80012aa <__aeabi_i2d+0x62>
 800124e:	17c3      	asrs	r3, r0, #31
 8001250:	18c5      	adds	r5, r0, r3
 8001252:	405d      	eors	r5, r3
 8001254:	0fc4      	lsrs	r4, r0, #31
 8001256:	0028      	movs	r0, r5
 8001258:	f000 f8ee 	bl	8001438 <__clzsi2>
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <__aeabi_i2d+0x6c>)
 800125e:	1a1b      	subs	r3, r3, r0
 8001260:	055b      	lsls	r3, r3, #21
 8001262:	0d5b      	lsrs	r3, r3, #21
 8001264:	280a      	cmp	r0, #10
 8001266:	dd15      	ble.n	8001294 <__aeabi_i2d+0x4c>
 8001268:	380b      	subs	r0, #11
 800126a:	4085      	lsls	r5, r0
 800126c:	2200      	movs	r2, #0
 800126e:	032d      	lsls	r5, r5, #12
 8001270:	0b2d      	lsrs	r5, r5, #12
 8001272:	2100      	movs	r1, #0
 8001274:	0010      	movs	r0, r2
 8001276:	032d      	lsls	r5, r5, #12
 8001278:	0d0a      	lsrs	r2, r1, #20
 800127a:	0b2d      	lsrs	r5, r5, #12
 800127c:	0512      	lsls	r2, r2, #20
 800127e:	432a      	orrs	r2, r5
 8001280:	4d0d      	ldr	r5, [pc, #52]	; (80012b8 <__aeabi_i2d+0x70>)
 8001282:	051b      	lsls	r3, r3, #20
 8001284:	402a      	ands	r2, r5
 8001286:	4313      	orrs	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	07e4      	lsls	r4, r4, #31
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	4323      	orrs	r3, r4
 8001290:	0019      	movs	r1, r3
 8001292:	bd70      	pop	{r4, r5, r6, pc}
 8001294:	0002      	movs	r2, r0
 8001296:	0029      	movs	r1, r5
 8001298:	3215      	adds	r2, #21
 800129a:	4091      	lsls	r1, r2
 800129c:	000a      	movs	r2, r1
 800129e:	210b      	movs	r1, #11
 80012a0:	1a08      	subs	r0, r1, r0
 80012a2:	40c5      	lsrs	r5, r0
 80012a4:	032d      	lsls	r5, r5, #12
 80012a6:	0b2d      	lsrs	r5, r5, #12
 80012a8:	e7e3      	b.n	8001272 <__aeabi_i2d+0x2a>
 80012aa:	2400      	movs	r4, #0
 80012ac:	2300      	movs	r3, #0
 80012ae:	2500      	movs	r5, #0
 80012b0:	2200      	movs	r2, #0
 80012b2:	e7de      	b.n	8001272 <__aeabi_i2d+0x2a>
 80012b4:	0000041e 	.word	0x0000041e
 80012b8:	800fffff 	.word	0x800fffff

080012bc <__aeabi_d2f>:
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	004c      	lsls	r4, r1, #1
 80012c0:	0d64      	lsrs	r4, r4, #21
 80012c2:	030b      	lsls	r3, r1, #12
 80012c4:	1c62      	adds	r2, r4, #1
 80012c6:	0a5b      	lsrs	r3, r3, #9
 80012c8:	0f46      	lsrs	r6, r0, #29
 80012ca:	0552      	lsls	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	431e      	orrs	r6, r3
 80012d0:	00c5      	lsls	r5, r0, #3
 80012d2:	0d52      	lsrs	r2, r2, #21
 80012d4:	2a01      	cmp	r2, #1
 80012d6:	dd29      	ble.n	800132c <__aeabi_d2f+0x70>
 80012d8:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <__aeabi_d2f+0xfc>)
 80012da:	18e7      	adds	r7, r4, r3
 80012dc:	2ffe      	cmp	r7, #254	; 0xfe
 80012de:	dc1c      	bgt.n	800131a <__aeabi_d2f+0x5e>
 80012e0:	2f00      	cmp	r7, #0
 80012e2:	dd3b      	ble.n	800135c <__aeabi_d2f+0xa0>
 80012e4:	0180      	lsls	r0, r0, #6
 80012e6:	1e43      	subs	r3, r0, #1
 80012e8:	4198      	sbcs	r0, r3
 80012ea:	2207      	movs	r2, #7
 80012ec:	00f3      	lsls	r3, r6, #3
 80012ee:	0f6d      	lsrs	r5, r5, #29
 80012f0:	4303      	orrs	r3, r0
 80012f2:	432b      	orrs	r3, r5
 80012f4:	401a      	ands	r2, r3
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	d004      	beq.n	8001304 <__aeabi_d2f+0x48>
 80012fa:	220f      	movs	r2, #15
 80012fc:	401a      	ands	r2, r3
 80012fe:	2a04      	cmp	r2, #4
 8001300:	d000      	beq.n	8001304 <__aeabi_d2f+0x48>
 8001302:	3304      	adds	r3, #4
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	04d2      	lsls	r2, r2, #19
 8001308:	401a      	ands	r2, r3
 800130a:	d024      	beq.n	8001356 <__aeabi_d2f+0x9a>
 800130c:	3701      	adds	r7, #1
 800130e:	b2fa      	uxtb	r2, r7
 8001310:	2fff      	cmp	r7, #255	; 0xff
 8001312:	d002      	beq.n	800131a <__aeabi_d2f+0x5e>
 8001314:	019b      	lsls	r3, r3, #6
 8001316:	0a58      	lsrs	r0, r3, #9
 8001318:	e001      	b.n	800131e <__aeabi_d2f+0x62>
 800131a:	22ff      	movs	r2, #255	; 0xff
 800131c:	2000      	movs	r0, #0
 800131e:	0240      	lsls	r0, r0, #9
 8001320:	05d2      	lsls	r2, r2, #23
 8001322:	0a40      	lsrs	r0, r0, #9
 8001324:	07c9      	lsls	r1, r1, #31
 8001326:	4310      	orrs	r0, r2
 8001328:	4308      	orrs	r0, r1
 800132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132c:	4335      	orrs	r5, r6
 800132e:	2c00      	cmp	r4, #0
 8001330:	d104      	bne.n	800133c <__aeabi_d2f+0x80>
 8001332:	2d00      	cmp	r5, #0
 8001334:	d10a      	bne.n	800134c <__aeabi_d2f+0x90>
 8001336:	2200      	movs	r2, #0
 8001338:	2000      	movs	r0, #0
 800133a:	e7f0      	b.n	800131e <__aeabi_d2f+0x62>
 800133c:	2d00      	cmp	r5, #0
 800133e:	d0ec      	beq.n	800131a <__aeabi_d2f+0x5e>
 8001340:	2080      	movs	r0, #128	; 0x80
 8001342:	03c0      	lsls	r0, r0, #15
 8001344:	4330      	orrs	r0, r6
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	e7e9      	b.n	800131e <__aeabi_d2f+0x62>
 800134a:	2400      	movs	r4, #0
 800134c:	2300      	movs	r3, #0
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	0a58      	lsrs	r0, r3, #9
 8001352:	b2e2      	uxtb	r2, r4
 8001354:	e7e3      	b.n	800131e <__aeabi_d2f+0x62>
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	003c      	movs	r4, r7
 800135a:	e7f8      	b.n	800134e <__aeabi_d2f+0x92>
 800135c:	003b      	movs	r3, r7
 800135e:	3317      	adds	r3, #23
 8001360:	dbf3      	blt.n	800134a <__aeabi_d2f+0x8e>
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	4333      	orrs	r3, r6
 8001368:	261e      	movs	r6, #30
 800136a:	1bf6      	subs	r6, r6, r7
 800136c:	2e1f      	cmp	r6, #31
 800136e:	dd14      	ble.n	800139a <__aeabi_d2f+0xde>
 8001370:	2202      	movs	r2, #2
 8001372:	4252      	negs	r2, r2
 8001374:	1bd7      	subs	r7, r2, r7
 8001376:	001a      	movs	r2, r3
 8001378:	40fa      	lsrs	r2, r7
 800137a:	0017      	movs	r7, r2
 800137c:	2e20      	cmp	r6, #32
 800137e:	d004      	beq.n	800138a <__aeabi_d2f+0xce>
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <__aeabi_d2f+0x100>)
 8001382:	4694      	mov	ip, r2
 8001384:	4464      	add	r4, ip
 8001386:	40a3      	lsls	r3, r4
 8001388:	431d      	orrs	r5, r3
 800138a:	002b      	movs	r3, r5
 800138c:	1e5d      	subs	r5, r3, #1
 800138e:	41ab      	sbcs	r3, r5
 8001390:	2207      	movs	r2, #7
 8001392:	433b      	orrs	r3, r7
 8001394:	401a      	ands	r2, r3
 8001396:	2700      	movs	r7, #0
 8001398:	e7ad      	b.n	80012f6 <__aeabi_d2f+0x3a>
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <__aeabi_d2f+0x104>)
 800139c:	0028      	movs	r0, r5
 800139e:	18a2      	adds	r2, r4, r2
 80013a0:	4095      	lsls	r5, r2
 80013a2:	4093      	lsls	r3, r2
 80013a4:	1e6c      	subs	r4, r5, #1
 80013a6:	41a5      	sbcs	r5, r4
 80013a8:	40f0      	lsrs	r0, r6
 80013aa:	2207      	movs	r2, #7
 80013ac:	432b      	orrs	r3, r5
 80013ae:	4303      	orrs	r3, r0
 80013b0:	401a      	ands	r2, r3
 80013b2:	2700      	movs	r7, #0
 80013b4:	e79f      	b.n	80012f6 <__aeabi_d2f+0x3a>
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	fffffc80 	.word	0xfffffc80
 80013bc:	fffffca2 	.word	0xfffffca2
 80013c0:	fffffc82 	.word	0xfffffc82

080013c4 <__aeabi_cfrcmple>:
 80013c4:	4684      	mov	ip, r0
 80013c6:	1c08      	adds	r0, r1, #0
 80013c8:	4661      	mov	r1, ip
 80013ca:	e7ff      	b.n	80013cc <__aeabi_cfcmpeq>

080013cc <__aeabi_cfcmpeq>:
 80013cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80013ce:	f000 f8c7 	bl	8001560 <__lesf2>
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d401      	bmi.n	80013da <__aeabi_cfcmpeq+0xe>
 80013d6:	2100      	movs	r1, #0
 80013d8:	42c8      	cmn	r0, r1
 80013da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080013dc <__aeabi_fcmpeq>:
 80013dc:	b510      	push	{r4, lr}
 80013de:	f000 f849 	bl	8001474 <__eqsf2>
 80013e2:	4240      	negs	r0, r0
 80013e4:	3001      	adds	r0, #1
 80013e6:	bd10      	pop	{r4, pc}

080013e8 <__aeabi_fcmplt>:
 80013e8:	b510      	push	{r4, lr}
 80013ea:	f000 f8b9 	bl	8001560 <__lesf2>
 80013ee:	2800      	cmp	r0, #0
 80013f0:	db01      	blt.n	80013f6 <__aeabi_fcmplt+0xe>
 80013f2:	2000      	movs	r0, #0
 80013f4:	bd10      	pop	{r4, pc}
 80013f6:	2001      	movs	r0, #1
 80013f8:	bd10      	pop	{r4, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)

080013fc <__aeabi_fcmple>:
 80013fc:	b510      	push	{r4, lr}
 80013fe:	f000 f8af 	bl	8001560 <__lesf2>
 8001402:	2800      	cmp	r0, #0
 8001404:	dd01      	ble.n	800140a <__aeabi_fcmple+0xe>
 8001406:	2000      	movs	r0, #0
 8001408:	bd10      	pop	{r4, pc}
 800140a:	2001      	movs	r0, #1
 800140c:	bd10      	pop	{r4, pc}
 800140e:	46c0      	nop			; (mov r8, r8)

08001410 <__aeabi_fcmpgt>:
 8001410:	b510      	push	{r4, lr}
 8001412:	f000 f857 	bl	80014c4 <__gesf2>
 8001416:	2800      	cmp	r0, #0
 8001418:	dc01      	bgt.n	800141e <__aeabi_fcmpgt+0xe>
 800141a:	2000      	movs	r0, #0
 800141c:	bd10      	pop	{r4, pc}
 800141e:	2001      	movs	r0, #1
 8001420:	bd10      	pop	{r4, pc}
 8001422:	46c0      	nop			; (mov r8, r8)

08001424 <__aeabi_fcmpge>:
 8001424:	b510      	push	{r4, lr}
 8001426:	f000 f84d 	bl	80014c4 <__gesf2>
 800142a:	2800      	cmp	r0, #0
 800142c:	da01      	bge.n	8001432 <__aeabi_fcmpge+0xe>
 800142e:	2000      	movs	r0, #0
 8001430:	bd10      	pop	{r4, pc}
 8001432:	2001      	movs	r0, #1
 8001434:	bd10      	pop	{r4, pc}
 8001436:	46c0      	nop			; (mov r8, r8)

08001438 <__clzsi2>:
 8001438:	211c      	movs	r1, #28
 800143a:	2301      	movs	r3, #1
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	4298      	cmp	r0, r3
 8001440:	d301      	bcc.n	8001446 <__clzsi2+0xe>
 8001442:	0c00      	lsrs	r0, r0, #16
 8001444:	3910      	subs	r1, #16
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	4298      	cmp	r0, r3
 800144a:	d301      	bcc.n	8001450 <__clzsi2+0x18>
 800144c:	0a00      	lsrs	r0, r0, #8
 800144e:	3908      	subs	r1, #8
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	4298      	cmp	r0, r3
 8001454:	d301      	bcc.n	800145a <__clzsi2+0x22>
 8001456:	0900      	lsrs	r0, r0, #4
 8001458:	3904      	subs	r1, #4
 800145a:	a202      	add	r2, pc, #8	; (adr r2, 8001464 <__clzsi2+0x2c>)
 800145c:	5c10      	ldrb	r0, [r2, r0]
 800145e:	1840      	adds	r0, r0, r1
 8001460:	4770      	bx	lr
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	02020304 	.word	0x02020304
 8001468:	01010101 	.word	0x01010101
	...

08001474 <__eqsf2>:
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	0042      	lsls	r2, r0, #1
 8001478:	024e      	lsls	r6, r1, #9
 800147a:	004c      	lsls	r4, r1, #1
 800147c:	0245      	lsls	r5, r0, #9
 800147e:	0a6d      	lsrs	r5, r5, #9
 8001480:	0e12      	lsrs	r2, r2, #24
 8001482:	0fc3      	lsrs	r3, r0, #31
 8001484:	0a76      	lsrs	r6, r6, #9
 8001486:	0e24      	lsrs	r4, r4, #24
 8001488:	0fc9      	lsrs	r1, r1, #31
 800148a:	2aff      	cmp	r2, #255	; 0xff
 800148c:	d00f      	beq.n	80014ae <__eqsf2+0x3a>
 800148e:	2cff      	cmp	r4, #255	; 0xff
 8001490:	d011      	beq.n	80014b6 <__eqsf2+0x42>
 8001492:	2001      	movs	r0, #1
 8001494:	42a2      	cmp	r2, r4
 8001496:	d000      	beq.n	800149a <__eqsf2+0x26>
 8001498:	bd70      	pop	{r4, r5, r6, pc}
 800149a:	42b5      	cmp	r5, r6
 800149c:	d1fc      	bne.n	8001498 <__eqsf2+0x24>
 800149e:	428b      	cmp	r3, r1
 80014a0:	d00d      	beq.n	80014be <__eqsf2+0x4a>
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d1f8      	bne.n	8001498 <__eqsf2+0x24>
 80014a6:	0028      	movs	r0, r5
 80014a8:	1e45      	subs	r5, r0, #1
 80014aa:	41a8      	sbcs	r0, r5
 80014ac:	e7f4      	b.n	8001498 <__eqsf2+0x24>
 80014ae:	2001      	movs	r0, #1
 80014b0:	2d00      	cmp	r5, #0
 80014b2:	d1f1      	bne.n	8001498 <__eqsf2+0x24>
 80014b4:	e7eb      	b.n	800148e <__eqsf2+0x1a>
 80014b6:	2001      	movs	r0, #1
 80014b8:	2e00      	cmp	r6, #0
 80014ba:	d1ed      	bne.n	8001498 <__eqsf2+0x24>
 80014bc:	e7e9      	b.n	8001492 <__eqsf2+0x1e>
 80014be:	2000      	movs	r0, #0
 80014c0:	e7ea      	b.n	8001498 <__eqsf2+0x24>
 80014c2:	46c0      	nop			; (mov r8, r8)

080014c4 <__gesf2>:
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	004a      	lsls	r2, r1, #1
 80014c8:	024e      	lsls	r6, r1, #9
 80014ca:	0245      	lsls	r5, r0, #9
 80014cc:	0044      	lsls	r4, r0, #1
 80014ce:	0a6d      	lsrs	r5, r5, #9
 80014d0:	0e24      	lsrs	r4, r4, #24
 80014d2:	0fc3      	lsrs	r3, r0, #31
 80014d4:	0a76      	lsrs	r6, r6, #9
 80014d6:	0e12      	lsrs	r2, r2, #24
 80014d8:	0fc9      	lsrs	r1, r1, #31
 80014da:	2cff      	cmp	r4, #255	; 0xff
 80014dc:	d015      	beq.n	800150a <__gesf2+0x46>
 80014de:	2aff      	cmp	r2, #255	; 0xff
 80014e0:	d00e      	beq.n	8001500 <__gesf2+0x3c>
 80014e2:	2c00      	cmp	r4, #0
 80014e4:	d115      	bne.n	8001512 <__gesf2+0x4e>
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d101      	bne.n	80014ee <__gesf2+0x2a>
 80014ea:	2e00      	cmp	r6, #0
 80014ec:	d01c      	beq.n	8001528 <__gesf2+0x64>
 80014ee:	2d00      	cmp	r5, #0
 80014f0:	d014      	beq.n	800151c <__gesf2+0x58>
 80014f2:	428b      	cmp	r3, r1
 80014f4:	d027      	beq.n	8001546 <__gesf2+0x82>
 80014f6:	2002      	movs	r0, #2
 80014f8:	3b01      	subs	r3, #1
 80014fa:	4018      	ands	r0, r3
 80014fc:	3801      	subs	r0, #1
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
 8001500:	2e00      	cmp	r6, #0
 8001502:	d0ee      	beq.n	80014e2 <__gesf2+0x1e>
 8001504:	2002      	movs	r0, #2
 8001506:	4240      	negs	r0, r0
 8001508:	e7f9      	b.n	80014fe <__gesf2+0x3a>
 800150a:	2d00      	cmp	r5, #0
 800150c:	d1fa      	bne.n	8001504 <__gesf2+0x40>
 800150e:	2aff      	cmp	r2, #255	; 0xff
 8001510:	d00e      	beq.n	8001530 <__gesf2+0x6c>
 8001512:	2a00      	cmp	r2, #0
 8001514:	d10e      	bne.n	8001534 <__gesf2+0x70>
 8001516:	2e00      	cmp	r6, #0
 8001518:	d0ed      	beq.n	80014f6 <__gesf2+0x32>
 800151a:	e00b      	b.n	8001534 <__gesf2+0x70>
 800151c:	2301      	movs	r3, #1
 800151e:	3901      	subs	r1, #1
 8001520:	4399      	bics	r1, r3
 8001522:	0008      	movs	r0, r1
 8001524:	3001      	adds	r0, #1
 8001526:	e7ea      	b.n	80014fe <__gesf2+0x3a>
 8001528:	2000      	movs	r0, #0
 800152a:	2d00      	cmp	r5, #0
 800152c:	d0e7      	beq.n	80014fe <__gesf2+0x3a>
 800152e:	e7e2      	b.n	80014f6 <__gesf2+0x32>
 8001530:	2e00      	cmp	r6, #0
 8001532:	d1e7      	bne.n	8001504 <__gesf2+0x40>
 8001534:	428b      	cmp	r3, r1
 8001536:	d1de      	bne.n	80014f6 <__gesf2+0x32>
 8001538:	4294      	cmp	r4, r2
 800153a:	dd05      	ble.n	8001548 <__gesf2+0x84>
 800153c:	2102      	movs	r1, #2
 800153e:	1e58      	subs	r0, r3, #1
 8001540:	4008      	ands	r0, r1
 8001542:	3801      	subs	r0, #1
 8001544:	e7db      	b.n	80014fe <__gesf2+0x3a>
 8001546:	2400      	movs	r4, #0
 8001548:	42a2      	cmp	r2, r4
 800154a:	dc04      	bgt.n	8001556 <__gesf2+0x92>
 800154c:	42b5      	cmp	r5, r6
 800154e:	d8d2      	bhi.n	80014f6 <__gesf2+0x32>
 8001550:	2000      	movs	r0, #0
 8001552:	42b5      	cmp	r5, r6
 8001554:	d2d3      	bcs.n	80014fe <__gesf2+0x3a>
 8001556:	1e58      	subs	r0, r3, #1
 8001558:	2301      	movs	r3, #1
 800155a:	4398      	bics	r0, r3
 800155c:	3001      	adds	r0, #1
 800155e:	e7ce      	b.n	80014fe <__gesf2+0x3a>

08001560 <__lesf2>:
 8001560:	b530      	push	{r4, r5, lr}
 8001562:	0042      	lsls	r2, r0, #1
 8001564:	0244      	lsls	r4, r0, #9
 8001566:	024d      	lsls	r5, r1, #9
 8001568:	0fc3      	lsrs	r3, r0, #31
 800156a:	0048      	lsls	r0, r1, #1
 800156c:	0a64      	lsrs	r4, r4, #9
 800156e:	0e12      	lsrs	r2, r2, #24
 8001570:	0a6d      	lsrs	r5, r5, #9
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	0fc9      	lsrs	r1, r1, #31
 8001576:	2aff      	cmp	r2, #255	; 0xff
 8001578:	d012      	beq.n	80015a0 <__lesf2+0x40>
 800157a:	28ff      	cmp	r0, #255	; 0xff
 800157c:	d00c      	beq.n	8001598 <__lesf2+0x38>
 800157e:	2a00      	cmp	r2, #0
 8001580:	d112      	bne.n	80015a8 <__lesf2+0x48>
 8001582:	2800      	cmp	r0, #0
 8001584:	d119      	bne.n	80015ba <__lesf2+0x5a>
 8001586:	2d00      	cmp	r5, #0
 8001588:	d117      	bne.n	80015ba <__lesf2+0x5a>
 800158a:	2c00      	cmp	r4, #0
 800158c:	d02b      	beq.n	80015e6 <__lesf2+0x86>
 800158e:	2002      	movs	r0, #2
 8001590:	3b01      	subs	r3, #1
 8001592:	4018      	ands	r0, r3
 8001594:	3801      	subs	r0, #1
 8001596:	e026      	b.n	80015e6 <__lesf2+0x86>
 8001598:	2d00      	cmp	r5, #0
 800159a:	d0f0      	beq.n	800157e <__lesf2+0x1e>
 800159c:	2002      	movs	r0, #2
 800159e:	e022      	b.n	80015e6 <__lesf2+0x86>
 80015a0:	2c00      	cmp	r4, #0
 80015a2:	d1fb      	bne.n	800159c <__lesf2+0x3c>
 80015a4:	28ff      	cmp	r0, #255	; 0xff
 80015a6:	d01f      	beq.n	80015e8 <__lesf2+0x88>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d11f      	bne.n	80015ec <__lesf2+0x8c>
 80015ac:	2d00      	cmp	r5, #0
 80015ae:	d11d      	bne.n	80015ec <__lesf2+0x8c>
 80015b0:	2002      	movs	r0, #2
 80015b2:	3b01      	subs	r3, #1
 80015b4:	4018      	ands	r0, r3
 80015b6:	3801      	subs	r0, #1
 80015b8:	e015      	b.n	80015e6 <__lesf2+0x86>
 80015ba:	2c00      	cmp	r4, #0
 80015bc:	d00e      	beq.n	80015dc <__lesf2+0x7c>
 80015be:	428b      	cmp	r3, r1
 80015c0:	d1e5      	bne.n	800158e <__lesf2+0x2e>
 80015c2:	2200      	movs	r2, #0
 80015c4:	4290      	cmp	r0, r2
 80015c6:	dc04      	bgt.n	80015d2 <__lesf2+0x72>
 80015c8:	42ac      	cmp	r4, r5
 80015ca:	d8e0      	bhi.n	800158e <__lesf2+0x2e>
 80015cc:	2000      	movs	r0, #0
 80015ce:	42ac      	cmp	r4, r5
 80015d0:	d209      	bcs.n	80015e6 <__lesf2+0x86>
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	2301      	movs	r3, #1
 80015d6:	4398      	bics	r0, r3
 80015d8:	3001      	adds	r0, #1
 80015da:	e004      	b.n	80015e6 <__lesf2+0x86>
 80015dc:	2301      	movs	r3, #1
 80015de:	3901      	subs	r1, #1
 80015e0:	4399      	bics	r1, r3
 80015e2:	0008      	movs	r0, r1
 80015e4:	3001      	adds	r0, #1
 80015e6:	bd30      	pop	{r4, r5, pc}
 80015e8:	2d00      	cmp	r5, #0
 80015ea:	d1d7      	bne.n	800159c <__lesf2+0x3c>
 80015ec:	428b      	cmp	r3, r1
 80015ee:	d1ce      	bne.n	800158e <__lesf2+0x2e>
 80015f0:	4282      	cmp	r2, r0
 80015f2:	dde7      	ble.n	80015c4 <__lesf2+0x64>
 80015f4:	2102      	movs	r1, #2
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	4008      	ands	r0, r1
 80015fa:	3801      	subs	r0, #1
 80015fc:	e7f3      	b.n	80015e6 <__lesf2+0x86>
 80015fe:	46c0      	nop			; (mov r8, r8)

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001604:	f000 fb9c 	bl	8001d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f862 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f000 f9c0 	bl	8001990 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001610:	f000 f98e 	bl	8001930 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001614:	f000 f8ae 	bl	8001774 <MX_ADC_Init>
  MX_TIM3_Init();
 8001618:	f000 f908 	bl	800182c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <main+0xb0>)
 800161e:	2100      	movs	r1, #0
 8001620:	0018      	movs	r0, r3
 8001622:	f001 fe81 	bl	8003328 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc);
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <main+0xb4>)
 8001628:	0018      	movs	r0, r3
 800162a:	f000 fd4f 	bl	80020cc <HAL_ADC_Start>
	  adc_r = HAL_ADC_GetValue(&hadc);
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <main+0xb4>)
 8001630:	0018      	movs	r0, r3
 8001632:	f000 fd9f 	bl	8002174 <HAL_ADC_GetValue>
 8001636:	0003      	movs	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <main+0xb8>)
 800163c:	801a      	strh	r2, [r3, #0]
	  temp = ((lastPos - initPos) / 1024.0);
 800163e:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <main+0xbc>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	001a      	movs	r2, r3
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <main+0xc0>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	0018      	movs	r0, r3
 800164c:	f7ff fdfc 	bl	8001248 <__aeabi_i2d>
 8001650:	2200      	movs	r2, #0
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <main+0xc4>)
 8001654:	f7ff faf6 	bl	8000c44 <__aeabi_ddiv>
 8001658:	0003      	movs	r3, r0
 800165a:	000c      	movs	r4, r1
 800165c:	0018      	movs	r0, r3
 800165e:	0021      	movs	r1, r4
 8001660:	f7ff fe2c 	bl	80012bc <__aeabi_d2f>
 8001664:	1c02      	adds	r2, r0, #0
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <main+0xc8>)
 8001668:	601a      	str	r2, [r3, #0]
	  TIM3->CCR1 = (adc_r * temp) + initPos;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <main+0xb8>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff fa9e 	bl	8000bb0 <__aeabi_i2f>
 8001674:	1c02      	adds	r2, r0, #0
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <main+0xc8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	1c19      	adds	r1, r3, #0
 800167c:	1c10      	adds	r0, r2, #0
 800167e:	f7fe ff81 	bl	8000584 <__aeabi_fmul>
 8001682:	1c03      	adds	r3, r0, #0
 8001684:	1c1c      	adds	r4, r3, #0
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <main+0xc0>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff fa90 	bl	8000bb0 <__aeabi_i2f>
 8001690:	1c03      	adds	r3, r0, #0
 8001692:	1c19      	adds	r1, r3, #0
 8001694:	1c20      	adds	r0, r4, #0
 8001696:	f7fe fddb 	bl	8000250 <__aeabi_fadd>
 800169a:	1c03      	adds	r3, r0, #0
 800169c:	4c0b      	ldr	r4, [pc, #44]	; (80016cc <main+0xcc>)
 800169e:	1c18      	adds	r0, r3, #0
 80016a0:	f7fe fdbe 	bl	8000220 <__aeabi_f2uiz>
 80016a4:	0003      	movs	r3, r0
 80016a6:	6363      	str	r3, [r4, #52]	; 0x34
	  HAL_Delay(20);
 80016a8:	2014      	movs	r0, #20
 80016aa:	f000 fbad 	bl	8001e08 <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 80016ae:	e7ba      	b.n	8001626 <main+0x26>
 80016b0:	20000030 	.word	0x20000030
 80016b4:	20000100 	.word	0x20000100
 80016b8:	20000078 	.word	0x20000078
 80016bc:	20000001 	.word	0x20000001
 80016c0:	20000000 	.word	0x20000000
 80016c4:	40900000 	.word	0x40900000
 80016c8:	2000002c 	.word	0x2000002c
 80016cc:	40000400 	.word	0x40000400

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b091      	sub	sp, #68	; 0x44
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	2410      	movs	r4, #16
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	0018      	movs	r0, r3
 80016dc:	2330      	movs	r3, #48	; 0x30
 80016de:	001a      	movs	r2, r3
 80016e0:	2100      	movs	r1, #0
 80016e2:	f002 ff13 	bl	800450c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e6:	003b      	movs	r3, r7
 80016e8:	0018      	movs	r0, r3
 80016ea:	2310      	movs	r3, #16
 80016ec:	001a      	movs	r2, r3
 80016ee:	2100      	movs	r1, #0
 80016f0:	f002 ff0c 	bl	800450c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80016f4:	0021      	movs	r1, r4
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	2212      	movs	r2, #18
 80016fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	2201      	movs	r2, #1
 8001700:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2201      	movs	r2, #1
 8001706:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001708:	187b      	adds	r3, r7, r1
 800170a:	2210      	movs	r2, #16
 800170c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800170e:	187b      	adds	r3, r7, r1
 8001710:	2210      	movs	r2, #16
 8001712:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001714:	187b      	adds	r3, r7, r1
 8001716:	2202      	movs	r2, #2
 8001718:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800171a:	187b      	adds	r3, r7, r1
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	0212      	lsls	r2, r2, #8
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	0352      	lsls	r2, r2, #13
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800172a:	187b      	adds	r3, r7, r1
 800172c:	2200      	movs	r2, #0
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	187b      	adds	r3, r7, r1
 8001732:	0018      	movs	r0, r3
 8001734:	f001 f8de 	bl	80028f4 <HAL_RCC_OscConfig>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800173c:	f000 f9a0 	bl	8001a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001740:	003b      	movs	r3, r7
 8001742:	2207      	movs	r2, #7
 8001744:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001746:	003b      	movs	r3, r7
 8001748:	2202      	movs	r2, #2
 800174a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	003b      	movs	r3, r7
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001752:	003b      	movs	r3, r7
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001758:	003b      	movs	r3, r7
 800175a:	2101      	movs	r1, #1
 800175c:	0018      	movs	r0, r3
 800175e:	f001 fbe7 	bl	8002f30 <HAL_RCC_ClockConfig>
 8001762:	1e03      	subs	r3, r0, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001766:	f000 f98b 	bl	8001a80 <Error_Handler>
  }
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b011      	add	sp, #68	; 0x44
 8001770:	bd90      	pop	{r4, r7, pc}
	...

08001774 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	0018      	movs	r0, r3
 800177e:	230c      	movs	r3, #12
 8001780:	001a      	movs	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	f002 fec2 	bl	800450c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <MX_ADC_Init+0xb0>)
 800178a:	4a27      	ldr	r2, [pc, #156]	; (8001828 <MX_ADC_Init+0xb4>)
 800178c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <MX_ADC_Init+0xb0>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <MX_ADC_Init+0xb0>)
 8001796:	2208      	movs	r2, #8
 8001798:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <MX_ADC_Init+0xb0>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <MX_ADC_Init+0xb0>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <MX_ADC_Init+0xb0>)
 80017a8:	2204      	movs	r2, #4
 80017aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_ADC_Init+0xb0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_ADC_Init+0xb0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_ADC_Init+0xb0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_ADC_Init+0xb0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_ADC_Init+0xb0>)
 80017c6:	22c2      	movs	r2, #194	; 0xc2
 80017c8:	32ff      	adds	r2, #255	; 0xff
 80017ca:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_ADC_Init+0xb0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_ADC_Init+0xb0>)
 80017d4:	2224      	movs	r2, #36	; 0x24
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_ADC_Init+0xb0>)
 80017dc:	2201      	movs	r2, #1
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_ADC_Init+0xb0>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fb32 	bl	8001e4c <HAL_ADC_Init>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80017ec:	f000 f948 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	220a      	movs	r2, #10
 80017f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	0152      	lsls	r2, r2, #5
 80017fc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	0552      	lsls	r2, r2, #21
 8001804:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001806:	1d3a      	adds	r2, r7, #4
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_ADC_Init+0xb0>)
 800180a:	0011      	movs	r1, r2
 800180c:	0018      	movs	r0, r3
 800180e:	f000 fcbd 	bl	800218c <HAL_ADC_ConfigChannel>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d001      	beq.n	800181a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001816:	f000 f933 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b004      	add	sp, #16
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	20000100 	.word	0x20000100
 8001828:	40012400 	.word	0x40012400

0800182c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08e      	sub	sp, #56	; 0x38
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001832:	2328      	movs	r3, #40	; 0x28
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	0018      	movs	r0, r3
 8001838:	2310      	movs	r3, #16
 800183a:	001a      	movs	r2, r3
 800183c:	2100      	movs	r1, #0
 800183e:	f002 fe65 	bl	800450c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001842:	2320      	movs	r3, #32
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	0018      	movs	r0, r3
 8001848:	2308      	movs	r3, #8
 800184a:	001a      	movs	r2, r3
 800184c:	2100      	movs	r1, #0
 800184e:	f002 fe5d 	bl	800450c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	0018      	movs	r0, r3
 8001856:	231c      	movs	r3, #28
 8001858:	001a      	movs	r2, r3
 800185a:	2100      	movs	r1, #0
 800185c:	f002 fe56 	bl	800450c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <MX_TIM3_Init+0xf4>)
 8001862:	4a30      	ldr	r2, [pc, #192]	; (8001924 <MX_TIM3_Init+0xf8>)
 8001864:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 937;
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <MX_TIM3_Init+0xf4>)
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <MX_TIM3_Init+0xfc>)
 800186a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <MX_TIM3_Init+0xf4>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <MX_TIM3_Init+0xf4>)
 8001874:	4a2d      	ldr	r2, [pc, #180]	; (800192c <MX_TIM3_Init+0x100>)
 8001876:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <MX_TIM3_Init+0xf4>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <MX_TIM3_Init+0xf4>)
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <MX_TIM3_Init+0xf4>)
 8001886:	0018      	movs	r0, r3
 8001888:	f001 fca6 	bl	80031d8 <HAL_TIM_Base_Init>
 800188c:	1e03      	subs	r3, r0, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001890:	f000 f8f6 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001894:	2128      	movs	r1, #40	; 0x28
 8001896:	187b      	adds	r3, r7, r1
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	0152      	lsls	r2, r2, #5
 800189c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800189e:	187a      	adds	r2, r7, r1
 80018a0:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <MX_TIM3_Init+0xf4>)
 80018a2:	0011      	movs	r1, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	f001 fea1 	bl	80035ec <HAL_TIM_ConfigClockSource>
 80018aa:	1e03      	subs	r3, r0, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80018ae:	f000 f8e7 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_TIM3_Init+0xf4>)
 80018b4:	0018      	movs	r0, r3
 80018b6:	f001 fcdf 	bl	8003278 <HAL_TIM_PWM_Init>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80018be:	f000 f8df 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2120      	movs	r1, #32
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2200      	movs	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018d0:	187a      	adds	r2, r7, r1
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MX_TIM3_Init+0xf4>)
 80018d4:	0011      	movs	r1, r2
 80018d6:	0018      	movs	r0, r3
 80018d8:	f002 fa76 	bl	8003dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	1e03      	subs	r3, r0, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80018e0:	f000 f8ce 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2260      	movs	r2, #96	; 0x60
 80018e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fc:	1d39      	adds	r1, r7, #4
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_TIM3_Init+0xf4>)
 8001900:	2200      	movs	r2, #0
 8001902:	0018      	movs	r0, r3
 8001904:	f001 fdc2 	bl	800348c <HAL_TIM_PWM_ConfigChannel>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800190c:	f000 f8b8 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <MX_TIM3_Init+0xf4>)
 8001912:	0018      	movs	r0, r3
 8001914:	f000 f942 	bl	8001b9c <HAL_TIM_MspPostInit>

}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b00e      	add	sp, #56	; 0x38
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000030 	.word	0x20000030
 8001924:	40000400 	.word	0x40000400
 8001928:	000003a9 	.word	0x000003a9
 800192c:	000003ff 	.word	0x000003ff

08001930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <MX_USART2_UART_Init+0x5c>)
 8001938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_USART2_UART_Init+0x58>)
 800193c:	2296      	movs	r2, #150	; 0x96
 800193e:	0212      	lsls	r2, r2, #8
 8001940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_USART2_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART2_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART2_UART_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <MX_USART2_UART_Init+0x58>)
 8001974:	0018      	movs	r0, r3
 8001976:	f002 fa7f 	bl	8003e78 <HAL_UART_Init>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d001      	beq.n	8001982 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800197e:	f000 f87f 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000007c 	.word	0x2000007c
 800198c:	40004400 	.word	0x40004400

08001990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b08b      	sub	sp, #44	; 0x2c
 8001994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	2414      	movs	r4, #20
 8001998:	193b      	adds	r3, r7, r4
 800199a:	0018      	movs	r0, r3
 800199c:	2314      	movs	r3, #20
 800199e:	001a      	movs	r2, r3
 80019a0:	2100      	movs	r1, #0
 80019a2:	f002 fdb3 	bl	800450c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <MX_GPIO_Init+0xe4>)
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <MX_GPIO_Init+0xe4>)
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	0309      	lsls	r1, r1, #12
 80019b0:	430a      	orrs	r2, r1
 80019b2:	615a      	str	r2, [r3, #20]
 80019b4:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <MX_GPIO_Init+0xe4>)
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	031b      	lsls	r3, r3, #12
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <MX_GPIO_Init+0xe4>)
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <MX_GPIO_Init+0xe4>)
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	03c9      	lsls	r1, r1, #15
 80019cc:	430a      	orrs	r2, r1
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <MX_GPIO_Init+0xe4>)
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	03db      	lsls	r3, r3, #15
 80019d8:	4013      	ands	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <MX_GPIO_Init+0xe4>)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <MX_GPIO_Init+0xe4>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	0289      	lsls	r1, r1, #10
 80019e8:	430a      	orrs	r2, r1
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <MX_GPIO_Init+0xe4>)
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	029b      	lsls	r3, r3, #10
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MX_GPIO_Init+0xe4>)
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_GPIO_Init+0xe4>)
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	02c9      	lsls	r1, r1, #11
 8001a04:	430a      	orrs	r2, r1
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_GPIO_Init+0xe4>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	02db      	lsls	r3, r3, #11
 8001a10:	4013      	ands	r3, r2
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a16:	2390      	movs	r3, #144	; 0x90
 8001a18:	05db      	lsls	r3, r3, #23
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2120      	movs	r1, #32
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 ff4a 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	0192      	lsls	r2, r2, #6
 8001a2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <MX_GPIO_Init+0xe8>)
 8001a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a38:	193b      	adds	r3, r7, r4
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <MX_GPIO_Init+0xec>)
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	0010      	movs	r0, r2
 8001a40:	f000 fdca 	bl	80025d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a44:	0021      	movs	r1, r4
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	2220      	movs	r2, #32
 8001a4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	2201      	movs	r2, #1
 8001a50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	187a      	adds	r2, r7, r1
 8001a60:	2390      	movs	r3, #144	; 0x90
 8001a62:	05db      	lsls	r3, r3, #23
 8001a64:	0011      	movs	r1, r2
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 fdb6 	bl	80025d8 <HAL_GPIO_Init>

}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b00b      	add	sp, #44	; 0x2c
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	10210000 	.word	0x10210000
 8001a7c:	48000800 	.word	0x48000800

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <Error_Handler+0x6>

08001a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_MspInit+0x44>)
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <HAL_MspInit+0x44>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	619a      	str	r2, [r3, #24]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_MspInit+0x44>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_MspInit+0x44>)
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_MspInit+0x44>)
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0549      	lsls	r1, r1, #21
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	61da      	str	r2, [r3, #28]
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_MspInit+0x44>)
 8001ab6:	69da      	ldr	r2, [r3, #28]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	055b      	lsls	r3, r3, #21
 8001abc:	4013      	ands	r3, r2
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	2314      	movs	r3, #20
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	0018      	movs	r0, r3
 8001ade:	2314      	movs	r3, #20
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f002 fd12 	bl	800450c <memset>
  if(hadc->Instance==ADC1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <HAL_ADC_MspInit+0x84>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d12b      	bne.n	8001b4a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_ADC_MspInit+0x88>)
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_ADC_MspInit+0x88>)
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	0089      	lsls	r1, r1, #2
 8001afc:	430a      	orrs	r2, r1
 8001afe:	619a      	str	r2, [r3, #24]
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_ADC_MspInit+0x88>)
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_ADC_MspInit+0x88>)
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_ADC_MspInit+0x88>)
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	0309      	lsls	r1, r1, #12
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	615a      	str	r2, [r3, #20]
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_ADC_MspInit+0x88>)
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	031b      	lsls	r3, r3, #12
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC0     ------> ADC_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b2a:	2114      	movs	r1, #20
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2203      	movs	r2, #3
 8001b36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_ADC_MspInit+0x8c>)
 8001b42:	0019      	movs	r1, r3
 8001b44:	0010      	movs	r0, r2
 8001b46:	f000 fd47 	bl	80025d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b00a      	add	sp, #40	; 0x28
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	40012400 	.word	0x40012400
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48000800 	.word	0x48000800

08001b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <HAL_TIM_Base_MspInit+0x34>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10b      	bne.n	8001b8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_TIM_Base_MspInit+0x38>)
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_TIM_Base_MspInit+0x38>)
 8001b78:	2102      	movs	r1, #2
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	61da      	str	r2, [r3, #28]
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_TIM_Base_MspInit+0x38>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	0018      	movs	r0, r3
 8001baa:	2314      	movs	r3, #20
 8001bac:	001a      	movs	r2, r3
 8001bae:	2100      	movs	r1, #0
 8001bb0:	f002 fcac 	bl	800450c <memset>
  if(htim->Instance==TIM3)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <HAL_TIM_MspPostInit+0x74>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d123      	bne.n	8001c06 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_TIM_MspPostInit+0x78>)
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_TIM_MspPostInit+0x78>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	02c9      	lsls	r1, r1, #11
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_TIM_MspPostInit+0x78>)
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	02db      	lsls	r3, r3, #11
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bda:	210c      	movs	r1, #12
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2210      	movs	r2, #16
 8001be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2202      	movs	r2, #2
 8001be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_TIM_MspPostInit+0x7c>)
 8001bfe:	0019      	movs	r1, r3
 8001c00:	0010      	movs	r0, r2
 8001c02:	f000 fce9 	bl	80025d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b008      	add	sp, #32
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	40000400 	.word	0x40000400
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000400 	.word	0x48000400

08001c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	2314      	movs	r3, #20
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	0018      	movs	r0, r3
 8001c2a:	2314      	movs	r3, #20
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	2100      	movs	r1, #0
 8001c30:	f002 fc6c 	bl	800450c <memset>
  if(huart->Instance==USART2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_UART_MspInit+0x90>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d132      	bne.n	8001ca4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_UART_MspInit+0x94>)
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_UART_MspInit+0x94>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0289      	lsls	r1, r1, #10
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	61da      	str	r2, [r3, #28]
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_UART_MspInit+0x94>)
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	029b      	lsls	r3, r3, #10
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_UART_MspInit+0x94>)
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_UART_MspInit+0x94>)
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	0289      	lsls	r1, r1, #10
 8001c64:	430a      	orrs	r2, r1
 8001c66:	615a      	str	r2, [r3, #20]
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0x94>)
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	029b      	lsls	r3, r3, #10
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c76:	2114      	movs	r1, #20
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	2202      	movs	r2, #2
 8001c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	2201      	movs	r2, #1
 8001c94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c96:	187a      	adds	r2, r7, r1
 8001c98:	2390      	movs	r3, #144	; 0x90
 8001c9a:	05db      	lsls	r3, r3, #23
 8001c9c:	0011      	movs	r1, r2
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 fc9a 	bl	80025d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b00a      	add	sp, #40	; 0x28
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f000 f87a 	bl	8001dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cf2:	490e      	ldr	r1, [pc, #56]	; (8001d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <LoopForever+0xe>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d08:	4c0b      	ldr	r4, [pc, #44]	; (8001d38 <LoopForever+0x16>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d16:	f7ff ffe4 	bl	8001ce2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d1a:	f002 fbd3 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d1e:	f7ff fc6f 	bl	8001600 <main>

08001d22 <LoopForever>:

LoopForever:
    b LoopForever
 8001d22:	e7fe      	b.n	8001d22 <LoopForever>
  ldr   r0, =_estack
 8001d24:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d30:	080045f4 	.word	0x080045f4
  ldr r2, =_sbss
 8001d34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d38:	20000144 	.word	0x20000144

08001d3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC1_IRQHandler>
	...

08001d40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <HAL_Init+0x24>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_Init+0x24>)
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f000 f809 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d56:	f7ff fe97 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	40022000 	.word	0x40022000

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_InitTick+0x5c>)
 8001d72:	681c      	ldr	r4, [r3, #0]
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_InitTick+0x60>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	0019      	movs	r1, r3
 8001d7a:	23fa      	movs	r3, #250	; 0xfa
 8001d7c:	0098      	lsls	r0, r3, #2
 8001d7e:	f7fe f9c3 	bl	8000108 <__udivsi3>
 8001d82:	0003      	movs	r3, r0
 8001d84:	0019      	movs	r1, r3
 8001d86:	0020      	movs	r0, r4
 8001d88:	f7fe f9be 	bl	8000108 <__udivsi3>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 fc15 	bl	80025be <HAL_SYSTICK_Config>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e00f      	b.n	8001dbc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d80b      	bhi.n	8001dba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	2301      	movs	r3, #1
 8001da6:	425b      	negs	r3, r3
 8001da8:	2200      	movs	r2, #0
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 fbf2 	bl	8002594 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_InitTick+0x64>)
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b003      	add	sp, #12
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	20000004 	.word	0x20000004
 8001dc8:	2000000c 	.word	0x2000000c
 8001dcc:	20000008 	.word	0x20000008

08001dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_IncTick+0x1c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	001a      	movs	r2, r3
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_IncTick+0x20>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	18d2      	adds	r2, r2, r3
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_IncTick+0x20>)
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	2000000c 	.word	0x2000000c
 8001df0:	20000140 	.word	0x20000140

08001df4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b02      	ldr	r3, [pc, #8]	; (8001e04 <HAL_GetTick+0x10>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	20000140 	.word	0x20000140

08001e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff fff0 	bl	8001df4 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	d005      	beq.n	8001e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_Delay+0x40>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	001a      	movs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	189b      	adds	r3, r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	f7ff ffe0 	bl	8001df4 <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d8f7      	bhi.n	8001e30 <HAL_Delay+0x28>
  {
  }
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000000c 	.word	0x2000000c

08001e4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e54:	230f      	movs	r3, #15
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e125      	b.n	80020b6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10a      	bne.n	8001e88 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2234      	movs	r2, #52	; 0x34
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff fe24 	bl	8001ad0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d000      	beq.n	8001e94 <HAL_ADC_Init+0x48>
 8001e92:	e103      	b.n	800209c <HAL_ADC_Init+0x250>
 8001e94:	230f      	movs	r3, #15
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d000      	beq.n	8001ea0 <HAL_ADC_Init+0x54>
 8001e9e:	e0fd      	b.n	800209c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001eaa:	d000      	beq.n	8001eae <HAL_ADC_Init+0x62>
 8001eac:	e0f6      	b.n	800209c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	4a83      	ldr	r2, [pc, #524]	; (80020c0 <HAL_ADC_Init+0x274>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d112      	bne.n	8001ef2 <HAL_ADC_Init+0xa6>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d009      	beq.n	8001eee <HAL_ADC_Init+0xa2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Init+0xa6>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_ADC_Init+0xa8>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d116      	bne.n	8001f26 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2218      	movs	r2, #24
 8001f00:	4393      	bics	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	0899      	lsrs	r1, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4964      	ldr	r1, [pc, #400]	; (80020c4 <HAL_ADC_Init+0x278>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7e1b      	ldrb	r3, [r3, #24]
 8001f3a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7e5b      	ldrb	r3, [r3, #25]
 8001f40:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f42:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e9b      	ldrb	r3, [r3, #26]
 8001f48:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d002      	beq.n	8001f5a <HAL_ADC_Init+0x10e>
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	015b      	lsls	r3, r3, #5
 8001f58:	e000      	b.n	8001f5c <HAL_ADC_Init+0x110>
 8001f5a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f5c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f62:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_Init+0x124>
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	e000      	b.n	8001f72 <HAL_ADC_Init+0x126>
 8001f70:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001f72:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2124      	movs	r1, #36	; 0x24
 8001f78:	5c5b      	ldrb	r3, [r3, r1]
 8001f7a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f7c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7edb      	ldrb	r3, [r3, #27]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d115      	bne.n	8001fb8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7e9b      	ldrb	r3, [r3, #26]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2280      	movs	r2, #128	; 0x80
 8001f98:	0252      	lsls	r2, r2, #9
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69da      	ldr	r2, [r3, #28]
 8001fbc:	23c2      	movs	r3, #194	; 0xc2
 8001fbe:	33ff      	adds	r3, #255	; 0xff
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d007      	beq.n	8001fd4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68d9      	ldr	r1, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	055b      	lsls	r3, r3, #21
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d01b      	beq.n	8002028 <HAL_ADC_Init+0x1dc>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d017      	beq.n	8002028 <HAL_ADC_Init+0x1dc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d013      	beq.n	8002028 <HAL_ADC_Init+0x1dc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	2b03      	cmp	r3, #3
 8002006:	d00f      	beq.n	8002028 <HAL_ADC_Init+0x1dc>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2b04      	cmp	r3, #4
 800200e:	d00b      	beq.n	8002028 <HAL_ADC_Init+0x1dc>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	2b05      	cmp	r3, #5
 8002016:	d007      	beq.n	8002028 <HAL_ADC_Init+0x1dc>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	2b06      	cmp	r3, #6
 800201e:	d003      	beq.n	8002028 <HAL_ADC_Init+0x1dc>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	2b07      	cmp	r3, #7
 8002026:	d112      	bne.n	800204e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2107      	movs	r1, #7
 8002034:	438a      	bics	r2, r1
 8002036:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6959      	ldr	r1, [r3, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	2207      	movs	r2, #7
 8002044:	401a      	ands	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <HAL_ADC_Init+0x27c>)
 8002056:	4013      	ands	r3, r2
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	429a      	cmp	r2, r3
 800205c:	d10b      	bne.n	8002076 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	2203      	movs	r2, #3
 800206a:	4393      	bics	r3, r2
 800206c:	2201      	movs	r2, #1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002074:	e01c      	b.n	80020b0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	2212      	movs	r2, #18
 800207c:	4393      	bics	r3, r2
 800207e:	2210      	movs	r2, #16
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	2201      	movs	r2, #1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002092:	230f      	movs	r3, #15
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800209a:	e009      	b.n	80020b0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a0:	2210      	movs	r2, #16
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80020a8:	230f      	movs	r3, #15
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b0:	230f      	movs	r3, #15
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	781b      	ldrb	r3, [r3, #0]
}
 80020b6:	0018      	movs	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b004      	add	sp, #16
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	fffffefd 	.word	0xfffffefd
 80020c4:	fffe0219 	.word	0xfffe0219
 80020c8:	833fffe7 	.word	0x833fffe7

080020cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d4:	230f      	movs	r3, #15
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2204      	movs	r2, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	d138      	bne.n	800215a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2234      	movs	r2, #52	; 0x34
 80020ec:	5c9b      	ldrb	r3, [r3, r2]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_Start+0x2a>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e038      	b.n	8002168 <HAL_ADC_Start+0x9c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2234      	movs	r2, #52	; 0x34
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7e5b      	ldrb	r3, [r3, #25]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d007      	beq.n	8002116 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002106:	230f      	movs	r3, #15
 8002108:	18fc      	adds	r4, r7, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f000 f933 	bl	8002378 <ADC_Enable>
 8002112:	0003      	movs	r3, r0
 8002114:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002116:	230f      	movs	r3, #15
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d120      	bne.n	8002162 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_ADC_Start+0xa4>)
 8002126:	4013      	ands	r3, r2
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	0052      	lsls	r2, r2, #1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2234      	movs	r2, #52	; 0x34
 800213c:	2100      	movs	r1, #0
 800213e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	221c      	movs	r2, #28
 8002146:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2104      	movs	r1, #4
 8002154:	430a      	orrs	r2, r1
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	e003      	b.n	8002162 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800215a:	230f      	movs	r3, #15
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2202      	movs	r2, #2
 8002160:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002162:	230f      	movs	r3, #15
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b005      	add	sp, #20
 800216e:	bd90      	pop	{r4, r7, pc}
 8002170:	fffff0fe 	.word	0xfffff0fe

08002174 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002196:	230f      	movs	r3, #15
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	055b      	lsls	r3, r3, #21
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d011      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x46>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d00d      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x46>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d009      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x46>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d005      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x46>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d001      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x46>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2234      	movs	r2, #52	; 0x34
 80021d6:	5c9b      	ldrb	r3, [r3, r2]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x54>
 80021dc:	2302      	movs	r3, #2
 80021de:	e0bb      	b.n	8002358 <HAL_ADC_ConfigChannel+0x1cc>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2234      	movs	r2, #52	; 0x34
 80021e4:	2101      	movs	r1, #1
 80021e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2204      	movs	r2, #4
 80021f0:	4013      	ands	r3, r2
 80021f2:	d000      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x6a>
 80021f4:	e09f      	b.n	8002336 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4a59      	ldr	r2, [pc, #356]	; (8002360 <HAL_ADC_ConfigChannel+0x1d4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d100      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x76>
 8002200:	e077      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2201      	movs	r2, #1
 800220e:	409a      	lsls	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	055b      	lsls	r3, r3, #21
 8002220:	429a      	cmp	r2, r3
 8002222:	d037      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x108>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d033      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x108>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	2b02      	cmp	r3, #2
 8002232:	d02f      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x108>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	2b03      	cmp	r3, #3
 800223a:	d02b      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x108>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	2b04      	cmp	r3, #4
 8002242:	d027      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x108>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	2b05      	cmp	r3, #5
 800224a:	d023      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x108>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	2b06      	cmp	r3, #6
 8002252:	d01f      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x108>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	2b07      	cmp	r3, #7
 800225a:	d01b      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	2107      	movs	r1, #7
 8002268:	400b      	ands	r3, r1
 800226a:	429a      	cmp	r2, r3
 800226c:	d012      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2107      	movs	r1, #7
 800227a:	438a      	bics	r2, r1
 800227c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6959      	ldr	r1, [r3, #20]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2207      	movs	r2, #7
 800228a:	401a      	ands	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b10      	cmp	r3, #16
 800229a:	d003      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x118>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b11      	cmp	r3, #17
 80022a2:	d152      	bne.n	800234a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80022a4:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_ADC_ConfigChannel+0x1d8>)
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d102      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x12a>
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	e001      	b.n	80022ba <HAL_ADC_ConfigChannel+0x12e>
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	03db      	lsls	r3, r3, #15
 80022ba:	4a2a      	ldr	r2, [pc, #168]	; (8002364 <HAL_ADC_ConfigChannel+0x1d8>)
 80022bc:	430b      	orrs	r3, r1
 80022be:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b10      	cmp	r3, #16
 80022c6:	d140      	bne.n	800234a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_ADC_ConfigChannel+0x1dc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4927      	ldr	r1, [pc, #156]	; (800236c <HAL_ADC_ConfigChannel+0x1e0>)
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7fd ff1a 	bl	8000108 <__udivsi3>
 80022d4:	0003      	movs	r3, r0
 80022d6:	001a      	movs	r2, r3
 80022d8:	0013      	movs	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	189b      	adds	r3, r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022e2:	e002      	b.n	80022ea <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f9      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x158>
 80022f0:	e02b      	b.n	800234a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	4099      	lsls	r1, r3
 8002300:	000b      	movs	r3, r1
 8002302:	43d9      	mvns	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	400a      	ands	r2, r1
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b10      	cmp	r3, #16
 8002312:	d003      	beq.n	800231c <HAL_ADC_ConfigChannel+0x190>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b11      	cmp	r3, #17
 800231a:	d116      	bne.n	800234a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_ADC_ConfigChannel+0x1d8>)
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b10      	cmp	r3, #16
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1a0>
 8002328:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_ADC_ConfigChannel+0x1e4>)
 800232a:	e000      	b.n	800232e <HAL_ADC_ConfigChannel+0x1a2>
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_ADC_ConfigChannel+0x1e8>)
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_ADC_ConfigChannel+0x1d8>)
 8002330:	400a      	ands	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e009      	b.n	800234a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	2220      	movs	r2, #32
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002342:	230f      	movs	r3, #15
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2234      	movs	r2, #52	; 0x34
 800234e:	2100      	movs	r1, #0
 8002350:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002352:	230f      	movs	r3, #15
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	781b      	ldrb	r3, [r3, #0]
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}
 8002360:	00001001 	.word	0x00001001
 8002364:	40012708 	.word	0x40012708
 8002368:	20000004 	.word	0x20000004
 800236c:	000f4240 	.word	0x000f4240
 8002370:	ff7fffff 	.word	0xff7fffff
 8002374:	ffbfffff 	.word	0xffbfffff

08002378 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2203      	movs	r2, #3
 8002390:	4013      	ands	r3, r2
 8002392:	2b01      	cmp	r3, #1
 8002394:	d112      	bne.n	80023bc <ADC_Enable+0x44>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2201      	movs	r2, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d009      	beq.n	80023b8 <ADC_Enable+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	401a      	ands	r2, r3
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d101      	bne.n	80023bc <ADC_Enable+0x44>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <ADC_Enable+0x46>
 80023bc:	2300      	movs	r3, #0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d14b      	bne.n	800245a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a26      	ldr	r2, [pc, #152]	; (8002464 <ADC_Enable+0xec>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	d00d      	beq.n	80023ea <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	2210      	movs	r2, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023de:	2201      	movs	r2, #1
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e038      	b.n	800245c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <ADC_Enable+0xf0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	491b      	ldr	r1, [pc, #108]	; (800246c <ADC_Enable+0xf4>)
 8002400:	0018      	movs	r0, r3
 8002402:	f7fd fe81 	bl	8000108 <__udivsi3>
 8002406:	0003      	movs	r3, r0
 8002408:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800240a:	e002      	b.n	8002412 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	3b01      	subs	r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002418:	f7ff fcec 	bl	8001df4 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002420:	e014      	b.n	800244c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002422:	f7ff fce7 	bl	8001df4 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d90d      	bls.n	800244c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	2210      	movs	r2, #16
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002440:	2201      	movs	r2, #1
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e007      	b.n	800245c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2201      	movs	r2, #1
 8002454:	4013      	ands	r3, r2
 8002456:	2b01      	cmp	r3, #1
 8002458:	d1e3      	bne.n	8002422 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b004      	add	sp, #16
 8002462:	bd80      	pop	{r7, pc}
 8002464:	80000017 	.word	0x80000017
 8002468:	20000004 	.word	0x20000004
 800246c:	000f4240 	.word	0x000f4240

08002470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	0002      	movs	r2, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b7f      	cmp	r3, #127	; 0x7f
 8002484:	d828      	bhi.n	80024d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002486:	4a2f      	ldr	r2, [pc, #188]	; (8002544 <__NVIC_SetPriority+0xd4>)
 8002488:	1dfb      	adds	r3, r7, #7
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b25b      	sxtb	r3, r3
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	33c0      	adds	r3, #192	; 0xc0
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	589b      	ldr	r3, [r3, r2]
 8002496:	1dfa      	adds	r2, r7, #7
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	0011      	movs	r1, r2
 800249c:	2203      	movs	r2, #3
 800249e:	400a      	ands	r2, r1
 80024a0:	00d2      	lsls	r2, r2, #3
 80024a2:	21ff      	movs	r1, #255	; 0xff
 80024a4:	4091      	lsls	r1, r2
 80024a6:	000a      	movs	r2, r1
 80024a8:	43d2      	mvns	r2, r2
 80024aa:	401a      	ands	r2, r3
 80024ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	22ff      	movs	r2, #255	; 0xff
 80024b4:	401a      	ands	r2, r3
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	0018      	movs	r0, r3
 80024bc:	2303      	movs	r3, #3
 80024be:	4003      	ands	r3, r0
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024c4:	481f      	ldr	r0, [pc, #124]	; (8002544 <__NVIC_SetPriority+0xd4>)
 80024c6:	1dfb      	adds	r3, r7, #7
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	430a      	orrs	r2, r1
 80024d0:	33c0      	adds	r3, #192	; 0xc0
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024d6:	e031      	b.n	800253c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d8:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <__NVIC_SetPriority+0xd8>)
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	0019      	movs	r1, r3
 80024e0:	230f      	movs	r3, #15
 80024e2:	400b      	ands	r3, r1
 80024e4:	3b08      	subs	r3, #8
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3306      	adds	r3, #6
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	18d3      	adds	r3, r2, r3
 80024ee:	3304      	adds	r3, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1dfa      	adds	r2, r7, #7
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	0011      	movs	r1, r2
 80024f8:	2203      	movs	r2, #3
 80024fa:	400a      	ands	r2, r1
 80024fc:	00d2      	lsls	r2, r2, #3
 80024fe:	21ff      	movs	r1, #255	; 0xff
 8002500:	4091      	lsls	r1, r2
 8002502:	000a      	movs	r2, r1
 8002504:	43d2      	mvns	r2, r2
 8002506:	401a      	ands	r2, r3
 8002508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	019b      	lsls	r3, r3, #6
 800250e:	22ff      	movs	r2, #255	; 0xff
 8002510:	401a      	ands	r2, r3
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	0018      	movs	r0, r3
 8002518:	2303      	movs	r3, #3
 800251a:	4003      	ands	r3, r0
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002520:	4809      	ldr	r0, [pc, #36]	; (8002548 <__NVIC_SetPriority+0xd8>)
 8002522:	1dfb      	adds	r3, r7, #7
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	001c      	movs	r4, r3
 8002528:	230f      	movs	r3, #15
 800252a:	4023      	ands	r3, r4
 800252c:	3b08      	subs	r3, #8
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	430a      	orrs	r2, r1
 8002532:	3306      	adds	r3, #6
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	18c3      	adds	r3, r0, r3
 8002538:	3304      	adds	r3, #4
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b003      	add	sp, #12
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	4a0c      	ldr	r2, [pc, #48]	; (800258c <SysTick_Config+0x40>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255e:	2301      	movs	r3, #1
 8002560:	e010      	b.n	8002584 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <SysTick_Config+0x44>)
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	3a01      	subs	r2, #1
 8002568:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256a:	2301      	movs	r3, #1
 800256c:	425b      	negs	r3, r3
 800256e:	2103      	movs	r1, #3
 8002570:	0018      	movs	r0, r3
 8002572:	f7ff ff7d 	bl	8002470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <SysTick_Config+0x44>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SysTick_Config+0x44>)
 800257e:	2207      	movs	r2, #7
 8002580:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002582:	2300      	movs	r3, #0
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}
 800258c:	00ffffff 	.word	0x00ffffff
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	210f      	movs	r1, #15
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	1c02      	adds	r2, r0, #0
 80025a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	0011      	movs	r1, r2
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff ff5d 	bl	8002470 <__NVIC_SetPriority>
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b004      	add	sp, #16
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7ff ffbf 	bl	800254c <SysTick_Config>
 80025ce:	0003      	movs	r3, r0
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e6:	e14f      	b.n	8002888 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2101      	movs	r1, #1
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4091      	lsls	r1, r2
 80025f2:	000a      	movs	r2, r1
 80025f4:	4013      	ands	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d100      	bne.n	8002600 <HAL_GPIO_Init+0x28>
 80025fe:	e140      	b.n	8002882 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d00b      	beq.n	8002620 <HAL_GPIO_Init+0x48>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d007      	beq.n	8002620 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002614:	2b11      	cmp	r3, #17
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b12      	cmp	r3, #18
 800261e:	d130      	bne.n	8002682 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	409a      	lsls	r2, r3
 800262e:	0013      	movs	r3, r2
 8002630:	43da      	mvns	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	409a      	lsls	r2, r3
 8002642:	0013      	movs	r3, r2
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002656:	2201      	movs	r2, #1
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
 800265c:	0013      	movs	r3, r2
 800265e:	43da      	mvns	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	2201      	movs	r2, #1
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
 8002674:	0013      	movs	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	2203      	movs	r2, #3
 800268e:	409a      	lsls	r2, r3
 8002690:	0013      	movs	r3, r2
 8002692:	43da      	mvns	r2, r3
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	409a      	lsls	r2, r3
 80026a4:	0013      	movs	r3, r2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0xea>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b12      	cmp	r3, #18
 80026c0:	d123      	bne.n	800270a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	58d3      	ldr	r3, [r2, r3]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2207      	movs	r2, #7
 80026d4:	4013      	ands	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	43da      	mvns	r2, r3
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2107      	movs	r1, #7
 80026ee:	400b      	ands	r3, r1
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	409a      	lsls	r2, r3
 80026f4:	0013      	movs	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	0092      	lsls	r2, r2, #2
 8002706:	6939      	ldr	r1, [r7, #16]
 8002708:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	2203      	movs	r2, #3
 8002716:	409a      	lsls	r2, r3
 8002718:	0013      	movs	r3, r2
 800271a:	43da      	mvns	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2203      	movs	r2, #3
 8002728:	401a      	ands	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	409a      	lsls	r2, r3
 8002730:	0013      	movs	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	055b      	lsls	r3, r3, #21
 8002746:	4013      	ands	r3, r2
 8002748:	d100      	bne.n	800274c <HAL_GPIO_Init+0x174>
 800274a:	e09a      	b.n	8002882 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274c:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <HAL_GPIO_Init+0x2c8>)
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_GPIO_Init+0x2c8>)
 8002752:	2101      	movs	r1, #1
 8002754:	430a      	orrs	r2, r1
 8002756:	619a      	str	r2, [r3, #24]
 8002758:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <HAL_GPIO_Init+0x2c8>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2201      	movs	r2, #1
 800275e:	4013      	ands	r3, r2
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002764:	4a4f      	ldr	r2, [pc, #316]	; (80028a4 <HAL_GPIO_Init+0x2cc>)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	589b      	ldr	r3, [r3, r2]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2203      	movs	r2, #3
 8002776:	4013      	ands	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	220f      	movs	r2, #15
 800277c:	409a      	lsls	r2, r3
 800277e:	0013      	movs	r3, r2
 8002780:	43da      	mvns	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	2390      	movs	r3, #144	; 0x90
 800278c:	05db      	lsls	r3, r3, #23
 800278e:	429a      	cmp	r2, r3
 8002790:	d013      	beq.n	80027ba <HAL_GPIO_Init+0x1e2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a44      	ldr	r2, [pc, #272]	; (80028a8 <HAL_GPIO_Init+0x2d0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00d      	beq.n	80027b6 <HAL_GPIO_Init+0x1de>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a43      	ldr	r2, [pc, #268]	; (80028ac <HAL_GPIO_Init+0x2d4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x1da>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a42      	ldr	r2, [pc, #264]	; (80028b0 <HAL_GPIO_Init+0x2d8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_GPIO_Init+0x1d6>
 80027aa:	2303      	movs	r3, #3
 80027ac:	e006      	b.n	80027bc <HAL_GPIO_Init+0x1e4>
 80027ae:	2305      	movs	r3, #5
 80027b0:	e004      	b.n	80027bc <HAL_GPIO_Init+0x1e4>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e002      	b.n	80027bc <HAL_GPIO_Init+0x1e4>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_GPIO_Init+0x1e4>
 80027ba:	2300      	movs	r3, #0
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	2103      	movs	r1, #3
 80027c0:	400a      	ands	r2, r1
 80027c2:	0092      	lsls	r2, r2, #2
 80027c4:	4093      	lsls	r3, r2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027cc:	4935      	ldr	r1, [pc, #212]	; (80028a4 <HAL_GPIO_Init+0x2cc>)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	3302      	adds	r3, #2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027da:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_GPIO_Init+0x2dc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43da      	mvns	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	025b      	lsls	r3, r3, #9
 80027f2:	4013      	ands	r3, r2
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027fe:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_GPIO_Init+0x2dc>)
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_GPIO_Init+0x2dc>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	43da      	mvns	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	029b      	lsls	r3, r3, #10
 800281c:	4013      	ands	r3, r2
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_GPIO_Init+0x2dc>)
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <HAL_GPIO_Init+0x2dc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43da      	mvns	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	035b      	lsls	r3, r3, #13
 8002846:	4013      	ands	r3, r2
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_GPIO_Init+0x2dc>)
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_GPIO_Init+0x2dc>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	43da      	mvns	r2, r3
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	039b      	lsls	r3, r3, #14
 8002870:	4013      	ands	r3, r2
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_GPIO_Init+0x2dc>)
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	40da      	lsrs	r2, r3
 8002890:	1e13      	subs	r3, r2, #0
 8002892:	d000      	beq.n	8002896 <HAL_GPIO_Init+0x2be>
 8002894:	e6a8      	b.n	80025e8 <HAL_GPIO_Init+0x10>
  } 
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b006      	add	sp, #24
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40010000 	.word	0x40010000
 80028a8:	48000400 	.word	0x48000400
 80028ac:	48000800 	.word	0x48000800
 80028b0:	48000c00 	.word	0x48000c00
 80028b4:	40010400 	.word	0x40010400

080028b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	0008      	movs	r0, r1
 80028c2:	0011      	movs	r1, r2
 80028c4:	1cbb      	adds	r3, r7, #2
 80028c6:	1c02      	adds	r2, r0, #0
 80028c8:	801a      	strh	r2, [r3, #0]
 80028ca:	1c7b      	adds	r3, r7, #1
 80028cc:	1c0a      	adds	r2, r1, #0
 80028ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d0:	1c7b      	adds	r3, r7, #1
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028d8:	1cbb      	adds	r3, r7, #2
 80028da:	881a      	ldrh	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028e0:	e003      	b.n	80028ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028e2:	1cbb      	adds	r3, r7, #2
 80028e4:	881a      	ldrh	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e305      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	d100      	bne.n	8002912 <HAL_RCC_OscConfig+0x1e>
 8002910:	e08d      	b.n	8002a2e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002912:	4bc5      	ldr	r3, [pc, #788]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	220c      	movs	r2, #12
 8002918:	4013      	ands	r3, r2
 800291a:	2b04      	cmp	r3, #4
 800291c:	d00e      	beq.n	800293c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800291e:	4bc2      	ldr	r3, [pc, #776]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	220c      	movs	r2, #12
 8002924:	4013      	ands	r3, r2
 8002926:	2b08      	cmp	r3, #8
 8002928:	d116      	bne.n	8002958 <HAL_RCC_OscConfig+0x64>
 800292a:	4bbf      	ldr	r3, [pc, #764]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	23c0      	movs	r3, #192	; 0xc0
 8002930:	025b      	lsls	r3, r3, #9
 8002932:	401a      	ands	r2, r3
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	025b      	lsls	r3, r3, #9
 8002938:	429a      	cmp	r2, r3
 800293a:	d10d      	bne.n	8002958 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	4bba      	ldr	r3, [pc, #744]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	029b      	lsls	r3, r3, #10
 8002944:	4013      	ands	r3, r2
 8002946:	d100      	bne.n	800294a <HAL_RCC_OscConfig+0x56>
 8002948:	e070      	b.n	8002a2c <HAL_RCC_OscConfig+0x138>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d000      	beq.n	8002954 <HAL_RCC_OscConfig+0x60>
 8002952:	e06b      	b.n	8002a2c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e2dc      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <HAL_RCC_OscConfig+0x7c>
 8002960:	4bb1      	ldr	r3, [pc, #708]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4bb0      	ldr	r3, [pc, #704]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	0249      	lsls	r1, r1, #9
 800296a:	430a      	orrs	r2, r1
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e02f      	b.n	80029d0 <HAL_RCC_OscConfig+0xdc>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10c      	bne.n	8002992 <HAL_RCC_OscConfig+0x9e>
 8002978:	4bab      	ldr	r3, [pc, #684]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4baa      	ldr	r3, [pc, #680]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 800297e:	49ab      	ldr	r1, [pc, #684]	; (8002c2c <HAL_RCC_OscConfig+0x338>)
 8002980:	400a      	ands	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	4ba8      	ldr	r3, [pc, #672]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4ba7      	ldr	r3, [pc, #668]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 800298a:	49a9      	ldr	r1, [pc, #676]	; (8002c30 <HAL_RCC_OscConfig+0x33c>)
 800298c:	400a      	ands	r2, r1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e01e      	b.n	80029d0 <HAL_RCC_OscConfig+0xdc>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d10e      	bne.n	80029b8 <HAL_RCC_OscConfig+0xc4>
 800299a:	4ba3      	ldr	r3, [pc, #652]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4ba2      	ldr	r3, [pc, #648]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	02c9      	lsls	r1, r1, #11
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	4b9f      	ldr	r3, [pc, #636]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b9e      	ldr	r3, [pc, #632]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	0249      	lsls	r1, r1, #9
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0xdc>
 80029b8:	4b9b      	ldr	r3, [pc, #620]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b9a      	ldr	r3, [pc, #616]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 80029be:	499b      	ldr	r1, [pc, #620]	; (8002c2c <HAL_RCC_OscConfig+0x338>)
 80029c0:	400a      	ands	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	4b98      	ldr	r3, [pc, #608]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b97      	ldr	r3, [pc, #604]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 80029ca:	4999      	ldr	r1, [pc, #612]	; (8002c30 <HAL_RCC_OscConfig+0x33c>)
 80029cc:	400a      	ands	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d014      	beq.n	8002a02 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7ff fa0c 	bl	8001df4 <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e2:	f7ff fa07 	bl	8001df4 <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e28e      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f4:	4b8c      	ldr	r3, [pc, #560]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	029b      	lsls	r3, r3, #10
 80029fc:	4013      	ands	r3, r2
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0xee>
 8002a00:	e015      	b.n	8002a2e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7ff f9f7 	bl	8001df4 <HAL_GetTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7ff f9f2 	bl	8001df4 <HAL_GetTick>
 8002a10:	0002      	movs	r2, r0
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e279      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	4b82      	ldr	r3, [pc, #520]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	029b      	lsls	r3, r3, #10
 8002a26:	4013      	ands	r3, r2
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x118>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2202      	movs	r2, #2
 8002a34:	4013      	ands	r3, r2
 8002a36:	d100      	bne.n	8002a3a <HAL_RCC_OscConfig+0x146>
 8002a38:	e06c      	b.n	8002b14 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a3a:	4b7b      	ldr	r3, [pc, #492]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	220c      	movs	r2, #12
 8002a40:	4013      	ands	r3, r2
 8002a42:	d00e      	beq.n	8002a62 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a44:	4b78      	ldr	r3, [pc, #480]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	220c      	movs	r2, #12
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d11f      	bne.n	8002a90 <HAL_RCC_OscConfig+0x19c>
 8002a50:	4b75      	ldr	r3, [pc, #468]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	23c0      	movs	r3, #192	; 0xc0
 8002a56:	025b      	lsls	r3, r3, #9
 8002a58:	401a      	ands	r2, r3
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d116      	bne.n	8002a90 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	4b71      	ldr	r3, [pc, #452]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2202      	movs	r2, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_OscConfig+0x184>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e24c      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b6b      	ldr	r3, [pc, #428]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	22f8      	movs	r2, #248	; 0xf8
 8002a7e:	4393      	bics	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00da      	lsls	r2, r3, #3
 8002a88:	4b67      	ldr	r3, [pc, #412]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	e041      	b.n	8002b14 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d024      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a98:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b62      	ldr	r3, [pc, #392]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7ff f9a6 	bl	8001df4 <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aae:	f7ff f9a1 	bl	8001df4 <HAL_GetTick>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e228      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac0:	4b59      	ldr	r3, [pc, #356]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d0f1      	beq.n	8002aae <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b57      	ldr	r3, [pc, #348]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	22f8      	movs	r2, #248	; 0xf8
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	00da      	lsls	r2, r3, #3
 8002ada:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e018      	b.n	8002b14 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae2:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b50      	ldr	r3, [pc, #320]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002ae8:	2101      	movs	r1, #1
 8002aea:	438a      	bics	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7ff f981 	bl	8001df4 <HAL_GetTick>
 8002af2:	0003      	movs	r3, r0
 8002af4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af8:	f7ff f97c 	bl	8001df4 <HAL_GetTick>
 8002afc:	0002      	movs	r2, r0
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e203      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	4b47      	ldr	r3, [pc, #284]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	4013      	ands	r3, r2
 8002b12:	d1f1      	bne.n	8002af8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d036      	beq.n	8002b8c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b40      	ldr	r3, [pc, #256]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2a:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7ff f95f 	bl	8001df4 <HAL_GetTick>
 8002b36:	0003      	movs	r3, r0
 8002b38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7ff f95a 	bl	8001df4 <HAL_GetTick>
 8002b40:	0002      	movs	r2, r0
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1e1      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2202      	movs	r2, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	d0f1      	beq.n	8002b3c <HAL_RCC_OscConfig+0x248>
 8002b58:	e018      	b.n	8002b8c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5a:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b5e:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002b60:	2101      	movs	r1, #1
 8002b62:	438a      	bics	r2, r1
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7ff f945 	bl	8001df4 <HAL_GetTick>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b70:	f7ff f940 	bl	8001df4 <HAL_GetTick>
 8002b74:	0002      	movs	r2, r0
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1c7      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b82:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2202      	movs	r2, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d1f1      	bne.n	8002b70 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2204      	movs	r2, #4
 8002b92:	4013      	ands	r3, r2
 8002b94:	d100      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2a4>
 8002b96:	e0b5      	b.n	8002d04 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b98:	231f      	movs	r3, #31
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	055b      	lsls	r3, r3, #21
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d111      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bac:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002bb2:	2180      	movs	r1, #128	; 0x80
 8002bb4:	0549      	lsls	r1, r1, #21
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	61da      	str	r2, [r3, #28]
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	055b      	lsls	r3, r3, #21
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bc8:	231f      	movs	r3, #31
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_RCC_OscConfig+0x340>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d11a      	bne.n	8002c12 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_RCC_OscConfig+0x340>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <HAL_RCC_OscConfig+0x340>)
 8002be2:	2180      	movs	r1, #128	; 0x80
 8002be4:	0049      	lsls	r1, r1, #1
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7ff f903 	bl	8001df4 <HAL_GetTick>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf4:	f7ff f8fe 	bl	8001df4 <HAL_GetTick>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e185      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_OscConfig+0x340>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d10e      	bne.n	8002c38 <HAL_RCC_OscConfig+0x344>
 8002c1a:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <HAL_RCC_OscConfig+0x334>)
 8002c20:	2101      	movs	r1, #1
 8002c22:	430a      	orrs	r2, r1
 8002c24:	621a      	str	r2, [r3, #32]
 8002c26:	e035      	b.n	8002c94 <HAL_RCC_OscConfig+0x3a0>
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	fffeffff 	.word	0xfffeffff
 8002c30:	fffbffff 	.word	0xfffbffff
 8002c34:	40007000 	.word	0x40007000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCC_OscConfig+0x366>
 8002c40:	4bb6      	ldr	r3, [pc, #728]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	4bb5      	ldr	r3, [pc, #724]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c46:	2101      	movs	r1, #1
 8002c48:	438a      	bics	r2, r1
 8002c4a:	621a      	str	r2, [r3, #32]
 8002c4c:	4bb3      	ldr	r3, [pc, #716]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	4bb2      	ldr	r3, [pc, #712]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c52:	2104      	movs	r1, #4
 8002c54:	438a      	bics	r2, r1
 8002c56:	621a      	str	r2, [r3, #32]
 8002c58:	e01c      	b.n	8002c94 <HAL_RCC_OscConfig+0x3a0>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x388>
 8002c62:	4bae      	ldr	r3, [pc, #696]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c64:	6a1a      	ldr	r2, [r3, #32]
 8002c66:	4bad      	ldr	r3, [pc, #692]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c68:	2104      	movs	r1, #4
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	621a      	str	r2, [r3, #32]
 8002c6e:	4bab      	ldr	r3, [pc, #684]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c70:	6a1a      	ldr	r2, [r3, #32]
 8002c72:	4baa      	ldr	r3, [pc, #680]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c74:	2101      	movs	r1, #1
 8002c76:	430a      	orrs	r2, r1
 8002c78:	621a      	str	r2, [r3, #32]
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCC_OscConfig+0x3a0>
 8002c7c:	4ba7      	ldr	r3, [pc, #668]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c7e:	6a1a      	ldr	r2, [r3, #32]
 8002c80:	4ba6      	ldr	r3, [pc, #664]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c82:	2101      	movs	r1, #1
 8002c84:	438a      	bics	r2, r1
 8002c86:	621a      	str	r2, [r3, #32]
 8002c88:	4ba4      	ldr	r3, [pc, #656]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	4ba3      	ldr	r3, [pc, #652]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002c8e:	2104      	movs	r1, #4
 8002c90:	438a      	bics	r2, r1
 8002c92:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d014      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9c:	f7ff f8aa 	bl	8001df4 <HAL_GetTick>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	e009      	b.n	8002cba <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7ff f8a5 	bl	8001df4 <HAL_GetTick>
 8002caa:	0002      	movs	r2, r0
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	4a9b      	ldr	r2, [pc, #620]	; (8002f20 <HAL_RCC_OscConfig+0x62c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e12b      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	4b98      	ldr	r3, [pc, #608]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x3b2>
 8002cc4:	e013      	b.n	8002cee <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7ff f895 	bl	8001df4 <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cce:	e009      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd0:	f7ff f890 	bl	8001df4 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	4a91      	ldr	r2, [pc, #580]	; (8002f20 <HAL_RCC_OscConfig+0x62c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e116      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	4b8d      	ldr	r3, [pc, #564]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	4013      	ands	r3, r2
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cee:	231f      	movs	r3, #31
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf8:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	4b87      	ldr	r3, [pc, #540]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002cfe:	4989      	ldr	r1, [pc, #548]	; (8002f24 <HAL_RCC_OscConfig+0x630>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2210      	movs	r2, #16
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d063      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d12a      	bne.n	8002d6c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d16:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1a:	4b80      	ldr	r3, [pc, #512]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d1c:	2104      	movs	r1, #4
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002d22:	4b7e      	ldr	r3, [pc, #504]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d26:	4b7d      	ldr	r3, [pc, #500]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d28:	2101      	movs	r1, #1
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2e:	f7ff f861 	bl	8001df4 <HAL_GetTick>
 8002d32:	0003      	movs	r3, r0
 8002d34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d38:	f7ff f85c 	bl	8001df4 <HAL_GetTick>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e0e3      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d4a:	4b74      	ldr	r3, [pc, #464]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4013      	ands	r3, r2
 8002d52:	d0f1      	beq.n	8002d38 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d54:	4b71      	ldr	r3, [pc, #452]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	22f8      	movs	r2, #248	; 0xf8
 8002d5a:	4393      	bics	r3, r2
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	00da      	lsls	r2, r3, #3
 8002d64:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d66:	430a      	orrs	r2, r1
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
 8002d6a:	e034      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	3305      	adds	r3, #5
 8002d72:	d111      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d74:	4b69      	ldr	r3, [pc, #420]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d7a:	2104      	movs	r1, #4
 8002d7c:	438a      	bics	r2, r1
 8002d7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d80:	4b66      	ldr	r3, [pc, #408]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	22f8      	movs	r2, #248	; 0xf8
 8002d86:	4393      	bics	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	00da      	lsls	r2, r3, #3
 8002d90:	4b62      	ldr	r3, [pc, #392]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d92:	430a      	orrs	r2, r1
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34
 8002d96:	e01e      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d98:	4b60      	ldr	r3, [pc, #384]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9c:	4b5f      	ldr	r3, [pc, #380]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002d9e:	2104      	movs	r1, #4
 8002da0:	430a      	orrs	r2, r1
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002da4:	4b5d      	ldr	r3, [pc, #372]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da8:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002daa:	2101      	movs	r1, #1
 8002dac:	438a      	bics	r2, r1
 8002dae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db0:	f7ff f820 	bl	8001df4 <HAL_GetTick>
 8002db4:	0003      	movs	r3, r0
 8002db6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002dba:	f7ff f81b 	bl	8001df4 <HAL_GetTick>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0a2      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002dcc:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d1f1      	bne.n	8002dba <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d100      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4ec>
 8002dde:	e097      	b.n	8002f10 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de0:	4b4e      	ldr	r3, [pc, #312]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	220c      	movs	r2, #12
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d100      	bne.n	8002dee <HAL_RCC_OscConfig+0x4fa>
 8002dec:	e06b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d14c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b48      	ldr	r3, [pc, #288]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002dfc:	494a      	ldr	r1, [pc, #296]	; (8002f28 <HAL_RCC_OscConfig+0x634>)
 8002dfe:	400a      	ands	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7fe fff7 	bl	8001df4 <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fff2 	bl	8001df4 <HAL_GetTick>
 8002e10:	0002      	movs	r2, r0
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e079      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	049b      	lsls	r3, r3, #18
 8002e26:	4013      	ands	r3, r2
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	220f      	movs	r2, #15
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e3e:	4b37      	ldr	r3, [pc, #220]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4a3a      	ldr	r2, [pc, #232]	; (8002f2c <HAL_RCC_OscConfig+0x638>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	431a      	orrs	r2, r3
 8002e52:	4b32      	ldr	r3, [pc, #200]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002e5e:	2180      	movs	r1, #128	; 0x80
 8002e60:	0449      	lsls	r1, r1, #17
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fe ffc5 	bl	8001df4 <HAL_GetTick>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe ffc0 	bl	8001df4 <HAL_GetTick>
 8002e74:	0002      	movs	r2, r0
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e047      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e82:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	049b      	lsls	r3, r3, #18
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x57c>
 8002e8e:	e03f      	b.n	8002f10 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002e96:	4924      	ldr	r1, [pc, #144]	; (8002f28 <HAL_RCC_OscConfig+0x634>)
 8002e98:	400a      	ands	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe ffaa 	bl	8001df4 <HAL_GetTick>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fe ffa5 	bl	8001df4 <HAL_GetTick>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e02c      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb8:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	049b      	lsls	r3, r3, #18
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x5b2>
 8002ec4:	e024      	b.n	8002f10 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e01f      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_RCC_OscConfig+0x628>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	23c0      	movs	r3, #192	; 0xc0
 8002ee2:	025b      	lsls	r3, r3, #9
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d10e      	bne.n	8002f0c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	23f0      	movs	r3, #240	; 0xf0
 8002f00:	039b      	lsls	r3, r3, #14
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	0018      	movs	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b008      	add	sp, #32
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	00001388 	.word	0x00001388
 8002f24:	efffffff 	.word	0xefffffff
 8002f28:	feffffff 	.word	0xfeffffff
 8002f2c:	ffc27fff 	.word	0xffc27fff

08002f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0b3      	b.n	80030ac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b5b      	ldr	r3, [pc, #364]	; (80030b4 <HAL_RCC_ClockConfig+0x184>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d911      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b58      	ldr	r3, [pc, #352]	; (80030b4 <HAL_RCC_ClockConfig+0x184>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2201      	movs	r2, #1
 8002f58:	4393      	bics	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	4b55      	ldr	r3, [pc, #340]	; (80030b4 <HAL_RCC_ClockConfig+0x184>)
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f64:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <HAL_RCC_ClockConfig+0x184>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e09a      	b.n	80030ac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d015      	beq.n	8002fac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2204      	movs	r2, #4
 8002f86:	4013      	ands	r3, r2
 8002f88:	d006      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f8a:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8002f90:	21e0      	movs	r1, #224	; 0xe0
 8002f92:	00c9      	lsls	r1, r1, #3
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f98:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	22f0      	movs	r2, #240	; 0xf0
 8002f9e:	4393      	bics	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d040      	beq.n	8003038 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b3e      	ldr	r3, [pc, #248]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	029b      	lsls	r3, r3, #10
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d114      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e06e      	b.n	80030ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	049b      	lsls	r3, r3, #18
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d108      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e062      	b.n	80030ac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2202      	movs	r2, #2
 8002fec:	4013      	ands	r3, r2
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e05b      	b.n	80030ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff4:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	4393      	bics	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fe fef4 	bl	8001df4 <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003010:	e009      	b.n	8003026 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003012:	f7fe feef 	bl	8001df4 <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	4a27      	ldr	r2, [pc, #156]	; (80030bc <HAL_RCC_ClockConfig+0x18c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e042      	b.n	80030ac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	220c      	movs	r2, #12
 800302c:	401a      	ands	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1ec      	bne.n	8003012 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_ClockConfig+0x184>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2201      	movs	r2, #1
 800303e:	4013      	ands	r3, r2
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d211      	bcs.n	800306a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <HAL_RCC_ClockConfig+0x184>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2201      	movs	r2, #1
 800304c:	4393      	bics	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <HAL_RCC_ClockConfig+0x184>)
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003058:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_RCC_ClockConfig+0x184>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	4013      	ands	r3, r2
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e020      	b.n	80030ac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2204      	movs	r2, #4
 8003070:	4013      	ands	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a11      	ldr	r2, [pc, #68]	; (80030c0 <HAL_RCC_ClockConfig+0x190>)
 800307a:	4013      	ands	r3, r2
 800307c:	0019      	movs	r1, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003088:	f000 f820 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 800308c:	0001      	movs	r1, r0
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_RCC_ClockConfig+0x188>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	220f      	movs	r2, #15
 8003096:	4013      	ands	r3, r2
 8003098:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x194>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	000a      	movs	r2, r1
 800309e:	40da      	lsrs	r2, r3
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x198>)
 80030a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7fe fe5f 	bl	8001d68 <HAL_InitTick>
  
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	0018      	movs	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b004      	add	sp, #16
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40022000 	.word	0x40022000
 80030b8:	40021000 	.word	0x40021000
 80030bc:	00001388 	.word	0x00001388
 80030c0:	fffff8ff 	.word	0xfffff8ff
 80030c4:	080045d4 	.word	0x080045d4
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b08f      	sub	sp, #60	; 0x3c
 80030d0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80030d2:	2314      	movs	r3, #20
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	4a2c      	ldr	r2, [pc, #176]	; (8003188 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030da:	c313      	stmia	r3!, {r0, r1, r4}
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	4a2a      	ldr	r2, [pc, #168]	; (800318c <HAL_RCC_GetSysClockFreq+0xc0>)
 80030e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030e6:	c313      	stmia	r3!, {r0, r1, r4}
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f0:	2300      	movs	r3, #0
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f4:	2300      	movs	r3, #0
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
 80030f8:	2300      	movs	r3, #0
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003100:	4b23      	ldr	r3, [pc, #140]	; (8003190 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	220c      	movs	r2, #12
 800310a:	4013      	ands	r3, r2
 800310c:	2b04      	cmp	r3, #4
 800310e:	d002      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x4a>
 8003110:	2b08      	cmp	r3, #8
 8003112:	d003      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x50>
 8003114:	e02f      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003116:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003118:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800311a:	e02f      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311e:	0c9b      	lsrs	r3, r3, #18
 8003120:	220f      	movs	r2, #15
 8003122:	4013      	ands	r3, r2
 8003124:	2214      	movs	r2, #20
 8003126:	18ba      	adds	r2, r7, r2
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <HAL_RCC_GetSysClockFreq+0xc4>)
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	220f      	movs	r2, #15
 8003132:	4013      	ands	r3, r2
 8003134:	1d3a      	adds	r2, r7, #4
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800313a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800313c:	23c0      	movs	r3, #192	; 0xc0
 800313e:	025b      	lsls	r3, r3, #9
 8003140:	401a      	ands	r2, r3
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	025b      	lsls	r3, r3, #9
 8003146:	429a      	cmp	r2, r3
 8003148:	d109      	bne.n	800315e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800314a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800314c:	4811      	ldr	r0, [pc, #68]	; (8003194 <HAL_RCC_GetSysClockFreq+0xc8>)
 800314e:	f7fc ffdb 	bl	8000108 <__udivsi3>
 8003152:	0003      	movs	r3, r0
 8003154:	001a      	movs	r2, r3
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	4353      	muls	r3, r2
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
 800315c:	e008      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800315e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003160:	480c      	ldr	r0, [pc, #48]	; (8003194 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003162:	f7fc ffd1 	bl	8000108 <__udivsi3>
 8003166:	0003      	movs	r3, r0
 8003168:	001a      	movs	r2, r3
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	4353      	muls	r3, r2
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003172:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003174:	e002      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800317a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b00f      	add	sp, #60	; 0x3c
 8003184:	bd90      	pop	{r4, r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	08004534 	.word	0x08004534
 800318c:	08004544 	.word	0x08004544
 8003190:	40021000 	.word	0x40021000
 8003194:	007a1200 	.word	0x007a1200

08003198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800319c:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800319e:	681b      	ldr	r3, [r3, #0]
}
 80031a0:	0018      	movs	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	20000004 	.word	0x20000004

080031ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80031b0:	f7ff fff2 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 80031b4:	0001      	movs	r1, r0
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	2207      	movs	r2, #7
 80031be:	4013      	ands	r3, r2
 80031c0:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	40d9      	lsrs	r1, r3
 80031c6:	000b      	movs	r3, r1
}    
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	40021000 	.word	0x40021000
 80031d4:	080045e4 	.word	0x080045e4

080031d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e042      	b.n	8003270 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	223d      	movs	r2, #61	; 0x3d
 80031ee:	5c9b      	ldrb	r3, [r3, r2]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d107      	bne.n	8003206 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	223c      	movs	r2, #60	; 0x3c
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	0018      	movs	r0, r3
 8003202:	f7fe fcad 	bl	8001b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223d      	movs	r2, #61	; 0x3d
 800320a:	2102      	movs	r1, #2
 800320c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	0019      	movs	r1, r3
 8003218:	0010      	movs	r0, r2
 800321a:	f000 faa5 	bl	8003768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2246      	movs	r2, #70	; 0x46
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	223e      	movs	r2, #62	; 0x3e
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	223f      	movs	r2, #63	; 0x3f
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2240      	movs	r2, #64	; 0x40
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2241      	movs	r2, #65	; 0x41
 8003242:	2101      	movs	r1, #1
 8003244:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2242      	movs	r2, #66	; 0x42
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2243      	movs	r2, #67	; 0x43
 8003252:	2101      	movs	r1, #1
 8003254:	5499      	strb	r1, [r3, r2]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2244      	movs	r2, #68	; 0x44
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2245      	movs	r2, #69	; 0x45
 8003262:	2101      	movs	r1, #1
 8003264:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	223d      	movs	r2, #61	; 0x3d
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e042      	b.n	8003310 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	223d      	movs	r2, #61	; 0x3d
 800328e:	5c9b      	ldrb	r3, [r3, r2]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	223c      	movs	r2, #60	; 0x3c
 800329a:	2100      	movs	r1, #0
 800329c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 f839 	bl	8003318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	223d      	movs	r2, #61	; 0x3d
 80032aa:	2102      	movs	r1, #2
 80032ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	0019      	movs	r1, r3
 80032b8:	0010      	movs	r0, r2
 80032ba:	f000 fa55 	bl	8003768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2246      	movs	r2, #70	; 0x46
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	223e      	movs	r2, #62	; 0x3e
 80032ca:	2101      	movs	r1, #1
 80032cc:	5499      	strb	r1, [r3, r2]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	223f      	movs	r2, #63	; 0x3f
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2241      	movs	r2, #65	; 0x41
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2242      	movs	r2, #66	; 0x42
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2243      	movs	r2, #67	; 0x43
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2244      	movs	r2, #68	; 0x44
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2245      	movs	r2, #69	; 0x45
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	223d      	movs	r2, #61	; 0x3d
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d108      	bne.n	800334a <HAL_TIM_PWM_Start+0x22>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	223e      	movs	r2, #62	; 0x3e
 800333c:	5c9b      	ldrb	r3, [r3, r2]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	1e5a      	subs	r2, r3, #1
 8003344:	4193      	sbcs	r3, r2
 8003346:	b2db      	uxtb	r3, r3
 8003348:	e01f      	b.n	800338a <HAL_TIM_PWM_Start+0x62>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d108      	bne.n	8003362 <HAL_TIM_PWM_Start+0x3a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	223f      	movs	r2, #63	; 0x3f
 8003354:	5c9b      	ldrb	r3, [r3, r2]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	1e5a      	subs	r2, r3, #1
 800335c:	4193      	sbcs	r3, r2
 800335e:	b2db      	uxtb	r3, r3
 8003360:	e013      	b.n	800338a <HAL_TIM_PWM_Start+0x62>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d108      	bne.n	800337a <HAL_TIM_PWM_Start+0x52>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	5c9b      	ldrb	r3, [r3, r2]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	1e5a      	subs	r2, r3, #1
 8003374:	4193      	sbcs	r3, r2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	e007      	b.n	800338a <HAL_TIM_PWM_Start+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2241      	movs	r2, #65	; 0x41
 800337e:	5c9b      	ldrb	r3, [r3, r2]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	4193      	sbcs	r3, r2
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e06e      	b.n	8003470 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d104      	bne.n	80033a2 <HAL_TIM_PWM_Start+0x7a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	223e      	movs	r2, #62	; 0x3e
 800339c:	2102      	movs	r1, #2
 800339e:	5499      	strb	r1, [r3, r2]
 80033a0:	e013      	b.n	80033ca <HAL_TIM_PWM_Start+0xa2>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d104      	bne.n	80033b2 <HAL_TIM_PWM_Start+0x8a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	223f      	movs	r2, #63	; 0x3f
 80033ac:	2102      	movs	r1, #2
 80033ae:	5499      	strb	r1, [r3, r2]
 80033b0:	e00b      	b.n	80033ca <HAL_TIM_PWM_Start+0xa2>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d104      	bne.n	80033c2 <HAL_TIM_PWM_Start+0x9a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2240      	movs	r2, #64	; 0x40
 80033bc:	2102      	movs	r1, #2
 80033be:	5499      	strb	r1, [r3, r2]
 80033c0:	e003      	b.n	80033ca <HAL_TIM_PWM_Start+0xa2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2241      	movs	r2, #65	; 0x41
 80033c6:	2102      	movs	r1, #2
 80033c8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6839      	ldr	r1, [r7, #0]
 80033d0:	2201      	movs	r2, #1
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 fcd4 	bl	8003d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a26      	ldr	r2, [pc, #152]	; (8003478 <HAL_TIM_PWM_Start+0x150>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00e      	beq.n	8003400 <HAL_TIM_PWM_Start+0xd8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a25      	ldr	r2, [pc, #148]	; (800347c <HAL_TIM_PWM_Start+0x154>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d009      	beq.n	8003400 <HAL_TIM_PWM_Start+0xd8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a23      	ldr	r2, [pc, #140]	; (8003480 <HAL_TIM_PWM_Start+0x158>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d004      	beq.n	8003400 <HAL_TIM_PWM_Start+0xd8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a22      	ldr	r2, [pc, #136]	; (8003484 <HAL_TIM_PWM_Start+0x15c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d101      	bne.n	8003404 <HAL_TIM_PWM_Start+0xdc>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <HAL_TIM_PWM_Start+0xde>
 8003404:	2300      	movs	r3, #0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	0209      	lsls	r1, r1, #8
 8003418:	430a      	orrs	r2, r1
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <HAL_TIM_PWM_Start+0x150>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_TIM_PWM_Start+0x112>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <HAL_TIM_PWM_Start+0x160>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIM_PWM_Start+0x112>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a11      	ldr	r2, [pc, #68]	; (800347c <HAL_TIM_PWM_Start+0x154>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d111      	bne.n	800345e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2207      	movs	r2, #7
 8003442:	4013      	ands	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b06      	cmp	r3, #6
 800344a:	d010      	beq.n	800346e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2101      	movs	r1, #1
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345c:	e007      	b.n	800346e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2101      	movs	r1, #1
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b004      	add	sp, #16
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40014000 	.word	0x40014000
 8003480:	40014400 	.word	0x40014400
 8003484:	40014800 	.word	0x40014800
 8003488:	40000400 	.word	0x40000400

0800348c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	223c      	movs	r2, #60	; 0x3c
 800349c:	5c9b      	ldrb	r3, [r3, r2]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e09c      	b.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x154>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	223c      	movs	r2, #60	; 0x3c
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d029      	beq.n	8003508 <HAL_TIM_PWM_ConfigChannel+0x7c>
 80034b4:	d802      	bhi.n	80034bc <HAL_TIM_PWM_ConfigChannel+0x30>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x3a>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80034ba:	e08c      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x14a>
  switch (Channel)
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d046      	beq.n	800354e <HAL_TIM_PWM_ConfigChannel+0xc2>
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d065      	beq.n	8003590 <HAL_TIM_PWM_ConfigChannel+0x104>
      break;
 80034c4:	e087      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	0011      	movs	r1, r2
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f9c0 	bl	8003854 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2108      	movs	r1, #8
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2104      	movs	r1, #4
 80034f0:	438a      	bics	r2, r1
 80034f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6999      	ldr	r1, [r3, #24]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	619a      	str	r2, [r3, #24]
      break;
 8003506:	e066      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	0011      	movs	r1, r2
 8003510:	0018      	movs	r0, r3
 8003512:	f000 fa27 	bl	8003964 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0109      	lsls	r1, r1, #4
 8003524:	430a      	orrs	r2, r1
 8003526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	492d      	ldr	r1, [pc, #180]	; (80035e8 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 8003534:	400a      	ands	r2, r1
 8003536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6999      	ldr	r1, [r3, #24]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	021a      	lsls	r2, r3, #8
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	619a      	str	r2, [r3, #24]
      break;
 800354c:	e043      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	0011      	movs	r1, r2
 8003556:	0018      	movs	r0, r3
 8003558:	f000 fa88 	bl	8003a6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69da      	ldr	r2, [r3, #28]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2108      	movs	r1, #8
 8003568:	430a      	orrs	r2, r1
 800356a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2104      	movs	r1, #4
 8003578:	438a      	bics	r2, r1
 800357a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69d9      	ldr	r1, [r3, #28]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	61da      	str	r2, [r3, #28]
      break;
 800358e:	e022      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x14a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	0011      	movs	r1, r2
 8003598:	0018      	movs	r0, r3
 800359a:	f000 faed 	bl	8003b78 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2180      	movs	r1, #128	; 0x80
 80035aa:	0109      	lsls	r1, r1, #4
 80035ac:	430a      	orrs	r2, r1
 80035ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	490b      	ldr	r1, [pc, #44]	; (80035e8 <HAL_TIM_PWM_ConfigChannel+0x15c>)
 80035bc:	400a      	ands	r2, r1
 80035be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69d9      	ldr	r1, [r3, #28]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	021a      	lsls	r2, r3, #8
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	61da      	str	r2, [r3, #28]
      break;
 80035d4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	223c      	movs	r2, #60	; 0x3c
 80035da:	2100      	movs	r1, #0
 80035dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b004      	add	sp, #16
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	fffffbff 	.word	0xfffffbff

080035ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	223c      	movs	r2, #60	; 0x3c
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_TIM_ConfigClockSource+0x18>
 8003600:	2302      	movs	r3, #2
 8003602:	e0ab      	b.n	800375c <HAL_TIM_ConfigClockSource+0x170>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	223c      	movs	r2, #60	; 0x3c
 8003608:	2101      	movs	r1, #1
 800360a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	223d      	movs	r2, #61	; 0x3d
 8003610:	2102      	movs	r1, #2
 8003612:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2277      	movs	r2, #119	; 0x77
 8003620:	4393      	bics	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a4f      	ldr	r2, [pc, #316]	; (8003764 <HAL_TIM_ConfigClockSource+0x178>)
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d100      	bne.n	800363e <HAL_TIM_ConfigClockSource+0x52>
 800363c:	e06b      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x12a>
 800363e:	d80e      	bhi.n	800365e <HAL_TIM_ConfigClockSource+0x72>
 8003640:	2b10      	cmp	r3, #16
 8003642:	d100      	bne.n	8003646 <HAL_TIM_ConfigClockSource+0x5a>
 8003644:	e077      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x14a>
 8003646:	d803      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x64>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d100      	bne.n	800364e <HAL_TIM_ConfigClockSource+0x62>
 800364c:	e073      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800364e:	e07c      	b.n	800374a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003650:	2b20      	cmp	r3, #32
 8003652:	d100      	bne.n	8003656 <HAL_TIM_ConfigClockSource+0x6a>
 8003654:	e06f      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x14a>
 8003656:	2b30      	cmp	r3, #48	; 0x30
 8003658:	d100      	bne.n	800365c <HAL_TIM_ConfigClockSource+0x70>
 800365a:	e06c      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800365c:	e075      	b.n	800374a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800365e:	2b70      	cmp	r3, #112	; 0x70
 8003660:	d00e      	beq.n	8003680 <HAL_TIM_ConfigClockSource+0x94>
 8003662:	d804      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x82>
 8003664:	2b50      	cmp	r3, #80	; 0x50
 8003666:	d036      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0xea>
 8003668:	2b60      	cmp	r3, #96	; 0x60
 800366a:	d044      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800366c:	e06d      	b.n	800374a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	0152      	lsls	r2, r2, #5
 8003672:	4293      	cmp	r3, r2
 8003674:	d068      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0x15c>
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	0192      	lsls	r2, r2, #6
 800367a:	4293      	cmp	r3, r2
 800367c:	d017      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800367e:	e064      	b.n	800374a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6899      	ldr	r1, [r3, #8]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f000 fb56 	bl	8003d40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2277      	movs	r2, #119	; 0x77
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	609a      	str	r2, [r3, #8]
      break;
 80036ac:	e04d      	b.n	800374a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6899      	ldr	r1, [r3, #8]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f000 fb3f 	bl	8003d40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	01c9      	lsls	r1, r1, #7
 80036d0:	430a      	orrs	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]
      break;
 80036d4:	e039      	b.n	800374a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6859      	ldr	r1, [r3, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	001a      	movs	r2, r3
 80036e4:	f000 fab2 	bl	8003c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2150      	movs	r1, #80	; 0x50
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 fb0c 	bl	8003d0c <TIM_ITRx_SetConfig>
      break;
 80036f4:	e029      	b.n	800374a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	001a      	movs	r2, r3
 8003704:	f000 fad0 	bl	8003ca8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2160      	movs	r1, #96	; 0x60
 800370e:	0018      	movs	r0, r3
 8003710:	f000 fafc 	bl	8003d0c <TIM_ITRx_SetConfig>
      break;
 8003714:	e019      	b.n	800374a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	001a      	movs	r2, r3
 8003724:	f000 fa92 	bl	8003c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2140      	movs	r1, #64	; 0x40
 800372e:	0018      	movs	r0, r3
 8003730:	f000 faec 	bl	8003d0c <TIM_ITRx_SetConfig>
      break;
 8003734:	e009      	b.n	800374a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	0019      	movs	r1, r3
 8003740:	0010      	movs	r0, r2
 8003742:	f000 fae3 	bl	8003d0c <TIM_ITRx_SetConfig>
        break;
 8003746:	e000      	b.n	800374a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003748:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	223d      	movs	r2, #61	; 0x3d
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	223c      	movs	r2, #60	; 0x3c
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b004      	add	sp, #16
 8003762:	bd80      	pop	{r7, pc}
 8003764:	ffff00ff 	.word	0xffff00ff

08003768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <TIM_Base_SetConfig+0xd0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_Base_SetConfig+0x20>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a2e      	ldr	r2, [pc, #184]	; (800383c <TIM_Base_SetConfig+0xd4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2270      	movs	r2, #112	; 0x70
 800378c:	4393      	bics	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a26      	ldr	r2, [pc, #152]	; (8003838 <TIM_Base_SetConfig+0xd0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a25      	ldr	r2, [pc, #148]	; (800383c <TIM_Base_SetConfig+0xd4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00f      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <TIM_Base_SetConfig+0xd8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00b      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <TIM_Base_SetConfig+0xdc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <TIM_Base_SetConfig+0xe0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_Base_SetConfig+0x62>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a21      	ldr	r2, [pc, #132]	; (800384c <TIM_Base_SetConfig+0xe4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d108      	bne.n	80037dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a20      	ldr	r2, [pc, #128]	; (8003850 <TIM_Base_SetConfig+0xe8>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2280      	movs	r2, #128	; 0x80
 80037e0:	4393      	bics	r3, r2
 80037e2:	001a      	movs	r2, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <TIM_Base_SetConfig+0xd0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00b      	beq.n	8003822 <TIM_Base_SetConfig+0xba>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a0d      	ldr	r2, [pc, #52]	; (8003844 <TIM_Base_SetConfig+0xdc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d007      	beq.n	8003822 <TIM_Base_SetConfig+0xba>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <TIM_Base_SetConfig+0xe0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d003      	beq.n	8003822 <TIM_Base_SetConfig+0xba>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a0b      	ldr	r2, [pc, #44]	; (800384c <TIM_Base_SetConfig+0xe4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d103      	bne.n	800382a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	615a      	str	r2, [r3, #20]
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b004      	add	sp, #16
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40000400 	.word	0x40000400
 8003840:	40002000 	.word	0x40002000
 8003844:	40014000 	.word	0x40014000
 8003848:	40014400 	.word	0x40014400
 800384c:	40014800 	.word	0x40014800
 8003850:	fffffcff 	.word	0xfffffcff

08003854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	2201      	movs	r2, #1
 8003864:	4393      	bics	r3, r2
 8003866:	001a      	movs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2270      	movs	r2, #112	; 0x70
 8003882:	4393      	bics	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2203      	movs	r2, #3
 800388a:	4393      	bics	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2202      	movs	r2, #2
 800389c:	4393      	bics	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a27      	ldr	r2, [pc, #156]	; (800394c <TIM_OC1_SetConfig+0xf8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_OC1_SetConfig+0x76>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a26      	ldr	r2, [pc, #152]	; (8003950 <TIM_OC1_SetConfig+0xfc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_OC1_SetConfig+0x76>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a25      	ldr	r2, [pc, #148]	; (8003954 <TIM_OC1_SetConfig+0x100>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_OC1_SetConfig+0x76>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a24      	ldr	r2, [pc, #144]	; (8003958 <TIM_OC1_SetConfig+0x104>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10c      	bne.n	80038e4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2208      	movs	r2, #8
 80038ce:	4393      	bics	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2204      	movs	r2, #4
 80038e0:	4393      	bics	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a19      	ldr	r2, [pc, #100]	; (800394c <TIM_OC1_SetConfig+0xf8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00b      	beq.n	8003904 <TIM_OC1_SetConfig+0xb0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a18      	ldr	r2, [pc, #96]	; (8003950 <TIM_OC1_SetConfig+0xfc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <TIM_OC1_SetConfig+0xb0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a17      	ldr	r2, [pc, #92]	; (8003954 <TIM_OC1_SetConfig+0x100>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <TIM_OC1_SetConfig+0xb0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a16      	ldr	r2, [pc, #88]	; (8003958 <TIM_OC1_SetConfig+0x104>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d111      	bne.n	8003928 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4a15      	ldr	r2, [pc, #84]	; (800395c <TIM_OC1_SetConfig+0x108>)
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4a14      	ldr	r2, [pc, #80]	; (8003960 <TIM_OC1_SetConfig+0x10c>)
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b006      	add	sp, #24
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40014000 	.word	0x40014000
 8003954:	40014400 	.word	0x40014400
 8003958:	40014800 	.word	0x40014800
 800395c:	fffffeff 	.word	0xfffffeff
 8003960:	fffffdff 	.word	0xfffffdff

08003964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	2210      	movs	r2, #16
 8003974:	4393      	bics	r3, r2
 8003976:	001a      	movs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a2e      	ldr	r2, [pc, #184]	; (8003a4c <TIM_OC2_SetConfig+0xe8>)
 8003992:	4013      	ands	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <TIM_OC2_SetConfig+0xec>)
 800399a:	4013      	ands	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2220      	movs	r2, #32
 80039ae:	4393      	bics	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a24      	ldr	r2, [pc, #144]	; (8003a54 <TIM_OC2_SetConfig+0xf0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10d      	bne.n	80039e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	4393      	bics	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2240      	movs	r2, #64	; 0x40
 80039de:	4393      	bics	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <TIM_OC2_SetConfig+0xf0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <TIM_OC2_SetConfig+0x9e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <TIM_OC2_SetConfig+0xf4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <TIM_OC2_SetConfig+0x9e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <TIM_OC2_SetConfig+0xf8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_OC2_SetConfig+0x9e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <TIM_OC2_SetConfig+0xfc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d113      	bne.n	8003a2a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <TIM_OC2_SetConfig+0x100>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <TIM_OC2_SetConfig+0x104>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	621a      	str	r2, [r3, #32]
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b006      	add	sp, #24
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	ffff8fff 	.word	0xffff8fff
 8003a50:	fffffcff 	.word	0xfffffcff
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40014400 	.word	0x40014400
 8003a60:	40014800 	.word	0x40014800
 8003a64:	fffffbff 	.word	0xfffffbff
 8003a68:	fffff7ff 	.word	0xfffff7ff

08003a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <TIM_OC3_SetConfig+0xe4>)
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2270      	movs	r2, #112	; 0x70
 8003a98:	4393      	bics	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	; (8003b54 <TIM_OC3_SetConfig+0xe8>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a24      	ldr	r2, [pc, #144]	; (8003b58 <TIM_OC3_SetConfig+0xec>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d10d      	bne.n	8003ae6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4a23      	ldr	r2, [pc, #140]	; (8003b5c <TIM_OC3_SetConfig+0xf0>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <TIM_OC3_SetConfig+0xf4>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <TIM_OC3_SetConfig+0xec>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <TIM_OC3_SetConfig+0x9a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1c      	ldr	r2, [pc, #112]	; (8003b64 <TIM_OC3_SetConfig+0xf8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <TIM_OC3_SetConfig+0x9a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1b      	ldr	r2, [pc, #108]	; (8003b68 <TIM_OC3_SetConfig+0xfc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_OC3_SetConfig+0x9a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1a      	ldr	r2, [pc, #104]	; (8003b6c <TIM_OC3_SetConfig+0x100>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d113      	bne.n	8003b2e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4a19      	ldr	r2, [pc, #100]	; (8003b70 <TIM_OC3_SetConfig+0x104>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <TIM_OC3_SetConfig+0x108>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	621a      	str	r2, [r3, #32]
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b006      	add	sp, #24
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	fffffeff 	.word	0xfffffeff
 8003b54:	fffffdff 	.word	0xfffffdff
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	fffff7ff 	.word	0xfffff7ff
 8003b60:	fffffbff 	.word	0xfffffbff
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800
 8003b70:	ffffefff 	.word	0xffffefff
 8003b74:	ffffdfff 	.word	0xffffdfff

08003b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a28      	ldr	r2, [pc, #160]	; (8003c28 <TIM_OC4_SetConfig+0xb0>)
 8003b88:	401a      	ands	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <TIM_OC4_SetConfig+0xb4>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <TIM_OC4_SetConfig+0xb8>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <TIM_OC4_SetConfig+0xbc>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	031b      	lsls	r3, r3, #12
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <TIM_OC4_SetConfig+0xc0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00b      	beq.n	8003bf0 <TIM_OC4_SetConfig+0x78>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <TIM_OC4_SetConfig+0xc4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_OC4_SetConfig+0x78>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <TIM_OC4_SetConfig+0xc8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_OC4_SetConfig+0x78>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <TIM_OC4_SetConfig+0xcc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d109      	bne.n	8003c04 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <TIM_OC4_SetConfig+0xd0>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	019b      	lsls	r3, r3, #6
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b006      	add	sp, #24
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	ffffefff 	.word	0xffffefff
 8003c2c:	ffff8fff 	.word	0xffff8fff
 8003c30:	fffffcff 	.word	0xfffffcff
 8003c34:	ffffdfff 	.word	0xffffdfff
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800
 8003c48:	ffffbfff 	.word	0xffffbfff

08003c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	2201      	movs	r2, #1
 8003c64:	4393      	bics	r3, r2
 8003c66:	001a      	movs	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	22f0      	movs	r2, #240	; 0xf0
 8003c76:	4393      	bics	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	220a      	movs	r2, #10
 8003c88:	4393      	bics	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	621a      	str	r2, [r3, #32]
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b006      	add	sp, #24
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	2210      	movs	r2, #16
 8003cba:	4393      	bics	r3, r2
 8003cbc:	001a      	movs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	4a0d      	ldr	r2, [pc, #52]	; (8003d08 <TIM_TI2_ConfigInputStage+0x60>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	031b      	lsls	r3, r3, #12
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	22a0      	movs	r2, #160	; 0xa0
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	621a      	str	r2, [r3, #32]
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b006      	add	sp, #24
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	ffff0fff 	.word	0xffff0fff

08003d0c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2270      	movs	r2, #112	; 0x70
 8003d20:	4393      	bics	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	2207      	movs	r2, #7
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	609a      	str	r2, [r3, #8]
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b004      	add	sp, #16
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <TIM_ETR_SetConfig+0x3c>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	021a      	lsls	r2, r3, #8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	609a      	str	r2, [r3, #8]
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b006      	add	sp, #24
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	ffff00ff 	.word	0xffff00ff

08003d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	221f      	movs	r2, #31
 8003d90:	4013      	ands	r3, r2
 8003d92:	2201      	movs	r2, #1
 8003d94:	409a      	lsls	r2, r3
 8003d96:	0013      	movs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	43d2      	mvns	r2, r2
 8003da2:	401a      	ands	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	211f      	movs	r1, #31
 8003db0:	400b      	ands	r3, r1
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4099      	lsls	r1, r3
 8003db6:	000b      	movs	r3, r1
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b006      	add	sp, #24
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	223c      	movs	r2, #60	; 0x3c
 8003dd6:	5c9b      	ldrb	r3, [r3, r2]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e041      	b.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	223c      	movs	r2, #60	; 0x3c
 8003de4:	2101      	movs	r1, #1
 8003de6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	223d      	movs	r2, #61	; 0x3d
 8003dec:	2102      	movs	r1, #2
 8003dee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2270      	movs	r2, #112	; 0x70
 8003e04:	4393      	bics	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a13      	ldr	r2, [pc, #76]	; (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a10      	ldr	r2, [pc, #64]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d10c      	bne.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	223d      	movs	r2, #61	; 0x3d
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	223c      	movs	r2, #60	; 0x3c
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b004      	add	sp, #16
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40014000 	.word	0x40014000

08003e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e044      	b.n	8003f14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d107      	bne.n	8003ea2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2274      	movs	r2, #116	; 0x74
 8003e96:	2100      	movs	r1, #0
 8003e98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f7fd febd 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2224      	movs	r2, #36	; 0x24
 8003ea6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f000 f830 	bl	8003f20 <UART_SetConfig>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e024      	b.n	8003f14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 f979 	bl	80041cc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	490d      	ldr	r1, [pc, #52]	; (8003f1c <HAL_UART_Init+0xa4>)
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2108      	movs	r1, #8
 8003ef6:	438a      	bics	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2101      	movs	r1, #1
 8003f06:	430a      	orrs	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f000 fa11 	bl	8004334 <UART_CheckIdleState>
 8003f12:	0003      	movs	r3, r0
}
 8003f14:	0018      	movs	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	fffff7ff 	.word	0xfffff7ff

08003f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f28:	231e      	movs	r3, #30
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a95      	ldr	r2, [pc, #596]	; (80041a4 <UART_SetConfig+0x284>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4a90      	ldr	r2, [pc, #576]	; (80041a8 <UART_SetConfig+0x288>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	0019      	movs	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a87      	ldr	r2, [pc, #540]	; (80041ac <UART_SetConfig+0x28c>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a83      	ldr	r2, [pc, #524]	; (80041b0 <UART_SetConfig+0x290>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d125      	bne.n	8003ff2 <UART_SetConfig+0xd2>
 8003fa6:	4b83      	ldr	r3, [pc, #524]	; (80041b4 <UART_SetConfig+0x294>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	2203      	movs	r2, #3
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d00f      	beq.n	8003fd2 <UART_SetConfig+0xb2>
 8003fb2:	d304      	bcc.n	8003fbe <UART_SetConfig+0x9e>
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d011      	beq.n	8003fdc <UART_SetConfig+0xbc>
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d005      	beq.n	8003fc8 <UART_SetConfig+0xa8>
 8003fbc:	e013      	b.n	8003fe6 <UART_SetConfig+0xc6>
 8003fbe:	231f      	movs	r3, #31
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e036      	b.n	8004036 <UART_SetConfig+0x116>
 8003fc8:	231f      	movs	r3, #31
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	2202      	movs	r2, #2
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e031      	b.n	8004036 <UART_SetConfig+0x116>
 8003fd2:	231f      	movs	r3, #31
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e02c      	b.n	8004036 <UART_SetConfig+0x116>
 8003fdc:	231f      	movs	r3, #31
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	e027      	b.n	8004036 <UART_SetConfig+0x116>
 8003fe6:	231f      	movs	r3, #31
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	2210      	movs	r2, #16
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	e021      	b.n	8004036 <UART_SetConfig+0x116>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a70      	ldr	r2, [pc, #448]	; (80041b8 <UART_SetConfig+0x298>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d104      	bne.n	8004006 <UART_SetConfig+0xe6>
 8003ffc:	231f      	movs	r3, #31
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e017      	b.n	8004036 <UART_SetConfig+0x116>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a6c      	ldr	r2, [pc, #432]	; (80041bc <UART_SetConfig+0x29c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d104      	bne.n	800401a <UART_SetConfig+0xfa>
 8004010:	231f      	movs	r3, #31
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	e00d      	b.n	8004036 <UART_SetConfig+0x116>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a68      	ldr	r2, [pc, #416]	; (80041c0 <UART_SetConfig+0x2a0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d104      	bne.n	800402e <UART_SetConfig+0x10e>
 8004024:	231f      	movs	r3, #31
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e003      	b.n	8004036 <UART_SetConfig+0x116>
 800402e:	231f      	movs	r3, #31
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	2210      	movs	r2, #16
 8004034:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	429a      	cmp	r2, r3
 8004040:	d15c      	bne.n	80040fc <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8004042:	231f      	movs	r3, #31
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d00d      	beq.n	8004068 <UART_SetConfig+0x148>
 800404c:	dc02      	bgt.n	8004054 <UART_SetConfig+0x134>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <UART_SetConfig+0x13e>
 8004052:	e015      	b.n	8004080 <UART_SetConfig+0x160>
 8004054:	2b04      	cmp	r3, #4
 8004056:	d00a      	beq.n	800406e <UART_SetConfig+0x14e>
 8004058:	2b08      	cmp	r3, #8
 800405a:	d00d      	beq.n	8004078 <UART_SetConfig+0x158>
 800405c:	e010      	b.n	8004080 <UART_SetConfig+0x160>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405e:	f7ff f8a5 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8004062:	0003      	movs	r3, r0
 8004064:	61bb      	str	r3, [r7, #24]
        break;
 8004066:	e012      	b.n	800408e <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004068:	4b56      	ldr	r3, [pc, #344]	; (80041c4 <UART_SetConfig+0x2a4>)
 800406a:	61bb      	str	r3, [r7, #24]
        break;
 800406c:	e00f      	b.n	800408e <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406e:	f7ff f82d 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8004072:	0003      	movs	r3, r0
 8004074:	61bb      	str	r3, [r7, #24]
        break;
 8004076:	e00a      	b.n	800408e <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	61bb      	str	r3, [r7, #24]
        break;
 800407e:	e006      	b.n	800408e <UART_SetConfig+0x16e>
      default:
        pclk = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004084:	231e      	movs	r3, #30
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
        break;
 800408c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d100      	bne.n	8004096 <UART_SetConfig+0x176>
 8004094:	e079      	b.n	800418a <UART_SetConfig+0x26a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	005a      	lsls	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	18d2      	adds	r2, r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	0019      	movs	r1, r3
 80040a8:	0010      	movs	r0, r2
 80040aa:	f7fc f82d 	bl	8000108 <__udivsi3>
 80040ae:	0003      	movs	r3, r0
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	d91b      	bls.n	80040f2 <UART_SetConfig+0x1d2>
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4a42      	ldr	r2, [pc, #264]	; (80041c8 <UART_SetConfig+0x2a8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d817      	bhi.n	80040f2 <UART_SetConfig+0x1d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	200e      	movs	r0, #14
 80040c8:	183b      	adds	r3, r7, r0
 80040ca:	210f      	movs	r1, #15
 80040cc:	438a      	bics	r2, r1
 80040ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2207      	movs	r2, #7
 80040d8:	4013      	ands	r3, r2
 80040da:	b299      	uxth	r1, r3
 80040dc:	183b      	adds	r3, r7, r0
 80040de:	183a      	adds	r2, r7, r0
 80040e0:	8812      	ldrh	r2, [r2, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	183a      	adds	r2, r7, r0
 80040ec:	8812      	ldrh	r2, [r2, #0]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	e04b      	b.n	800418a <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 80040f2:	231e      	movs	r3, #30
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e046      	b.n	800418a <UART_SetConfig+0x26a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040fc:	231f      	movs	r3, #31
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d00d      	beq.n	8004122 <UART_SetConfig+0x202>
 8004106:	dc02      	bgt.n	800410e <UART_SetConfig+0x1ee>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <UART_SetConfig+0x1f8>
 800410c:	e015      	b.n	800413a <UART_SetConfig+0x21a>
 800410e:	2b04      	cmp	r3, #4
 8004110:	d00a      	beq.n	8004128 <UART_SetConfig+0x208>
 8004112:	2b08      	cmp	r3, #8
 8004114:	d00d      	beq.n	8004132 <UART_SetConfig+0x212>
 8004116:	e010      	b.n	800413a <UART_SetConfig+0x21a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004118:	f7ff f848 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 800411c:	0003      	movs	r3, r0
 800411e:	61bb      	str	r3, [r7, #24]
        break;
 8004120:	e012      	b.n	8004148 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004122:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <UART_SetConfig+0x2a4>)
 8004124:	61bb      	str	r3, [r7, #24]
        break;
 8004126:	e00f      	b.n	8004148 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004128:	f7fe ffd0 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 800412c:	0003      	movs	r3, r0
 800412e:	61bb      	str	r3, [r7, #24]
        break;
 8004130:	e00a      	b.n	8004148 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	61bb      	str	r3, [r7, #24]
        break;
 8004138:	e006      	b.n	8004148 <UART_SetConfig+0x228>
      default:
        pclk = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800413e:	231e      	movs	r3, #30
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
        break;
 8004146:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01d      	beq.n	800418a <UART_SetConfig+0x26a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	085a      	lsrs	r2, r3, #1
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	18d2      	adds	r2, r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0019      	movs	r1, r3
 800415e:	0010      	movs	r0, r2
 8004160:	f7fb ffd2 	bl	8000108 <__udivsi3>
 8004164:	0003      	movs	r3, r0
 8004166:	b29b      	uxth	r3, r3
 8004168:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b0f      	cmp	r3, #15
 800416e:	d908      	bls.n	8004182 <UART_SetConfig+0x262>
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <UART_SetConfig+0x2a8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d804      	bhi.n	8004182 <UART_SetConfig+0x262>
      {
        huart->Instance->BRR = usartdiv;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	60da      	str	r2, [r3, #12]
 8004180:	e003      	b.n	800418a <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 8004182:	231e      	movs	r3, #30
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004196:	231e      	movs	r3, #30
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	781b      	ldrb	r3, [r3, #0]
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b008      	add	sp, #32
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	efff69f3 	.word	0xefff69f3
 80041a8:	ffffcfff 	.word	0xffffcfff
 80041ac:	fffff4ff 	.word	0xfffff4ff
 80041b0:	40013800 	.word	0x40013800
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40004400 	.word	0x40004400
 80041bc:	40004800 	.word	0x40004800
 80041c0:	40004c00 	.word	0x40004c00
 80041c4:	007a1200 	.word	0x007a1200
 80041c8:	0000ffff 	.word	0x0000ffff

080041cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	2201      	movs	r2, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4a4a      	ldr	r2, [pc, #296]	; (8004310 <UART_AdvFeatureConfig+0x144>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	0019      	movs	r1, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2202      	movs	r2, #2
 80041fc:	4013      	ands	r3, r2
 80041fe:	d00b      	beq.n	8004218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4a43      	ldr	r2, [pc, #268]	; (8004314 <UART_AdvFeatureConfig+0x148>)
 8004208:	4013      	ands	r3, r2
 800420a:	0019      	movs	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2204      	movs	r2, #4
 800421e:	4013      	ands	r3, r2
 8004220:	d00b      	beq.n	800423a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4a3b      	ldr	r2, [pc, #236]	; (8004318 <UART_AdvFeatureConfig+0x14c>)
 800422a:	4013      	ands	r3, r2
 800422c:	0019      	movs	r1, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	2208      	movs	r2, #8
 8004240:	4013      	ands	r3, r2
 8004242:	d00b      	beq.n	800425c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4a34      	ldr	r2, [pc, #208]	; (800431c <UART_AdvFeatureConfig+0x150>)
 800424c:	4013      	ands	r3, r2
 800424e:	0019      	movs	r1, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2210      	movs	r2, #16
 8004262:	4013      	ands	r3, r2
 8004264:	d00b      	beq.n	800427e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a2c      	ldr	r2, [pc, #176]	; (8004320 <UART_AdvFeatureConfig+0x154>)
 800426e:	4013      	ands	r3, r2
 8004270:	0019      	movs	r1, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2220      	movs	r2, #32
 8004284:	4013      	ands	r3, r2
 8004286:	d00b      	beq.n	80042a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4a25      	ldr	r2, [pc, #148]	; (8004324 <UART_AdvFeatureConfig+0x158>)
 8004290:	4013      	ands	r3, r2
 8004292:	0019      	movs	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2240      	movs	r2, #64	; 0x40
 80042a6:	4013      	ands	r3, r2
 80042a8:	d01d      	beq.n	80042e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <UART_AdvFeatureConfig+0x15c>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	035b      	lsls	r3, r3, #13
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d10b      	bne.n	80042e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a15      	ldr	r2, [pc, #84]	; (800432c <UART_AdvFeatureConfig+0x160>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	0019      	movs	r1, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2280      	movs	r2, #128	; 0x80
 80042ec:	4013      	ands	r3, r2
 80042ee:	d00b      	beq.n	8004308 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <UART_AdvFeatureConfig+0x164>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b002      	add	sp, #8
 800430e:	bd80      	pop	{r7, pc}
 8004310:	fffdffff 	.word	0xfffdffff
 8004314:	fffeffff 	.word	0xfffeffff
 8004318:	fffbffff 	.word	0xfffbffff
 800431c:	ffff7fff 	.word	0xffff7fff
 8004320:	ffffefff 	.word	0xffffefff
 8004324:	ffffdfff 	.word	0xffffdfff
 8004328:	ffefffff 	.word	0xffefffff
 800432c:	ff9fffff 	.word	0xff9fffff
 8004330:	fff7ffff 	.word	0xfff7ffff

08004334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af02      	add	r7, sp, #8
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2280      	movs	r2, #128	; 0x80
 8004340:	2100      	movs	r1, #0
 8004342:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004344:	f7fd fd56 	bl	8001df4 <HAL_GetTick>
 8004348:	0003      	movs	r3, r0
 800434a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2208      	movs	r2, #8
 8004354:	4013      	ands	r3, r2
 8004356:	2b08      	cmp	r3, #8
 8004358:	d10d      	bne.n	8004376 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	0399      	lsls	r1, r3, #14
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <UART_CheckIdleState+0x90>)
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	0013      	movs	r3, r2
 8004368:	2200      	movs	r2, #0
 800436a:	f000 f82d 	bl	80043c8 <UART_WaitOnFlagUntilTimeout>
 800436e:	1e03      	subs	r3, r0, #0
 8004370:	d001      	beq.n	8004376 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e022      	b.n	80043bc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2204      	movs	r2, #4
 800437e:	4013      	ands	r3, r2
 8004380:	2b04      	cmp	r3, #4
 8004382:	d10d      	bne.n	80043a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	03d9      	lsls	r1, r3, #15
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <UART_CheckIdleState+0x90>)
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	0013      	movs	r3, r2
 8004392:	2200      	movs	r2, #0
 8004394:	f000 f818 	bl	80043c8 <UART_WaitOnFlagUntilTimeout>
 8004398:	1e03      	subs	r3, r0, #0
 800439a:	d001      	beq.n	80043a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e00d      	b.n	80043bc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2274      	movs	r2, #116	; 0x74
 80043b6:	2100      	movs	r1, #0
 80043b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	b004      	add	sp, #16
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	01ffffff 	.word	0x01ffffff

080043c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	1dfb      	adds	r3, r7, #7
 80043d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	e05e      	b.n	8004498 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	3301      	adds	r3, #1
 80043de:	d05b      	beq.n	8004498 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e0:	f7fd fd08 	bl	8001df4 <HAL_GetTick>
 80043e4:	0002      	movs	r2, r0
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d11b      	bne.n	800442e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	492f      	ldr	r1, [pc, #188]	; (80044c0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004402:	400a      	ands	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2101      	movs	r1, #1
 8004412:	438a      	bics	r2, r1
 8004414:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2274      	movs	r2, #116	; 0x74
 8004426:	2100      	movs	r1, #0
 8004428:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e044      	b.n	80044b8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2204      	movs	r2, #4
 8004436:	4013      	ands	r3, r2
 8004438:	d02e      	beq.n	8004498 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	401a      	ands	r2, r3
 8004446:	2380      	movs	r3, #128	; 0x80
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	429a      	cmp	r2, r3
 800444c:	d124      	bne.n	8004498 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2280      	movs	r2, #128	; 0x80
 8004454:	0112      	lsls	r2, r2, #4
 8004456:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4917      	ldr	r1, [pc, #92]	; (80044c0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004464:	400a      	ands	r2, r1
 8004466:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2101      	movs	r1, #1
 8004474:	438a      	bics	r2, r1
 8004476:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	2120      	movs	r1, #32
 800448a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2274      	movs	r2, #116	; 0x74
 8004490:	2100      	movs	r1, #0
 8004492:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e00f      	b.n	80044b8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	425a      	negs	r2, r3
 80044a8:	4153      	adcs	r3, r2
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	001a      	movs	r2, r3
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d091      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b004      	add	sp, #16
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	fffffe5f 	.word	0xfffffe5f

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	2600      	movs	r6, #0
 80044c8:	4d0c      	ldr	r5, [pc, #48]	; (80044fc <__libc_init_array+0x38>)
 80044ca:	4c0d      	ldr	r4, [pc, #52]	; (8004500 <__libc_init_array+0x3c>)
 80044cc:	1b64      	subs	r4, r4, r5
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	2600      	movs	r6, #0
 80044d6:	f000 f821 	bl	800451c <_init>
 80044da:	4d0a      	ldr	r5, [pc, #40]	; (8004504 <__libc_init_array+0x40>)
 80044dc:	4c0a      	ldr	r4, [pc, #40]	; (8004508 <__libc_init_array+0x44>)
 80044de:	1b64      	subs	r4, r4, r5
 80044e0:	10a4      	asrs	r4, r4, #2
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	00b3      	lsls	r3, r6, #2
 80044ea:	58eb      	ldr	r3, [r5, r3]
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	00b3      	lsls	r3, r6, #2
 80044f4:	58eb      	ldr	r3, [r5, r3]
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	080045ec 	.word	0x080045ec
 8004500:	080045ec 	.word	0x080045ec
 8004504:	080045ec 	.word	0x080045ec
 8004508:	080045f0 	.word	0x080045f0

0800450c <memset>:
 800450c:	0003      	movs	r3, r0
 800450e:	1812      	adds	r2, r2, r0
 8004510:	4293      	cmp	r3, r2
 8004512:	d100      	bne.n	8004516 <memset+0xa>
 8004514:	4770      	bx	lr
 8004516:	7019      	strb	r1, [r3, #0]
 8004518:	3301      	adds	r3, #1
 800451a:	e7f9      	b.n	8004510 <memset+0x4>

0800451c <_init>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr

08004528 <_fini>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr
